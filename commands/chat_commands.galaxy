//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================



// LibapxCommandNarrate
// ====================
// just prints out a line of text to everyone
void LibapxCommandNarrate(int user, unitgroup u, string argv, int spawningCount, string bracketText) {
	string msg = argv;
	msg = StringSub( msg, StringFind(msg, " ", c_stringCase) + 1, StringLength(msg) ); // remainder of chat message


	// log msg in chatlog
	LibapxLogSay( StringToText("<c val=\"0,255,255\">Narration </n><c val=\"255,255,255\">" + msg));

	return;
}

void LibapxDefineNarrate(string commandName) {
	LibapxCommandsGuideEntrySet(
		gv_CommandsGuideEntryGeneral, 
		commandName, 
		"Prints out anonymous text to everyone in the game. </n> _narrate Text To Be Narrated </n></n><c val=\"255,229,201\">Examples</c>: </n> _narrate The Sheep jumped over the Moon.  "
	);
}

// LibapxCommandSay
// ==================
// prints [unit name]: msg to chat
// (actor talk icon and sound are defined in data.galaxy)
void LibapxCommandSay(int user, unitgroup u, string argv, int spawningCount, string bracketText) {
	text unitName;
	text unitMsg;
	string cmdMsg = argv;
	cmdMsg = " " + LibapxStringTrim(StringSub( cmdMsg, StringFind(cmdMsg, " ", c_stringCase) + 1, StringLength(cmdMsg) )); // remainder of chat message

	unitMsg = StringToText(cmdMsg);


	if (UnitGroupCount(u, c_unitCountAlive) > 1) {
		LibapxLogError(user, "Command can only be used on one unit.");
		return;
	}

	UnitGroupLoopBegin(u);
	while(!UnitGroupLoopDone()) {
		unitName = LibapxUnitGetName( UnitGroupLoopCurrent() );

		// @say unit visuals (flash circle, make a talk icon appear overhead)
		UnitFlashSelection(UnitGroupLoopCurrent(), 2.0);
		ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "AttachModel " + LibapxTalkIconActor + "{} Overhead");



		// log msg in chatlog
		LibapxLogSay( StringToText("<c val=\"175,175,175\">")+unitName + StringToText("</n><c val=\"255,255,255\">" + cmdMsg));
        LibapxUnitLogSetEntry(
            UnitGroupLoopCurrent(), 
            unitName,
            StringToText(cmdMsg)
        );

		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();

	return;
}
void LibapxDefineSay(string commandName) {
	LibapxCommandsGuideEntrySet(
		gv_CommandsGuideEntryUnit, 
		commandName, 
		"This command emotes through a unit. </n> @say [texttobesaid] </n></n><c val=\"255,229,201\">Examples</c>: </n> @say This is me, a marine, talking to you guys! People! "
	);
}

// LibapxCommandSetname
// ==================
// gives a unit a custom name by storing in data table
void LibapxCommandSetname(int user, unitgroup u, string argv, int spawningCount, string bracketText) {
	string name = argv;
	name = StringSub( name, StringFind(name, " ", c_stringCase) + 1, StringLength(name) ); // remainder of chat message

	UnitGroupLoopBegin(u);
	while(!UnitGroupLoopDone()) {


		LibapxUnitSetName(name, UnitGroupLoopCurrent());
		LibapxLogInfo(user, "Unit [ID: " + LibapxUnitId(UnitGroupLoopCurrent()) + "] name set to: " + name);
		LibapxUnitCacheUpdate(UnitGroupLoopCurrent(), "@setname", argv);
		UnitGroupLoopStep();
	}
	UnitGroupLoopEnd();

	return;
}
void LibapxDefineSetname(string commandName) {
	LibapxCommandsGuideEntrySet(
		gv_CommandsGuideEntryUnit, 
		commandName, 
		"This command sets the name of a unit used in say. Not the display name. </n> @setname [name] </n></n><c val=\"255,229,201\">Examples</c>: </n> @setname Bob Ross "
	);
}



// LibapxCommandRepeat
// =======================
// Repeats a strings
// >repeat 25 [@spawn marine;@modelswap marauder]
void LibapxCommandRepeat(int user, unitgroup u, string argv, int spawningCount, string bracketText) {
	int iterations = StringToInt(StringWord(argv, 2));
	int i;
	for(i = 0; i < iterations; i += 1) {
		LibapxChatParse(LibapxBracketTextGrab(bracketText, 1), user, u, spawningCount);
        LibapxWaitDelayRepeat(user);
    }



	return;
}
void LibapxDefineRepeat(string commandName) {
	LibapxCommandsGuideEntrySet(
		gv_CommandsGuideEntryGeneral, 
		commandName, 
		" This command repeats a given set of commands a given amount of times. </n> >repeat [amountOfTimesToRepeat] [[commands]] </n></n><c val=\"255,229,201\">Examples</c>: </n> >repeat 5 [Hi how are you!;I repeated this a lot!] "
	);
}

// LibapxCommandSet
// =======================
// Assigns commands to a type of unit.
// Bracket commands will be parsed when that type of unit is spawned/created.
// When no unit is specified, the chosen unit type will be the mouse-selected unit.
// If there are no cmds in brackets, then the commands in the selected unit's cache will be used instead.
void LibapxCommandSet(int user, unitgroup u, string argv, int spawningCount, string bracketText) {
    int cache;
    int i = 1;
    string cacheValue; 
    string eventString;
    string eventStringActual;
	string sourceUnitId;
    string unitType;
    unit tmpUnit;
    bool isEvent = false;
    bool CopyCaches = false;

    unitType = UnitTypeFromString(StringWord(argv,2));
    eventString = LibapxBracketTextGrab(bracketText, 1);
    eventStringActual = eventString; //Undecided feature to add -nodelay to @attach cmds in caches. 

    //Enforce admin setting
	if(LibapxAdminSettingIsPlayerEnforceable(user)) {
		if(!gv_LibapxSettings.allowSet) {
			LibapxLogError(user, ">set disabled due to admin settings.");
			return;
		}
	}

    for (i = 1; i <= UnitGroupCount(u, c_unitCountAll); i += 1) {
        tmpUnit = UnitGroupUnit(u, i);
    }

    if (StringWord(argv,2) == "remove" || StringWord(argv,2) == "default" ) {    //Parameters to remove cmds from selected unit(s) aka set back to "default"

        UnitGroupLoopBegin(u);
        while(!UnitGroupLoopDone()) {

        DataTableValueRemove(true, IntToString(UnitGetOwner(UnitGroupUnit(u, 1))) + UnitGetType(UnitGroupLoopCurrent()) + "_birth");
		LibapxLogInfo(user, "Removing <c val=\"d63031\"> " + UnitGetType(UnitGroupLoopCurrent()) + "'s </c>assigned >set commands.");
        UnitGroupLoopEnd();

        }
		return;
	}

    //Example: Select Marine -> ">set" , Marines will now parse with the caches taken from the selected marine unit.
    if ( eventString == "" ) {    //Code below is spliced from Sero's LibapxCommandCopy
        sourceUnitId = FixedToString(UnitGetCustomValue(tmpUnit, gv_LibapxUnitIndexId), 0);
        cache = 1;
        while( DataTableValueExists(true, sourceUnitId + "." + IntToString(cache)) ) {
            if (cache == 1) {
                eventString +=  DataTableGetString(true, sourceUnitId + "." + IntToString(cache));
            }
            else {
                eventString += ";" + DataTableGetString(true, sourceUnitId + "." + IntToString(cache));
            }
            cache += 1;
        }
        cache = 1;
        CopyCaches = true;
        eventStringActual = eventString;
    }


	if(StringFind( eventString, "@attach",c_stringNoCase) != -1) {
		eventStringActual =  StringReplaceWord(eventString, "@attach", "@attach -nodelay", 0, c_stringNoCase);
	}

    //In event of just typing ">set"
    if (CopyCaches == true && StringWord(argv,2) == "") {
    UnitGroupLoopBegin(u);
	    if (UnitGroupCount(u, c_unitCountAlive) > 1) {//This function can only be used for one unit at a time.
		    LibapxLogError(user, "This can only be used on one unit.");
		return;
	}
        while(!UnitGroupLoopDone()) {
            DataTableSetString(true, IntToString(UnitGetOwner(UnitGroupUnit(u, 1))) + UnitGetType(UnitGroupLoopCurrent()) + "_birth", eventStringActual);
            if(gv_LibapxPlayer[user].helpMessages) {
                LibapxLogInfo(user, "When a<c val=\"d63031\"> \"" + UnitGetType(UnitGroupLoopCurrent()) + "\" </c> is created, commands will be run from this unit's caches below: \n <c val=\"00cec9\">"+eventString+"</c>");
            }
            UnitGroupLoopStep();
        }
    UnitGroupLoopEnd();
    }
    else {
        UnitGroupLoopBegin(u);
        while(!UnitGroupLoopDone()) {
            //In the event of typing ">set unitType [inputString] "
            if (StringWord(argv,2) != "" ) {
                if (UnitGroupCount(u, c_unitCountAlive) > 1 && CopyCaches == true || LibapxCatalogGet(c_gameCatalogUnit, StringWord(argv,2)) == null) {//This function can only be used for one unit at a time.
                    LibapxLogError(user, "Invalid function.");
                return;
            }               
                DataTableSetString(true, IntToString(UnitGetOwner(UnitGroupUnit(u, 1))) + LibapxCatalogGet(c_gameCatalogUnit, StringWord(argv,2)) + "_birth", eventStringActual);
                if(gv_LibapxPlayer[user].helpMessages) {
                    LibapxLogInfo(user, "When a<c val=\"d63031\"> \"" + LibapxCatalogGet(c_gameCatalogUnit, StringWord(argv,2)) + "\" </c> created, these commands will be ran: \n <c val=\"00cec9\">"+eventString+"</c>");
                }
            }
            //In the event of typing ">set [inputString] "
            else {
                DataTableSetString(true, IntToString(UnitGetOwner(UnitGroupUnit(u, 1))) + UnitGetType(UnitGroupLoopCurrent()) + "_birth", eventStringActual);
                if(gv_LibapxPlayer[user].helpMessages) {
                    LibapxLogInfo(user, "When a<c val=\"d63031\"> \"" + UnitGetType(UnitGroupLoopCurrent()) + "\" </c> is created, commands will be run from this unit's caches below: \n <c val=\"00cec9\">"+eventString+"</c>");
                }
            }
            UnitGroupLoopStep();
            }
        UnitGroupLoopEnd();
        }



    return;

}
void LibapxDefineSet(string commandName) {
    LibapxCommandsGuideEntrySet(
        gv_CommandsGuideEntryGeneral, 
        commandName, 
        " This command assigns commands to the birth event of a unit type. </n> >set [UnitType] [Commands]</n></n><c val=\"255,229,201\">Examples</c>: </n> >set Marine [@scale 2;@tint 0 255 0;@removeweapon -all;@addweapon C10CanisterRifle] </n> >set [@say Reporting for duty!]; "
    );
}

// LibapxCommandEvent
// =======================
// Assigns a string to a certain event for the selected unit
// Whenever that event occurs on the unit, assigned string will parse.
// :)
void LibapxCommandEvent(int user, unitgroup u, string argv, int spawningCount, string bracketText) {
    string eventString;// assigned input
    string TheEvent = StringWord(argv, 2);// what to assign input to
    string Change;// behavior changes are integers from -1 to 6
    string abilStage;// ability stages are integers from -8 to -1
    bool isEvent = false;// param for AllEvents
    bool isAbility = false;// param for Abil catalog
    bool isBehavior = false;// param for Behavior catalog
    bool isEffect = false;// param for Effect catalog
    bool isValid = false;
    int i = 1;
    eventString = LibapxBracketTextGrab(bracketText, 1);

    // enforces admin setting
	if(LibapxAdminSettingIsPlayerEnforceable(user)) {
		if(!gv_LibapxSettings.allowEvent) {
			LibapxLogError(user, ">event disabled due to admin settings.");
			return;
		}
	}
    // help list
    if (StringCase(StringWord(argv, 2), c_stringNoCase) == "help") {
        LibapxLogInfo(user, "The current events available are \" <c val=\"00ff00\">" + gv_LibapxAllEvents + " \"</c> </n> The format for the command is >event eventname [commandshere] ");
        return;
    }
    // requires atleast 1 unit selected
    if(UnitGroupCount(u, c_unitCountAll) < 1) {
		LibapxLogError(user, "Must have at least one unit selected to apply event commands to.");
		return;
	}

    // for ability/behavior/effect params
    if (StringCase(StringWord(argv, 2), c_stringNoCase) == "ability" && LibapxCatalogGet(c_gameCatalogAbil, StringCase(StringWord(argv, 3), c_stringNoCase)) != null && StringWord(argv, 3) != ""&& StringWord(argv, 4) != ""&& StringWord(argv, 5) != "" ) {
        isAbility = true;
        TheEvent = LibapxCatalogGet(c_gameCatalogAbil, StringCase(StringWord(argv, 3), c_stringNoCase)) + StringWord(argv, 4) + StringWord(argv, 5);
        isValid = true;
        // Ex: ">event ability move 0 -3 [@say On my way!]"
    }
    if (StringCase(StringWord(argv, 2), c_stringNoCase) == "behavior"  && LibapxCatalogGet(c_gameCatalogBehavior, StringCase(StringWord(argv, 3), c_stringNoCase)) != null && StringWord(argv, 3) != "" && StringWord(argv, 4) != "") {
        isBehavior = true;
        TheEvent = LibapxCatalogGet(c_gameCatalogBehavior, StringCase(StringWord(argv, 3), c_stringNoCase)) + StringWord(argv, 4);
        isValid = true;
        // Ex: ">event behavior Stimpack 0 [@say I'M JUICED UP, SON]"
    }
    if (StringCase(StringWord(argv, 2), c_stringNoCase) == "effect"  && LibapxCatalogGet(c_gameCatalogEffect, StringCase(StringWord(argv, 3), c_stringNoCase)) != null ) {
        isEffect = true;
        TheEvent = LibapxCatalogGet(c_gameCatalogEffect, StringCase(StringWord(argv, 3), c_stringNoCase));
        isValid = true;
        // Ex: ">event effect GuassRifle [@say EAT LEAD, YOU ANIMALS]"
    }
    // see if event exists.
    while(StringWord(gv_LibapxAllEvents, i) != "") {
        if (StringWord(argv, 2) == StringWord(gv_LibapxAllEvents, i)) {
            isEvent = true;
            isValid = true;
            break;
        }
        i = i + 1;
    }


    //Finally, assign the bracket commands to the given inputs.
    if(isValid) {
        UnitGroupLoopBegin(u);
        while(!UnitGroupLoopDone()) {
            DataTableSetString(true, FixedToString(UnitGetCustomValue(UnitGroupLoopCurrent(), gv_LibapxUnitIndexId), 0) + "_" + TheEvent, eventString);
            if(gv_LibapxPlayer[user].helpMessages) {
                LibapxLogInfo(user, "Set event <c val=\"d63031\">\"" + TheEvent + "\"</c> on unit to this text: \n <c val=\"00cec9\">"+eventString+"</c>");
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
    }
    else {
        LibapxLogError(user, "Invalid event inputted, type </c>\" >event help \"<c val=\"ff0000\"> to list all assignable events.");
    }



    return;
}
void LibapxDefineEvent(string commandName) {
    LibapxCommandsGuideEntrySet(
        gv_CommandsGuideEntryGeneral, 
        commandName, 
        " This command assigns commands which will fire when unit fires an event. </n></n>>event [eventname] [[commands]]</n></n>>event ability [abilityID] [index] [stage] [[commands]] </n></n>>event behavior [BehaviorID] [BehaviorChange]</n></n>>event effect [EffectID] [[commands]]</n></n>Events available are:</n><c val=\"0,255,100\">"+gv_LibapxAllEvents+"</c> </n></n>Possible parameters are: <c val=\"255,255,0\">Ability, Behavior, Effect</c><n></n><c val=\"255,229,201\">Examples</c>: </n>>event attack [@position -rel +0 +3] </n>>event move [@move;>moveto -arc 2 [boom]]; </n>>event ability move 0 -3 [@say I moved.]</n>>event behavior Stimpack 0 [@say I'M PUMPED UP]</n>>event effect GuassRifle [@say EAT LEAD]<n><n><n><c val=\"255,229,201\">Ability Stages</c><n>-8 = c_unitAbilStageUnpause<n>-7 = c_unitAbilStagePause<n>-6 = c_unitAbilStageComplete<n>-5 = c_unitAbilStagePreempt<n>-4 = c_unitAbilStageCancel<n>-3 = c_unitAbilStageExecute<n>-2 = c_unitAbilStageQueue<n>-1 = c_unitAbilStageAll<n><n><c val=\"255,229,201\">Behavior Changes</c><n> 0 = c_unitBehaviorChangeCreate<n> 1 = c_unitBehaviorChangeDestroy<n> 2 = c_unitBehaviorChangeRefresh<n> 3 = c_unitBehaviorChangeIncrease<n> 4 = c_unitBehaviorChangeDecrease<n> 5 = c_unitBehaviorChangeActivate<n> 6 = c_unitBehaviorChangeDeactivate"    );
        }



// LibapxCommandKeypress
// =======================
// Assigns a string to a certain key for the selected unit
// When that key and that unit(only that unit) are selected, the string parses.
// :)
void LibapxCommandKeypress(int user, unitgroup u, string argv, int spawningCount, string bracketText) {
	string keypressString;
	int i = 1;
	bool isKey = false;
	keypressString = LibapxBracketTextGrab(bracketText, 1);


	if (StringCase(StringWord(argv, 2), c_stringNoCase) == "help") {
		LibapxLogInfo(user, "The current keys able to be used are \" <c val=\"00ff00\">" + gv_LibapxAllKeys + " \"</c> </n> The format for the command is >keypress key [commandshere] ");
		return;
	}
	while(StringWord(gv_LibapxAllKeys, i) != "") {

		if (StringWord(argv, 2) == StringWord(gv_LibapxAllKeys, i)) {
			isKey = true;
			break;
		}

		i = i + 1;
	}
	if(isKey) {
		UnitGroupLoopBegin(u);
		while(!UnitGroupLoopDone()) {

			LibapxUnitSetVal(UnitGroupLoopCurrent(), StringWord(argv, 2), keypressString);
            if(gv_LibapxPlayer[user].helpMessages) {
                LibapxLogInfo(user, "Set keypress <c val=\"d63031\">\"" + StringWord(argv, 2) + "\"</c> on unit to this text: \n <c val=\"00cec9\">"+keypressString+"</c>");
            }
			UnitGroupLoopStep();
		}
		UnitGroupLoopEnd();
	}
	else {
		LibapxLogError(user, "Invalid key inputted, type </c>\" >keypress help \"<c val=\"ff0000\"> to list all assignable keys.");
	}

	return;
}
void LibapxDefineKeypress(string commandName) {
	LibapxCommandsGuideEntrySet(
		gv_CommandsGuideEntryGeneral, 
		commandName, 
		" This command assigns commands to a key on a unit. </n> >keypress [keyname] [[commands]] </n> Possible keys are "+gv_LibapxAllKeys+" </n></n><c val=\"255,229,201\">Examples</c>: </n> >keypress keyW [@position -rel +0 +3] </n> >keypress keyQ [@move;>moveto -arc 2 [boom]]; "
	);
}



// LibapxCommandChance
// =======================
// Gives a chance to display one of two input strings
// chance percentage is determined by division 
//ex. >chance 2/3 [hi] [bye]
// 66% chance to say hi, 33% chance to say bye
void LibapxCommandChance(int user, unitgroup u, string argv, int spawningCount, string bracketText) {
	string temp = StringReplace(StringWord(argv, 2), " ", StringFind(StringWord(argv, 2), "/", c_stringNoCase), StringFind(StringWord(argv, 2), "/", c_stringNoCase));
	fixed percentage = StringToFixed(StringWord(temp, 1))/StringToFixed(StringWord(temp, 2));
	bool chance = RandomFixed(0, 1) <= percentage;
	if(chance) {
		LibapxChatParse(LibapxBracketTextGrab(bracketText, 1), user, u, spawningCount);
	}
	else {
		LibapxChatParse(LibapxBracketTextGrab(bracketText, 2), user, u, spawningCount);
	}



	return;
}
void LibapxDefineChance(string commandName) {
	LibapxCommandsGuideEntrySet(
		gv_CommandsGuideEntryGeneral, 
		commandName, 
		" This command gives a chance to display one of two inputs. Chance percentage is determined by division. </n> >chance [dividen]/[divisor] [[commands1]] [[commands2]] </n></n><c val=\"255,229,201\">Examples</c>: </n> >chance 1/3 [I have a 33% chance of displaying!] [I have a 66% chance of displaying!] "
	);
}

// LibapxCommandRandom
// =======================
// spits out a random entered string
void LibapxCommandRandom(int user, unitgroup u, string argv, int spawningCount, string bracketText) {
	int pickedEntry;
	int i = 1;
	int safe = 50;
	while(LibapxBracketTextGrab(bracketText, i) != "") {
		i = i + 1;
		if (i>50) {
			
			return;
			break;
		}
	} 
	pickedEntry = RandomInt(1,i-1);

	LibapxChatParse(LibapxBracketTextGrab(bracketText, pickedEntry), user, u, spawningCount);
	return;
}
void LibapxDefineRandom(string commandName) {
	LibapxCommandsGuideEntrySet(
		gv_CommandsGuideEntryGeneral, 
		commandName, 
		" This command gives a random chance to display one of a undefined quantity of inputs. </n> >random [[entries] [entries]..  ..]] </n></n><c val=\"255,229,201\">Examples</c>: </n> >random [@spawn marine] [@spawn marauder] [@spawn ghost] [@spawn battlecruiser] "
	);
}

// LibapxCommandMoveto
// =======================
// moves a unit to a location, then fires the string inputted once it arrives.
// >moveto cannon/mouse -modifier [textToBeFired]
void LibapxCommandMoveto(int user, unitgroup u, string argv, int spawningCount, string bracketText) {
    string abil;
    unit target;
    point pt = gv_LibapxPlayer[user].mousePosition;
    int mode = c_orderQueueReplace;
    order o;
    fixed moveSpeed;
    fixed distance;
    int i = 0;
    //linear
    bool modHeight = false;
    fixed desiredHeight = 4;
    //Parabolic
    bool modArc = false;
    fixed desiredPeak;
    fixed slopeOfTangentLine;
    fixed slopeOfTangentLinePerp;
    point center;
    point endPoint;
    point startPoint;
    point graphPoint;
    int indexJumper;
    fixed radius;
    fixed x;
    int percision;
    fixed y;
    //Otherstuff
    fixed timeUnitlFinished;
    //Static Global Offset -Ngo
    bool offset = false;
    //Inserting -rel from @position -Ngo
    int shifterX = 1; // 0 is subtract, 2 is add.
    int shifterY = 1;
    int p = user;
    unitgroup g = u;
    point UnitPos;
    fixed uX;
    fixed uY;
    fixed x2;
    fixed facing;
    fixed y2;
    bool relative = false;
    fixed polarDistance;
    fixed polarFacingX;
    fixed polarFacingY;
    fixed polarFacing;
    //issuing patrols
    bool patrol;
    //Additions to relative and offset (and for easier implementation)
    string argX = StringWord(argv, 3);
    string argY = StringWord(argv, 4);



    abil = LibapxCatalogGet(c_gameCatalogAbil, "move");


    if (UnitGroupCount(u, c_unitCountAlive) > 1) {
        LibapxLogError(user, "Command can only be used on one unit.");
        return;
    }
    if (StringWord(argv, 2) == "-height") {
        modHeight = true;
        desiredHeight = StringToFixed(StringWord(argv, 3));
    }
    if (StringWord(argv, 2) == "-arc") {
        modArc = true;
        argX = StringWord(argv, 5);//Moves argX for >moveto -arc [height] [X] [Y]
        argY = StringWord(argv, 6);//Moves argY for >moveto -arc [height] [X] [Y]
        if(StringWord(argv, 3) == "" ) {
            desiredPeak=4;
        } else {
            desiredPeak = StringToFixed(StringWord(argv, 3));
        }
        if (desiredPeak <= 0) {
            desiredPeak = .1;
        }
    }
    //turning offset on
    if(StringFind(argv, "-patrol" ,c_stringNoCase) != -1 ) {
        argv =  StringReplaceWord(argv, "-patrol", "", 1, c_stringNoCase);
        argX = StringWord(argv, 4);
        argY = StringWord(argv, 5);
        abil = LibapxCatalogGet(c_gameCatalogAbil, "move");
        patrol = true;
    }
    if(StringFind(argv, "-attack" ,c_stringNoCase) != -1 ) {
        argX = StringWord(argv, 4);
        argY = StringWord(argv, 5);
        argv =  StringReplaceWord(argv, "-attack", "", 1, c_stringNoCase);
        abil = LibapxCatalogGet(c_gameCatalogAbil, "attack");
    }

    //turning offset on
    if(StringFind(argv, "-offset" ,c_stringNoCase) != -1 ) {
        argv =  StringReplaceWord(argv, "-offset", "", 1, c_stringNoCase);
        offset = true;
    }
    //turning relative on
    if(StringFind(argv, "-rel" ,c_stringNoCase) != -1 ) {
        argv =  StringReplaceWord(argv, "-rel", "", 1, c_stringNoCase);
        relative = true;
    }
    //These are from @position -rel
    //When -rel is active
    if(relative == true ) {
        argv = StringReplaceWord(argv, "-rel", "",1,c_stringNoCase);
        // x Stuff
        // + or - found, isolating
        if (StringFind(argX, "+", c_stringNoCase) != -1 ) {
            //It's a +
            shifterX = 2;
            //Now remove the +
            i = StringFind(argX, "+", c_stringNoCase);
            x = StringToFixed(StringReplace(argX, "", i, i));
        }
        else if (StringFind(argX, "-", c_stringNoCase) != -1 ) {
            //It's a -
            shifterX = 0;
            //Now remove the -
            i = StringFind(argX, "-", c_stringNoCase);
            x = StringToFixed(StringReplace(argX, "", i, i));
        }
        else {
            shifterX= 1;
            x = StringToFixed(argX);
        }


        // y Stuff
        // + or - found, isolating
        if (StringFind(argY, "+", c_stringNoCase) != -1 ) {
            //It's a +
            shifterY = 2;
            //Now remove the +
            i = StringFind(argY, "+", c_stringNoCase);
            y = StringToFixed(StringReplace(argY, "", i, i));
        }
        else if (StringFind(argY, "-", c_stringNoCase) != -1 ) {
            //It's a -
            shifterY = 0;
            //Now remove the -
            i = StringFind(argY, "-", c_stringNoCase);
            y = StringToFixed(StringReplace(argY, "", i, i));
        }
        else {
            shifterY = 1;
            y = StringToFixed(argY);y = StringToFixed(argY);
        }

        if(relative) {//Thanks sero. -Ngo
            UnitGroupLoopBegin(g);
            while(!UnitGroupLoopDone())
            {
                UnitPos = UnitGetPosition(UnitGroupLoopCurrent());
                uX = PointGetX(UnitPos);
                uY = PointGetY(UnitPos);
                facing = UnitGetFacing(UnitGroupLoopCurrent());
                polarDistance = x;
    
                if (shifterX == 2) {
                    polarFacingX = 90 + facing;
                }
                else if (shifterX == 0) {
                    polarFacingX = 270 + facing;
                }
                else {
                    polarFacingX =  facing;
                }
                
                x2 = uX+(polarDistance*Cos(polarFacingX));
                y2 = uY+(polarDistance*Sin(polarFacingX));
                polarDistance = y;
                
                if (shifterY == 2) {
                    polarFacingY = facing;
                }
                else if (shifterY == 0) {
                    polarFacingY = 180 + facing;
                }
                else {
                    polarFacingY = facing;
                }
                x2 = x2+(polarDistance*Cos(polarFacingY));
                y2 = y2+(polarDistance*Sin(polarFacingY));
                
    
                pt = Point(x2,y2);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
        }
        else {
            UnitGroupLoopBegin(g);
            while(!UnitGroupLoopDone())
            {
                UnitPos = UnitGetPosition(UnitGroupLoopCurrent());
                uX = PointGetX(UnitPos);
                uY = PointGetY(UnitPos);
        
                if (shifterX == 2) {
                    x2 = uX + x;
                }
                else if (shifterX == 0) {
                    x2 = uX - x;
                }
                else {
                    x2 = x;
                }
                if (shifterY == 2) {
                    y2 = uY + y;
                }
                else if (shifterY == 0) {
                    y2 = uY - y;
                }
                else {
                    y2 = y;
                }
        
        
        
                pt = Point(x2,y2);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
        }
    

    }


    if(StringWord(argv, 4) != "" && StringWord(argv, 5) != "") {
        if(relative == false){
            if(offset == false){
            pt = Point(StringToFixed(StringWord(argv, 4)), StringToFixed(StringWord(argv, 5)));
            }
        }
    }
    //setting the point to an offset from the selected unit
    if(offset == true) {
        target = UnitGroupUnit(u, 1);
        pt = PointWithOffset(UnitGetPosition(target),StringToFixed(argX),StringToFixed(argY));
        LibapxLogError(user, libNtve_gf_ConvertPointToString(pt));
    }

    target = UnitGroupUnit(u, 1);
    o = OrderTargetingPoint(AbilityCommand(abil, 0), pt);
    if (patrol == true){
        o =  OrderTargetingPoint(AbilityCommand("move", 1), pt);
    }
    UnitIssueOrder(target, o, mode);
     AnimLengthQueryWait();
     distance = DistanceBetweenPoints(pt, UnitGetPosition(target));
     moveSpeed = UnitGetPropertyFixed(target, c_unitPropMovementSpeed, c_unitPropCurrent);
     timeUnitlFinished = distance/moveSpeed;
     if (modHeight) {
         UnitSetHeight(target,desiredHeight,timeUnitlFinished);
         Wait(timeUnitlFinished,c_timeGame);
         LibapxChatParse(LibapxBracketTextGrab(bracketText, 1),user, u, spawningCount );
     }
    else if (modArc) {
        //config
        percision = 8; 

        //Getting points
        startPoint = Point(-distance/2, 0 );
        endPoint = Point(distance/2, 0 );
        graphPoint = Point ( 0, desiredPeak );



        for(i = 0; i < percision; i = i + 1 ) {
            x = ((distance/percision)*(i+1))-distance/2;
            y = LibapxUtilParabolaCalc(graphPoint, startPoint, x);

            UnitSetHeight(target, y, timeUnitlFinished/percision);
            Wait(timeUnitlFinished/percision,c_timeGame);
        };

        LibapxChatParse(LibapxBracketTextGrab(bracketText, 1),user, u, spawningCount );


        //UnitSetHeight(target,heightOfArc,timeUnitlFinished/2);
        //Wait(timeUnitlFinished/2,c_timeGame);
        //UnitSetHeight(target,0,timeUnitlFinished/2);
        //Wait(timeUnitlFinished/2,c_timeGame);
        //LibapxChatParse(LibapxBracketTextGrab(bracketText, 1),user, u, spawningCount );


     }
     else {
        Wait(timeUnitlFinished,c_timeGame);
        LibapxChatParse(LibapxBracketTextGrab(bracketText, 1),user, u, spawningCount );
     }


     
     

    return;
}
void LibapxDefineMoveto(string commandName) {
	LibapxCommandsGuideEntrySet(
		gv_CommandsGuideEntryGeneral, 
        commandName, 
        " This command moves a unit to your mousepoint and runs the input you give it when it arrives at it's destination. The unit can travel in a parabolic way by using -arc, or it can it move to a desired height with -height. Can instead patrol with -patrol. Using relative offset instead of mouse, use -rel but for fixed offset instead use -offset. </n> >moveto [modifier] [heightofparabola] [[commands;whateverelse]] </n></n><c val=\"255,229,201\">Examples</c>: </n> >moveto -height 5 [Landed!] </n> >moveto -arc 12 [wee!] </n> >moveto -rel +5 +5 [Diagonal movement is cool] </n> >moveto -offset 0 -5 [Going down!] </n> >moveto -patrol +2 +5 [It's a nice day to go out on patrol]"
    );
}



// LibapxCommandCondition
// =======================
// Runs based on if the condition is true or not
void LibapxCommandCondition(int user, unitgroup u, string argv, int spawningCount, string bracketText) {
    string input1 = StringWord(argv, 2); 
    string condition = StringWord(argv, 3);
    string input2 = StringWord(argv, 4);

	if(input1 == "") {
		LibapxLogError(user, "Must have first input");
        return;
    }

	if(condition == "") {
		LibapxLogError(user, "Must have condition input");
        return;
    }

	if(input2 == "") {
		LibapxLogError(user, "Must have second input");
        return;
    }

    if(!LibapxIsFixed(input1)) {
		LibapxLogError(user, "Inputs must be numeric");
        return;
    }
    
    if(!LibapxIsFixed(input2)) {
		LibapxLogError(user, "Inputs must be numeric");
        return;
    }

    if(!(condition == "=" || condition == ">" || condition == ">=" || condition == "<" || condition == "<=")) {
		LibapxLogError(user, "Condition must be one of these \"=, >, >=, <, <=\"");
        return;
    }

    if(condition == "=") {
        if(input1 == input2) {
            LibapxChatParse(LibapxBracketTextGrab(bracketText, 1), user, u, spawningCount);
        }
        else {
            LibapxChatParse(LibapxBracketTextGrab(bracketText, 2), user, u, spawningCount);
        }
    }


    if(condition == ">") {
        if( StringToFixed( input1) > StringToFixed( input2)) {
            LibapxChatParse(LibapxBracketTextGrab(bracketText, 1), user, u, spawningCount);
        }
        else {
            LibapxChatParse(LibapxBracketTextGrab(bracketText, 2), user, u, spawningCount);
        }
    }

    if(condition == ">=") {
        if( StringToFixed( input1) >= StringToFixed( input2)) {
            LibapxChatParse(LibapxBracketTextGrab(bracketText, 1), user, u, spawningCount);
        }
        else {
            LibapxChatParse(LibapxBracketTextGrab(bracketText, 2), user, u, spawningCount);
        }
    }

    if(condition == "<") {
        if( StringToFixed( input1) < StringToFixed( input2)) {
            LibapxChatParse(LibapxBracketTextGrab(bracketText, 1), user, u, spawningCount);
        }
        else {
            LibapxChatParse(LibapxBracketTextGrab(bracketText, 2), user, u, spawningCount);
        }
    }

    if(condition == "<=") {
        if( StringToFixed( input1) <= StringToFixed( input2)) {
            LibapxChatParse(LibapxBracketTextGrab(bracketText, 1), user, u, spawningCount);
        }
        else {
            LibapxChatParse(LibapxBracketTextGrab(bracketText, 2), user, u, spawningCount);
        }
    }

	return;
}
void LibapxDefineCondition(string commandName) {
	LibapxCommandsGuideEntrySet(
		gv_CommandsGuideEntryVariableFunctions, 
		commandName, 
		" This command compares to values with either =, >, >=, <, or <= and then runs either of two options passed with brackets </n> >condition input1 > input2 [if Condition True] [if Condition False] "
	);
}
