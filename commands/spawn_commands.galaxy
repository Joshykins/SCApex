//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================


// =======================
// Deals with redirecting the @spawn command to a proper unit create command
// all actual unit creation is handled in engine/unit.galaxy
//LibapxCommandSpawn

void LibapxCommandSpawn(int user, unitgroup u, string argv, int spawningCount, string bracketText) {
  point spawnPoint = gv_LibapxPlayer[user].mousePosition;
	int count = StringToInt( StringWord(argv, 2) );
	string type = StringWord(argv, 3);
	region location = null;
	int player = user;
	string parameter;


  //colossus check


   	// used for parsing a location or player parameter

	// if no parameters specified, check last instance and try to repeat
	if( StringWord(argv, 2) == "" ) {
		if( gv_LibapxPlayer[user].spawnInstanceType != "" ) {
			type = gv_LibapxPlayer[user].spawnInstanceType;
			count = gv_LibapxPlayer[user].spawnInstanceCount;
			player = gv_LibapxPlayer[user].spawnInstancePlayer;
			if( gv_LibapxPlayer[user].spawnInstanceLocation != null ) {
				spawnPoint = RegionGetCenter( gv_LibapxPlayer[user].spawnInstanceLocation );
			}

			gv_gv_LibapxPlayerParser[user][spawningCount].context = UnitGroupEmpty();
			while (count > 0) {
				LibapxUnitCreate(type, player, spawnPoint, 270.0, spawningCount);
				count -= 1;
			}

			return;
		}
		else {
			LibapxPrintError(user, "Invalid unit type, or no previous spawn instance");
			return;
		}
	}

	// if count is 0, try checking 3rd index, swap unit type to 2nd index
	// (this allows either @spawn # unit or @spawn unit #)
	if( count == 0 ) {
		count = StringToInt( StringWord(argv, 3) );
		type = StringWord(argv, 2);
	}

	// get unit type
	if( type == "" ) {
		LibapxPrintError(user, "INVALID UNIT TYPE");
		return;
	}

	else {
		type = UnitTypeFromString(type);
		//type = librtprCatalogGet( c_gameCatalogUnit, type );
		if (type == "" || !CatalogEntryIsValid(c_gameCatalogUnit, type) || UnitTypeTestFlag(type, c_unitFlagMissile) ) {
			LibapxPrintError(user, "INVALID UNIT TYPE");
			return;
		}
	}


	if( count <= 0 ) {
		count = 1;
	}

	// otherwise spawn a number of units:

	// check if a player or region is specified (4th and 5th index)
	// -> region specified by "#[name]"
	// -> player specified by "@[player-color]"
	if( StringWord(argv, 4) != "" ) {
		if( StringContains( StringWord(argv, 4), "#", c_stringBegin, c_stringNoCase) ) {
			parameter = StringWord(argv, 4);
			parameter = LibapxRegionGetName( StringSub(parameter, 2, StringLength(parameter)), user );
			if( DataTableValueExists(true, parameter) ) {
				location = DataTableGetRegion(true, parameter);
				spawnPoint = RegionGetCenter(location);
			}
			else {
				LibapxPrintError(user, "No region by name \"" + parameter + "\" exists, defaulting to cursor");
			}
		}
		else if( StringContains( StringWord(argv, 4), "@", c_stringBegin, c_stringNoCase) ) {
			parameter = StringWord(argv, 4);
			player = LibapxColorToPlayer( StringSub(parameter, 2, StringLength(parameter)), user );
			if( player == -1 ) {
				player = user;
				LibapxPrintError(user, "Invalid player color, defaulting to self");
			}
		}
	}
	if( StringWord(argv, 5) != "" ) {
		if( StringContains( StringWord(argv, 5), "#", c_stringBegin, c_stringNoCase) ) {
			parameter = StringWord(argv, 5);
			parameter = LibapxRegionGetName( StringSub(parameter, 2, StringLength(parameter)), user );
			if( DataTableValueExists(true, parameter) ) {
				location = DataTableGetRegion(true, parameter);
				spawnPoint = RegionGetCenter(location);
			}
			else {
				LibapxPrintError(user, "No region by name \"" + parameter + "\" exists, defaulting to cursor");
			}
		}
		else if( StringContains( StringWord(argv, 5), "@", c_stringBegin, c_stringNoCase) ) {
			parameter = StringWord(argv, 5);
			player = LibapxColorToPlayer( StringSub(parameter, 2, StringLength(parameter)), user );
			if( player == -1 ) {
				player = user;
				LibapxPrintError(user, "Invalid player color, defaulting to self");
			}
		}
	}

	// ensure spawn instance count is less than max count in settings
	// TEMPORARY: until better spawn throttling is implemented
	if( count > gv_LibapxSettings.maxSpawnCount ) {
		count = gv_LibapxSettings.maxSpawnCount;
	}

	// set player spawn instance (before spawning so count is preserved)
	gv_LibapxPlayer[user].spawnInstanceType = type;
	gv_LibapxPlayer[user].spawnInstanceCount = count;
	gv_LibapxPlayer[user].spawnInstancePlayer = player;
	gv_LibapxPlayer[user].spawnInstanceLocation = location;

	// make spawned units
	gv_gv_LibapxPlayerParser[user][spawningCount].context = UnitGroupEmpty();
	while (count > 0) {
		UnitGroupAddUnitGroup(gv_gv_LibapxPlayerParser[user][spawningCount].context, LibapxUnitCreate(type, player, spawnPoint, 270.0, spawningCount));
		count -= 1;
	}

	return;
}
void LibapxDefineRegionSpawn(string commandName) {
	LibapxCommandsGuideEntrySet(
		gv_CommandsGuideEntryUnit, 
		commandName, 
		" This command spawns a unit or units. <br> @spawn [unitname] [amount] <br> Examples: <br> @spawn marauder 3  "
	);
}
//LibapxCommandSpawnPlus
void LibapxCommandSpawnPlus(int user, unitgroup u, string argv, int spawningCount, string bracketText) {
	point spawnPoint = gv_LibapxPlayer[user].mousePosition;
	int count = StringToInt( StringWord(argv, 2) );
	string type = StringWord(argv, 3);
	region location = null;
	int player = user;
	string parameter;



  	// used for parsing a location or player parameter

	// if no parameters specified, check last instance and try to repeat
	if( StringWord(argv, 2) == "" ) {
		if( gv_LibapxPlayer[user].spawnInstanceType != "" ) {
			type = gv_LibapxPlayer[user].spawnInstanceType;
			count = gv_LibapxPlayer[user].spawnInstanceCount;
			player = gv_LibapxPlayer[user].spawnInstancePlayer;
			if( gv_LibapxPlayer[user].spawnInstanceLocation != null ) {
				spawnPoint = RegionGetCenter( gv_LibapxPlayer[user].spawnInstanceLocation );
			}

			gv_gv_LibapxPlayerParser[user][spawningCount].context = UnitGroupEmpty();
			while (count > 0) {
				LibapxUnitCreate(type, player, spawnPoint, 270.0, spawningCount);
				count -= 1;
			}

			return;
		}
		else {
			LibapxPrintError(user, "Invalid unit type, or no previous spawn instance");
			return;
		}
	}

	// if count is 0, try checking 3rd index, swap unit type to 2nd index
	// (this allows either @spawn # unit or @spawn unit #)
	if( count == 0 ) {
		count = StringToInt( StringWord(argv, 3) );
		type = StringWord(argv, 2);
	}

	// get unit type
	if( type == "" ) {
		LibapxPrintError(user, "INVALID UNIT TYPE");
		return;
	}

	else {
		type = UnitTypeFromString(type);
		//type = librtprCatalogGet( c_gameCatalogUnit, type );
		if (type == "" || !CatalogEntryIsValid(c_gameCatalogUnit, type) || UnitTypeTestFlag(type, c_unitFlagMissile) ) {
			LibapxPrintError(user, "INVALID UNIT TYPE");
			return;
		}
	}

	// if count is <= 0, then turn on mouse-click spawning
	if( count <= 0 ) {
    if(StringFind(type, "colossus", c_stringNoCase) != -1 ) {
  		LibapxPrintOutput(user, "Spawn+ can't be used with colossus");
      return;
  	} else {
      LibapxPrintOutput(user, "SPAWNING: " + type + "\n(Press [Left Mouse] to place, [ESC] key to cancel.\n" +
  							"Hold: [Ctrl] to rotate, [Shift] to scale, [Alt] to change height,\n" +
  							"Hold: [Right Mouse] to lock position)");
  		LibapxSpawnCreateSplat(type, user,  spawningCount);
  		gv_LibapxPlayer[user].isPlacingUnit = true;
  		UISetSelectionTypeEnabled(PlayerGroupSingle(user), c_localSelectionTypeUnknown, false);
  		UnitClearSelection(user);	// deselect player selected units
  		return;
    }

	}

	// otherwise spawn a number of units:

	// check if a player or region is specified (4th and 5th index)
	// -> region specified by "#[name]"
	// -> player specified by "@[player-color]"
	if( StringWord(argv, 4) != "" ) {
		if( StringContains( StringWord(argv, 4), "#", c_stringBegin, c_stringNoCase) ) {
			parameter = StringWord(argv, 4);
			parameter = LibapxRegionGetName( StringSub(parameter, 2, StringLength(parameter)), user );
			if( DataTableValueExists(true, parameter) ) {
				location = DataTableGetRegion(true, parameter);
				spawnPoint = RegionGetCenter(location);
			}
			else {
				LibapxPrintError(user, "No region by name \"" + parameter + "\" exists, defaulting to cursor");
			}
		}
		else if( StringContains( StringWord(argv, 4), "@", c_stringBegin, c_stringNoCase) ) {
			parameter = StringWord(argv, 4);
			player = LibapxColorToPlayer( StringSub(parameter, 2, StringLength(parameter)), user );
			if( player == -1 ) {
				player = user;
				LibapxPrintError(user, "Invalid player color, defaulting to self");
			}
		}
	}
	if( StringWord(argv, 5) != "" ) {
		if( StringContains( StringWord(argv, 5), "#", c_stringBegin, c_stringNoCase) ) {
			parameter = StringWord(argv, 5);
			parameter = LibapxRegionGetName( StringSub(parameter, 2, StringLength(parameter)), user );
			if( DataTableValueExists(true, parameter) ) {
				location = DataTableGetRegion(true, parameter);
				spawnPoint = RegionGetCenter(location);
			}
			else {
				LibapxPrintError(user, "No region by name \"" + parameter + "\" exists, defaulting to cursor");
			}
		}
		else if( StringContains( StringWord(argv, 5), "@", c_stringBegin, c_stringNoCase) ) {
			parameter = StringWord(argv, 5);
			player = LibapxColorToPlayer( StringSub(parameter, 2, StringLength(parameter)), user );
			if( player == -1 ) {
				player = user;
				LibapxPrintError(user, "Invalid player color, defaulting to self");
			}
		}
	}

	// ensure spawn instance count is less than max count in settings
	// TEMPORARY: until better spawn throttling is implemented
	if( count > gv_LibapxSettings.maxSpawnCount ) {
		count = gv_LibapxSettings.maxSpawnCount;
	}

	// set player spawn instance (before spawning so count is preserved)
	gv_LibapxPlayer[user].spawnInstanceType = type;
	gv_LibapxPlayer[user].spawnInstanceCount = count;
	gv_LibapxPlayer[user].spawnInstancePlayer = player;
	gv_LibapxPlayer[user].spawnInstanceLocation = location;

	// make spawned units
	gv_gv_LibapxPlayerParser[user][spawningCount].context = UnitGroupEmpty();
	while (count > 0) {
		UnitGroupAddUnitGroup(gv_gv_LibapxPlayerParser[user][spawningCount].context, LibapxUnitCreate(type, player, spawnPoint, 270.0, spawningCount));
		count -= 1;
	}

	return;
}
void LibapxDefineRegionSpawnPlus(string commandName) {
	LibapxCommandsGuideEntrySet(
		gv_CommandsGuideEntryUnit, 
		commandName, 
		" This command spawns a unit or units on click. <br> @spawn+ [unitname] [amount] <br> Examples: <br> @spawn+ marauder <br> @spawn+ marine;@scale 3 "
	);
}