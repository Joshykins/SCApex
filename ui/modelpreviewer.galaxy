//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

// guess for the max number of catalog models
// this is required because an array of model catalog entries must be used
// the array must be declared with a fixed index size
static const int LibapxMaxCatalogNumber = 24000;

// intitial model preview scale and the scale size increment step
static const fixed LibapxUiModelPreviewScaleInit = 0.15;
static const string LibapxUiModelPreviewScaleActrmsg = "SetScale 0.15 0.05";
static const fixed LibapxUiModelPReviewScaleStep = 0.01;
static const fixed LibapxUiModelPreviewScaleMin = 0.01;
static const int LibapxUiModelPreviewAngleStep = 15;

// name of the animgroup play name for the portrait model
static const string LibapxUiModelPreviewAnimationGroupName = "MODELPREVIEWANIM";

// actor reference alias for the main actor in the model preview
static const string LibapxUiModelPreviewRef = "MODELPREVIEW";

// actor reference alias for the attach axis tests
static const string LibapxUiModelPreviewAttachRef = "MODELPREVIEWTEST";

// list of all catalog models, size LibapxMaxCatalogNumber + 1 because index
// will effectively begin with 1 rather than 0 since Catalog index starts at 1
static string[LibapxMaxCatalogNumber+1] LibapxModelCatalog;

// index shift for a catalog model while filtering the list
static int[gv_LibapxMaxPlayers][LibapxMaxCatalogNumber+1] LibapxModelCatalogShift;

// number of models in the game model catalog
static int LibapxNmodels;

// dialog for the model previewer
int LibapxUiModelpreviewer;

// dialog control items
// TODO: move most of the buttons to local vars, since they arent needed
// outside of the function itself
static int LibapxUiModelpreviewList;
static int LibapxUiModelpreviewRotlBtn;
static int LibapxUiModelpreviewRotrBtn;
static int LibapxUiModelpreviewScaleupBtn;
static int LibapxUiModelpreviewScaledownBtn;
static int LibapxUiModelpreviewSearch;
static int LibapxUiModelpreviewSearchBtn;
static int LibapxUiModelpreviewSearchReset;
static int LibapxUiModelpreviewAnim;
static int LibapxUiModelpreviewAnimBtn;
static int LibapxUiModelpreviewAnimResetBtn;
static int LibapxUiModelpreviewAttach;
static int LibapxUiModelpreviewAttachBtn;
static int LibapxUiModelpreviewAttachResetBtn;

// Type: LibapxUiModelpreviewerModel
// ===========
// individual player tracked data for model preview actor in the previewer
struct LibapxUiModelpreviewerModel {
	int portrait;
	fixed scale;
	int angle;
};
static LibapxUiModelpreviewerModel[gv_LibapxMaxPlayers] LibapxUiModelpreview;

// LibapxUiModelpreviewerInit
// ==================
// Creates the model previewer ui panel (except portrait, which is separate
// for each player)
void LibapxUiModelpreviewerInit() {
	int i;
	int nmodels = CatalogEntryCount(c_gameCatalogModel);

	LibapxUiModelpreviewer = LibapxCreateDialog(600, 700, c_anchorRight, 60, -150);
	LibapxUiModelpreviewList = LibapxCreateDialogList(LibapxUiModelpreviewer, 260, 382, c_anchorTopLeft, 14, 44);

	// portrait model adjustment buttons
	LibapxUiModelpreviewRotrBtn = LibapxCreateDialogBtn(LibapxUiModelpreviewer, 40, 40, c_anchorTopRight, 85, 370, "Rotate right", "" );
	LibapxUiModelpreviewScaleupBtn = LibapxCreateDialogBtn(LibapxUiModelpreviewer, 40, 40, c_anchorTopRight, 130, 370, "Scale up", "" );
	LibapxUiModelpreviewScaledownBtn = LibapxCreateDialogBtn(LibapxUiModelpreviewer, 40, 40, c_anchorTopRight, 160, 370, "Scale down", "" );
	LibapxUiModelpreviewRotlBtn = LibapxCreateDialogBtn(LibapxUiModelpreviewer, 40, 40, c_anchorTopRight, 205, 370, "Rotate left", "" );

	// search bar
	LibapxUiModelpreviewSearch = LibapxCreateDialogEditbox(LibapxUiModelpreviewer, 480, 50, c_anchorTopLeft, 10, 430);
	LibapxUiModelpreviewSearchBtn = LibapxCreateDialogBtn(LibapxUiModelpreviewer, 50, 50, c_anchorCenter, 0, 0, "Search model", "" );
	LibapxUiModelpreviewSearchReset = LibapxCreateDialogBtn(LibapxUiModelpreviewer, 50, 50, c_anchorCenter, 0, 0, "Reset list", "" );
	DialogControlSetPositionRelative(LibapxUiModelpreviewSearchBtn, PlayerGroupAll(), c_anchorLeft, LibapxUiModelpreviewSearch, c_anchorRight, 0, 0);
	DialogControlSetPositionRelative(LibapxUiModelpreviewSearchReset, PlayerGroupAll(), c_anchorLeft, LibapxUiModelpreviewSearchBtn, c_anchorRight, 0, 0);

	// play animation
	LibapxUiModelpreviewAnim = LibapxCreateDialogEditbox(LibapxUiModelpreviewer, 310, 50, c_anchorTopLeft, 180, 540);
	LibapxUiModelpreviewAnimBtn = LibapxCreateDialogBtn(LibapxUiModelpreviewer, 50, 50, c_anchorCenter, 0, 0, "Go", "" );
	LibapxUiModelpreviewAnimResetBtn = LibapxCreateDialogBtn(LibapxUiModelpreviewer, 50, 50, c_anchorCenter, 0, 0, "Reset", "" );
	DialogControlSetPositionRelative(LibapxUiModelpreviewAnimBtn, PlayerGroupAll(), c_anchorLeft, LibapxUiModelpreviewAnim, c_anchorRight, 0, 0);
	DialogControlSetPositionRelative(LibapxUiModelpreviewAnimResetBtn, PlayerGroupAll(), c_anchorLeft, LibapxUiModelpreviewAnimBtn, c_anchorRight, 0, 0);

	// attach point axis test
	LibapxUiModelpreviewAttach = LibapxCreateDialogEditbox(LibapxUiModelpreviewer, 310, 50, c_anchorTopLeft, 180, 590);
	LibapxUiModelpreviewAttachBtn = LibapxCreateDialogBtn(LibapxUiModelpreviewer, 50, 50, c_anchorCenter, 0, 0, "Go", "" );
	LibapxUiModelpreviewAttachResetBtn = LibapxCreateDialogBtn(LibapxUiModelpreviewer, 50, 50, c_anchorCenter, 0, 0, "Reset", "" );
	DialogControlSetPositionRelative(LibapxUiModelpreviewAttachBtn, PlayerGroupAll(), c_anchorLeft, LibapxUiModelpreviewAttach, c_anchorRight, 0, 0);
	DialogControlSetPositionRelative(LibapxUiModelpreviewAttachResetBtn, PlayerGroupAll(), c_anchorLeft, LibapxUiModelpreviewAttachBtn, c_anchorRight, 0, 0);

	// create button icons
	LibapxCreateDialogBtnIcon(LibapxUiModelpreviewer, LibapxUiModelpreviewRotrBtn, 30, 30, gv_LibapxUiIconRight);
	LibapxCreateDialogBtnIcon(LibapxUiModelpreviewer, LibapxUiModelpreviewScaleupBtn, 30, 30, gv_LibapxUiIconPlus);
	LibapxCreateDialogBtnIcon(LibapxUiModelpreviewer, LibapxUiModelpreviewScaledownBtn, 30, 30, gv_LibapxUiIconMinus);
	LibapxCreateDialogBtnIcon(LibapxUiModelpreviewer, LibapxUiModelpreviewRotlBtn, 30, 30, gv_LibapxUiIconLeft);
	LibapxCreateDialogBtnIcon(LibapxUiModelpreviewer, LibapxUiModelpreviewSearchBtn, 40, 40, gv_LibapxUiIconSearch);
	LibapxCreateDialogBtnIcon(LibapxUiModelpreviewer, LibapxUiModelpreviewSearchReset, 40, 40, gv_LibapxUiIconReset);
	LibapxCreateDialogBtnIcon(LibapxUiModelpreviewer, LibapxUiModelpreviewAnimBtn, 40, 40, gv_LibapxUiIconGo);
	LibapxCreateDialogBtnIcon(LibapxUiModelpreviewer, LibapxUiModelpreviewAnimResetBtn, 40, 40, gv_LibapxUiIconReset);
	LibapxCreateDialogBtnIcon(LibapxUiModelpreviewer, LibapxUiModelpreviewAttachBtn, 40, 40, gv_LibapxUiIconGo);
	LibapxCreateDialogBtnIcon(LibapxUiModelpreviewer, LibapxUiModelpreviewAttachResetBtn, 40, 40, gv_LibapxUiIconReset);

	// create static labels
	LibapxCreateDialogLabel(LibapxUiModelpreviewer, 240, 30, c_anchorTopLeft, 14, 12, "Preview model:", gv_LibapxUiHeader2);
	LibapxCreateDialogLabel(LibapxUiModelpreviewer, 230, 60, c_anchorTopLeft, 14, 510, "Model options:", gv_LibapxUiHeader2);
	LibapxCreateDialogLabel(LibapxUiModelpreviewer, 130, 60, c_anchorTopLeft, 0, 0, "Play anim:", gv_LibapxUiHeader3);
	DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, LibapxUiModelpreviewAnim, c_anchorLeft, 0, 0);
	LibapxCreateDialogLabel(LibapxUiModelpreviewer, 160, 60, c_anchorTopLeft, 0, 0, "Attach test:", gv_LibapxUiHeader3);
	DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, LibapxUiModelpreviewAttach, c_anchorLeft, 0, 0);

	// populate the model preview list
	// index i starts at 1 because Catalog index begins at 1
	for(i = 1; i <= nmodels && i <= LibapxMaxCatalogNumber; i += 1) {
		LibapxModelCatalog[i] = CatalogEntryGet(c_gameCatalogModel, i);
		DialogControlAddItem(LibapxUiModelpreviewList, PlayerGroupAll(), StringToText(LibapxModelCatalog[i]));
	}
	LibapxNmodels = i - 1; // set number of models to how many models added to list

	// add model previewer trigger events
	TriggerAddEventDialogControl(TriggerCreate("LibapxUiModelPreviewSelect"), c_playerAny, LibapxUiModelpreviewList, c_triggerControlEventTypeSelectionChanged);
	TriggerAddEventDialogControl(TriggerCreate("LibapxUiModelpreviewFilter"), c_playerAny, LibapxUiModelpreviewSearchBtn, c_triggerControlEventTypeClick);
	TriggerAddEventDialogControl(TriggerCreate("LibapxUiModelpreviewReset"), c_playerAny, LibapxUiModelpreviewSearchReset, c_triggerControlEventTypeClick);
	TriggerAddEventDialogControl(TriggerCreate("LibapxUiModelpreviewScaleInc"), c_playerAny, LibapxUiModelpreviewScaleupBtn, c_triggerControlEventTypeClick);
	TriggerAddEventDialogControl(TriggerCreate("LibapxUiModelpreviewScaleDec"), c_playerAny, LibapxUiModelpreviewScaledownBtn, c_triggerControlEventTypeClick);
	TriggerAddEventDialogControl(TriggerCreate("LibapxUiModelpreviewAngleInc"), c_playerAny, LibapxUiModelpreviewRotrBtn, c_triggerControlEventTypeClick);
	TriggerAddEventDialogControl(TriggerCreate("LibapxUiModelpreviewAngleDec"), c_playerAny, LibapxUiModelpreviewRotlBtn, c_triggerControlEventTypeClick);
	TriggerAddEventDialogControl(TriggerCreate("LibapxUiModelpreviewAnimPlay"), c_playerAny, LibapxUiModelpreviewAnimBtn, c_triggerControlEventTypeClick);
	TriggerAddEventDialogControl(TriggerCreate("LibapxUiModelpreviewAnimReset"), c_playerAny, LibapxUiModelpreviewAnimResetBtn, c_triggerControlEventTypeClick);
	TriggerAddEventDialogControl(TriggerCreate("LibapxUiModelpreviewAttachAxis"), c_playerAny, LibapxUiModelpreviewAttachBtn, c_triggerControlEventTypeClick);
	TriggerAddEventDialogControl(TriggerCreate("LibapxUiModelpreviewAttachReset"), c_playerAny, LibapxUiModelpreviewAttachResetBtn, c_triggerControlEventTypeClick);

}

// LibapxUiModelpreviewerInitPlayer
// =============
// Creates the portrait for each player. Each player must have its own
// dialog control portrait so that the model in the portrait will be
// unique for each player
void LibapxUiModelpreviewerInitPlayer(int p) {
	LibapxUiModelpreview[p].portrait = LibapxCreateDialogPortrait(LibapxUiModelpreviewer, 250, 300, c_anchorTopRight, 44, 56);
	libNtve_gf_SetDialogItemUseTransition(LibapxUiModelpreview[p].portrait, false, PlayerGroupSingle(p));
	libNtve_gf_SetDialogItemCamera(LibapxUiModelpreview[p].portrait, "Star2CameraLow01", PlayerGroupSingle(p));
	DialogControlSetVisible(LibapxUiModelpreview[p].portrait, PlayerGroupAll(), false);
	DialogControlSetVisible(LibapxUiModelpreview[p].portrait, PlayerGroupSingle(p), true);

	// initialize the portrait model
	libNtve_gf_SetDialogItemModel(LibapxUiModelpreview[p].portrait, "MercHavenChick", PlayerGroupSingle(p));
	ActorSend(ActorFromDialogControl(LibapxUiModelpreview[p].portrait), LibapxUiModelPreviewScaleActrmsg);

	// set player model state
	LibapxUiModelpreview[p].scale = LibapxUiModelPreviewScaleInit;
	LibapxUiModelpreview[p].angle = 0;
}

// LibapxUiModelpreviewListReset
// ================
// Resets the model list for a player:
// First removes all list items, then readds all models from catalog list
void LibapxUiModelpreviewListReset(int player) {
	int i;

	DialogControlRemoveAllItems(LibapxUiModelpreviewList, PlayerGroupSingle(player));
	for( i = 1; i <= LibapxNmodels; i += 1) {
		DialogControlAddItem(LibapxUiModelpreviewList, PlayerGroupSingle(player), StringToText(LibapxModelCatalog[i]));
		LibapxModelCatalogShift[player][i] = 0;
	}
}

// LibapxUiModelPreviewSelect
// ==============
// Event trigger for when a model in the list has been selected
// -> Sets the model in the portrait, rescales, and resets facing
bool LibapxUiModelPreviewSelect(bool testConds, bool runActions) {
	string model;
	int player = EventPlayer();
	int i;
	int j;

	i = DialogControlGetSelectedItem(LibapxUiModelpreviewList, player);
	j = LibapxModelCatalogShift[player][i]; //in case a search was run, the index will be offset
	model = LibapxModelCatalog[i + j];

	// remove any attached axis attachpoint testers
	ActorSendTo(ActorFromDialogControl(LibapxUiModelpreview[player].portrait), LibapxUiModelPreviewAttachRef, "Destroy");

	// create the new actor/model
	libNtve_gf_SetDialogItemModel(LibapxUiModelpreview[player].portrait, model, PlayerGroupSingle(EventPlayer()));
	ActorSend(ActorFromDialogControl(LibapxUiModelpreview[player].portrait), "ModelSwap {" + model + "}");
	ActorSend(ActorFromDialogControl(LibapxUiModelpreview[player].portrait), LibapxUiModelPreviewScaleActrmsg);
	ActorSend(ActorFromDialogControl(LibapxUiModelpreview[player].portrait), "SetFacing 0");
	ActorSend(ActorFromDialogControl(LibapxUiModelpreview[player].portrait), "AliasAdd " + LibapxUiModelPreviewRef);

	LibapxUiModelpreview[player].scale = LibapxUiModelPreviewScaleInit;
	LibapxUiModelpreview[player].angle = 0;

	return true;
}

// LibapxUiModelpreviewFilter
// ==============
// Filters the model list for the search terms input.
// -> Must create offsets for each catalog entry so the player can switch
//    model to proper model in list, since theres no way to get the string
//    value from a list item.
bool LibapxUiModelpreviewFilter(bool testConds, bool runActions) {
	string filter = libNtve_gf_DialogItemEditValue(LibapxUiModelpreviewSearch, EventPlayer());
	int i;
	int j = 0;

	// first reset list
	LibapxUiModelpreviewListReset(EventPlayer());

	// search bar empty, just reset list and exit
	if( filter == "" ) {
		return true;
	}

	// else, remove entries that dont match filter
	for( i = 1; i <= LibapxNmodels; i += 1) {
		if( !StringContains(LibapxModelCatalog[i], filter, c_stringAnywhere, c_stringNoCase) ) {
			DialogControlRemoveItem(LibapxUiModelpreviewList, PlayerGroupSingle(EventPlayer()), i - j);
			j += 1;
		}
		else {
			LibapxModelCatalogShift[EventPlayer()][i - j] = j;
		}
	}

	return true;
}

// LibapxUiModelpreviewReset
// ==============
// repopulates the model preview list with model catalog entries
bool LibapxUiModelpreviewReset(bool testConds, bool runActions) {
	LibapxUiModelpreviewListReset(EventPlayer());
	return true;
}

// LibapxUiModelpreviewScaleInc
// ===============
// Increases the model preview scale size by the increment step defined
bool LibapxUiModelpreviewScaleInc(bool testConds, bool runActions) {
	LibapxUiModelpreview[EventPlayer()].scale += LibapxUiModelPReviewScaleStep;
	ActorSend(ActorFromDialogControl(LibapxUiModelpreview[EventPlayer()].portrait), "SetScale " + FixedToString(LibapxUiModelpreview[EventPlayer()].scale, 3) + " 0.1");
	ActorSendTo(ActorFromDialogControl(LibapxUiModelpreview[EventPlayer()].portrait), LibapxUiModelPreviewAttachRef, "SetScale " + FixedToString(LibapxUiModelpreview[EventPlayer()].scale, 3) + " 0.1");
	return true;
}

// LibapxUiModelpreviewScaleDec
// ================
// Decreases the model preview scale size by decrement
// -> If reached min scale, dont scale any further
bool LibapxUiModelpreviewScaleDec(bool testConds, bool runActions) {
	if( LibapxUiModelpreview[EventPlayer()].scale > LibapxUiModelPreviewScaleMin ) {
		LibapxUiModelpreview[EventPlayer()].scale -= LibapxUiModelPReviewScaleStep;
		ActorSend(ActorFromDialogControl(LibapxUiModelpreview[EventPlayer()].portrait), "SetScale " + FixedToString(LibapxUiModelpreview[EventPlayer()].scale, 3) + " 0.1");
		ActorSendTo(ActorFromDialogControl(LibapxUiModelpreview[EventPlayer()].portrait), LibapxUiModelPreviewAttachRef, "SetScale " + FixedToString(LibapxUiModelpreview[EventPlayer()].scale, 4) + " 0.1");
	}
	return true;
}

// LibapxUiModelpreviewAngleInc
// ==================
// Increments the facing angle of the model by the defined step constant
// (rotates towards right, CCW)
bool LibapxUiModelpreviewAngleInc(bool testConds, bool runActions) {
	LibapxUiModelpreview[EventPlayer()].angle += LibapxUiModelPreviewAngleStep;
	ActorSend(ActorFromDialogControl(LibapxUiModelpreview[EventPlayer()].portrait), "SetFacing " + IntToString(LibapxUiModelpreview[EventPlayer()].angle));
	return true;
}

// LibapxUiModelpreviewAngleDec
// ==================
// Decrements the facing angle of the model by the defined step constant
// (rotates towards left, CW)
bool LibapxUiModelpreviewAngleDec(bool testConds, bool runActions) {
	LibapxUiModelpreview[EventPlayer()].angle -= LibapxUiModelPreviewAngleStep;
	ActorSend(ActorFromDialogControl(LibapxUiModelpreview[EventPlayer()].portrait), "SetFacing " + IntToString(LibapxUiModelpreview[EventPlayer()].angle));
	return true;
}

// LibapxUiModelpreviewAnimPlay
// ==================
// Makes the portrait model play an animation input in the anim editbox
bool LibapxUiModelpreviewAnimPlay(bool testConds, bool runActions) {
	string anim = libNtve_gf_DialogItemEditValue(LibapxUiModelpreviewAnim, EventPlayer());

	// force capitalization of the first letter
	// since animations have first letter capitalized
	anim = StringCase(StringSub(anim, 1, 1), true) + StringSub(anim, 2, StringLength(anim));

	ActorSend(ActorFromDialogControl(LibapxUiModelpreview[EventPlayer()].portrait), "AnimPlay " + LibapxUiModelPreviewAnimationGroupName + " " + anim + " PlayForever");
	return true;
}

// LibapxUiModelpreviewAnimReset
// ===============
// Resets (clears) the animation applied to the model preview
bool LibapxUiModelpreviewAnimReset(bool testConds, bool runActions) {
	ActorSend(ActorFromDialogControl(LibapxUiModelpreview[EventPlayer()].portrait), "AnimClear " + LibapxUiModelPreviewAnimationGroupName);
	return true;
}

// LibapxUiModelpreviewAnimPlay
// ==================
// Attaches an axis to the input point in the attach point edit box
bool LibapxUiModelpreviewAttachAxis(bool testConds, bool runActions) {
	string attachPoint = libNtve_gf_DialogItemEditValue(LibapxUiModelpreviewAttach, EventPlayer());
	if( attachPoint == "" ) { // no input, exit
		return true;
	}

	// force capitalization of the first letter (most actor attach points
	// have capital first letter)
	attachPoint = StringCase(StringSub(attachPoint, 1, 1), true) + StringSub(attachPoint, 2, StringLength(attachPoint));

	// Attach an axis to the test point
	// -> must use ::LastCreatedActual to capture the Axis because it belongs
	//    to CActorModel scope, which cant be referenced with ActorLastCreated()
	ActorSendTo(ActorFromDialogControl(LibapxUiModelpreview[EventPlayer()].portrait), LibapxUiModelPreviewRef, "AttachModelOffset {} {Axis} {" + attachPoint + "}");
	ActorSend(ActorFrom("::LastCreatedActual"), "AliasAdd " + LibapxUiModelPreviewAttachRef);
	ActorSendTo(ActorFromDialogControl(LibapxUiModelpreview[EventPlayer()].portrait), LibapxUiModelPreviewAttachRef, "SetScale " + FixedToString(LibapxUiModelpreview[EventPlayer()].scale, 4) + " 0.1");

	return true;
}

// LibapxUiModelpreviewAttachReset
// ==================
// Removes all attached axis from the preview model
bool LibapxUiModelpreviewAttachReset(bool testConds, bool runActions) {
	ActorSendTo(ActorFromDialogControl(LibapxUiModelpreview[EventPlayer()].portrait), LibapxUiModelPreviewAttachRef, "Destroy");
	return true;
}
