//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================


// number of ui panels for the ui utility toolbar
static const int LibapxUiNumberOfPanels = 9;

//Size of buttons
static const int LibapxUiBtnSize = 45;
static const int LibapxUiBtnSpacing = 15;
static const int LibapxUiBtnInsideSpacingMulti = 0;



const int gv_LibapxUiPanelSpacing = LibapxUiBtnSize+LibapxUiBtnSpacing*2;

// data table identifier prefix for linking a toolbar button to its panel
// Data table name is "uiPanel_[btn ID]", where the [btn ID] is the integer
// value for the dialog control button on the toolbar for the panel
static const string gv_LibapxUiPanelDataTablePrefix = "uiPanel_";

static bool[16] playerPatchnotesVis;

// Type: LibapxUiPanel
// ===============
// information about each dialog panel to create toolbar buttons
struct LibapxUiPanel {
	int dialog;		// dialog panel
	int btn;		// toolbar button dialog control
	int exitBtn;	//Exit button dialog(parrent)
	string name;	// name of the panel
	string icon;	// string path for toolbar icon
	color col;
};
// list of the dialog panels in the ui
LibapxUiPanel[LibapxUiNumberOfPanels] gv_LibapxUiPanels;

include "apex/ui/modelpreviewer.galaxy"
include "apex/ui/chatlog.galaxy"
include "apex/ui/aliases.galaxy"
include "apex/ui/color_picker.galaxy"
include "apex/ui/commands_guide.galaxy"
include "apex/ui/catalog.galaxy"
include "apex/ui/patchnotes.galaxy"
include "apex/ui/info.galaxy"
include "apex/ui/attachchecker.galaxy"
include "apex/ui/references.galaxy"
include "apex/ui/decal.galaxy"




// visibility state of each ui panel (true - on, false - off)
// must be tracked for each player
static bool[LibapxUiNumberOfPanels][gv_LibapxMaxPlayers] LibapxUiPanelState;

// dialog toolbar on right side of the screen to access ui panels
static int LibapxUiPanelToolbar;

// prototypes:
static void LibapxUiToolbarInit();

// LibapxUiInitializePanels
// ====================
// Sets array list of each dialog panel info struct.
// These must be manually declared for each panel.
static void LibapxUiInitializePanels() {

	gv_LibapxUiPanels[0].dialog = LibapxUiDecal;
	gv_LibapxUiPanels[0].exitBtn = LibapxUiDecalExit;
	gv_LibapxUiPanels[0].name = "Decals";
	gv_LibapxUiPanels[0].icon = "Assets\\Textures\\decal_terran_0047_01.dds";
	gv_LibapxUiPanels[0].col = Color(100,100,100);

	gv_LibapxUiPanels[1].dialog = LibapxUiCommands;
	gv_LibapxUiPanels[1].exitBtn = LibapxUiCommandsExit;
	gv_LibapxUiPanels[1].name = "Commands Guide";
	gv_LibapxUiPanels[1].icon = "Apex\\Assets\\Textures\\CommandsGuide.png";
	gv_LibapxUiPanels[1].col = Color(100,100,100);


//	gv_LibapxUiPanels[1].dialog = LibapxUiModelpreviewer;
//	gv_LibapxUiPanels[1].name = "Model Previewer";
//	gv_LibapxUiPanels[1].icon = "Assets\\Textures\\btn-ability-protoss-phaseshift.dds";

	gv_LibapxUiPanels[2].dialog = LibapxUiChatlog;
	gv_LibapxUiPanels[2].exitBtn = LibapxUiChatlogExit;
	gv_LibapxUiPanels[2].name = "Chat Log";
	gv_LibapxUiPanels[2].icon = "Apex\\Assets\\Textures\\ChatLog.png";
	gv_LibapxUiPanels[2].col = Color(100,100,100);

	gv_LibapxUiPanels[3].dialog = LibapxUiAliases;
	gv_LibapxUiPanels[3].exitBtn = LibapxUiAliasesExit;
	gv_LibapxUiPanels[3].name = "Aliases";
	gv_LibapxUiPanels[3].icon = "Apex\\Assets\\Textures\\Aliases.png";
	gv_LibapxUiPanels[3].col = Color(100,100,100);

	gv_LibapxUiPanels[4].dialog = LibapxUiColorPicker;
	gv_LibapxUiPanels[4].exitBtn = LibapxUiColorPickerExit;
	gv_LibapxUiPanels[4].name = "Color Picker";
	gv_LibapxUiPanels[4].icon = "Apex\\Assets\\Textures\\ColorPicker.png";
	gv_LibapxUiPanels[4].col = Color(100,100,100);

	gv_LibapxUiPanels[5].dialog = LibapxUiCatalog;
	gv_LibapxUiPanels[5].exitBtn = LibapxUiCatalogExit;
	gv_LibapxUiPanels[5].name = "Catalog";
	gv_LibapxUiPanels[5].icon = "Apex\\Assets\\Textures\\Catalog.png";
	gv_LibapxUiPanels[5].col = Color(100,100,100);

	//gv_LibapxUiPanels[5].dialog = LibapxUiColorPicker;
	//gv_LibapxUiPanels[5].name = "Terrain Editor";
	//gv_LibapxUiPanels[5].icon = "Apex\\Assets\\Textures\\TerrainEditor.png";
	//gv_LibapxUiPanels[5].col = Color(100,100,100);

	gv_LibapxUiPanels[6].dialog = LibapxUiAttachchk;
	gv_LibapxUiPanels[6].exitBtn = LibapxUiAttachchkExit;
	gv_LibapxUiPanels[6].name = "Attachpoint Checker";
	gv_LibapxUiPanels[6].icon = "Apex\\Assets\\Textures\\AttachChecker.png";
	gv_LibapxUiPanels[6].col = Color(100,100,100);

	//gv_LibapxUiPanels[6].dialog = LibapxUiSettings;
	//gv_LibapxUiPanels[6].name = "Settings";
	//gv_LibapxUiPanels[6].icon = "Apex\\Assets\\Textures\\Settings.png";
	//gv_LibapxUiPanels[6].col = Color(100,100,100);

	gv_LibapxUiPanels[7].dialog = gv_LibapxUiReferences;
	gv_LibapxUiPanels[7].exitBtn = gv_LibapxUiReferencesExit;
	gv_LibapxUiPanels[7].name = "References";
	gv_LibapxUiPanels[7].icon = "Apex\\Assets\\Textures\\References.png";
	gv_LibapxUiPanels[7].col = Color(100,100,100);

	gv_LibapxUiPanels[8].dialog = LibapxUiInfo;
	gv_LibapxUiPanels[8].exitBtn = LibapxUiInfoExit;
	gv_LibapxUiPanels[8].name = "Info";
	gv_LibapxUiPanels[8].icon = "Apex\\Assets\\Textures\\Info.png";
	gv_LibapxUiPanels[8].col = Color(100,100,100);
	//test <img path="Assets\Textures\smx1LeviathandoorglowWhite.dds" color="255,255,255" height="1"/>
}
// LibapxUiInitialize
// =====================
// Initializes all ui panels and creates an array list of the panel info.
// Creates the Apex UI toolbar that allows access to the ui panels through
// dialog control buttons.
// Adds event triggers for the UI toolbar buttons.
void LibapxUiInitialize() {
	int player;


	UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
	UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
	UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, false);
	UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
	UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
	UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
	UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
	UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
	UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, false);

	//X colorpicker bars
	//X Color picker perms
	//X control groups
	//X catalog modelswap flag
	//X catalog wrong entry
	//X fix skybox animation 
	//X Increase camera tickrate
	//X Attach Checker unit perms
	//X Fixed keypress
	//X Proper @rename in @say
	//Transport units


	// initialize panels
	//	LibapxUiModelpreviewerInit();
	LibapxUiChatlogInit();
	LibapxUiAliasesInit();
	LibapxUiCommandsInit();
	LibapxUiColorPickerInit();
	LibapxUiCatalogInit();
	LibapxUiPatchnotesInit();
	LibapxUiInfoInit();
	LibapxUiAttachchkInit();
	LibapxUiReferencesInit();
	LibapxUiDecalInit();

	// perform player unique panel initialization
	for( player = 1; player < gv_LibapxMaxPlayers; player += 1 ) {
		if( PlayerType(player) == c_playerTypeUser && PlayerStatus(player) == c_playerStatusActive ) {
		//	LibapxUiModelpreviewerInitPlayer(player);
			LibapxUiChatlogInitPlayer(player);
			LibapxUiAliasesInitPlayer(player);
			LibapxUiCommandsInitPlayer(player);
			LibapxUiColorPickerInitPlayer(player);
			LibapxUiCatalogInitPlayer(player);
			LibapxUiPatchnotesInitPlayer(player);
			LibapxUiInfoInitPlayer(player);
			LibapxUiAttachchkInitPlayer(player);
			LibapxUiReferencesInitPlayer(player);
			LibapxUiDecalInitPlayer(player);
		}
	}

	// set the panels list
	LibapxUiInitializePanels();

	// create the Apex ui toolbar
	LibapxUiToolbarInit();


}

// LibapxUiToolbarInit
// =================
// Creates the Apex ui panel toolbar. This is a toolbar with buttons anchored
// to right side of the screen that players can use to access each ui panel.
static void LibapxUiToolbarInit() {
	int i;
	int btn;
	int LibapxUiVersion;
	int LibapxUiPermissions;
	int LibapxUiUnitnameToggle;
	int tmp;
	int patchNotesWidth = 200;
	int patchNotesHeight = 27;

    LibapxUiVersion = LibapxCreateDialogInvis(patchNotesWidth, patchNotesHeight*2, c_anchorTopRight, 20, 20);
     LibapxCreateDialogLabelWithColor(
		LibapxUiVersion, 
		patchNotesWidth-20, 
		patchNotesHeight, 
		c_anchorTopLeft, 
		14, 
		0, 
		"Apex Engine v" + IntToString(gv_LibapxBuildVersion) + "." + IntToString(gv_LibapxBuildSubVersion) + gv_LibapxBuildVersionModifier + "", 
		gv_LibapxUiHeader4,
		ColorWithAlpha(90,90,90,60));
	

	tmp = LibapxCreateDialogBtnInvis(LibapxUiVersion , patchNotesWidth, patchNotesHeight, c_anchorTopRight, 00, 00,"Open Patch Notes","");
	TriggerAddEventDialogControl(TriggerCreate("LibapxPatchnotesToggle"), c_playerAny, tmp, c_triggerControlEventTypeClick);
	DialogSetVisible(LibapxUiVersion, PlayerGroupAll(), true);

	LibapxCreateDialogBtnIconColoredAnchor(LibapxUiVersion, tmp, c_anchorRight, 20,20, gv_LibapxUiInfoImage, ColorWithAlpha(110,115,130,60));
	LibapxUiUnitnameToggle = LibapxCreateDialogInvis(302, 68, c_anchorBottomRight, 20, 200);
	tmp = LibapxCreateDialogBtn(LibapxUiUnitnameToggle , 300, 100, c_anchorCenter, 00, 00,"View Character Information","<s><c val=\"ffffff\">View Unit Description</c></s>");
	DialogSetVisible(LibapxUiUnitnameToggle, PlayerGroupAll(), true);
	TriggerAddEventDialogControl(TriggerCreate("LibapxDescriptionToggle"), c_playerAny, tmp, c_triggerControlEventTypeClick);
	


	LibapxUiPanelToolbar = LibapxCreateDialog(
		LibapxUiBtnSize+LibapxUiBtnSpacing*2, 
		LibapxUiBtnSpacing*2 + (LibapxUiBtnSize+LibapxUiBtnSpacing*LibapxUiBtnInsideSpacingMulti)*LibapxUiNumberOfPanels, c_anchorTopLeft, 0, 0);
	DialogSetVisible(LibapxUiPanelToolbar, PlayerGroupAll(), true);


	//x Fix editor camera pause
	//x Look at editor camera scroll bug
	//X Name emulation of blank namespace
	//Move chat to bottom left
	//IC to mid
	//X Character picture/wf emulation
	//X UI integration of controlgroups maybe.
	//x Colorpicker bar clientside
	//X Colorpicker Print statement
	//Patreon stuff
	//Tooltip
	//X transport ui
	//building ui
	//S-val
	//Ui off

	


	// initialize toolbar buttons
	for( i = 0; i < LibapxUiNumberOfPanels; i += 1 ) {
		// initialize the button: link its dialog control number of the button
		// to the panel index in the LibapxUiPanel array list through
		// the data table
		btn = LibapxCreateDialogBtn(
			LibapxUiPanelToolbar, 
			LibapxUiBtnSize, 
			LibapxUiBtnSize, 
			c_anchorBottomRight, 
			LibapxUiBtnSpacing, 
			LibapxUiBtnSpacing + i*(LibapxUiBtnSize+LibapxUiBtnSpacing*LibapxUiBtnInsideSpacingMulti), 
			gv_LibapxUiPanels[i].name, "");
		gv_LibapxUiPanels[i].btn = btn;
		DataTableSetInt(true, gv_LibapxUiPanelDataTablePrefix + IntToString(btn), i);

		// create icon for the button
		//libNtve_gf_CreateDialogItemImage(LibapxUiPanelToolbar, 46, 46, c_anchorTopLeft, 9, 9 + i*50, StringToText(""), gv_LibapxUiPanels[i].icon, c_triggerImageTypeNormal, false, Color(100, 100, 100), c_triggerBlendModeNormal);
		LibapxCreateDialogBtnIconColored(LibapxUiPanelToolbar, btn, LibapxUiBtnSize-18, LibapxUiBtnSize-18, gv_LibapxUiPanels[i].icon, gv_LibapxUiPanels[i].col);
		TriggerAddEventDialogControl(TriggerCreate("LibapxUiPanelToggle"), c_playerAny, gv_LibapxUiPanels[i].btn, c_triggerControlEventTypeClick);
	}
	for (i = 1; i <= PlayerGroupCount(PlayerGroupActive()); i += 1) {
		LibapxUiPermissions = LibapxCreateDialog(200, 70, c_anchorBottomLeft, 10, 350);

		//Create The Moderate/Admin Dialog
		gv_LibapxPlayer[i].permissionLevelUi = LibapxCreateDialogLabelWithColor(
			LibapxUiPermissions, 
			200, 
			70, 
			c_anchorCenter, 
			30, 
			23, 
			"Unset Permission"+IntToString(i), 
			gv_LibapxUiHeader4,
		ColorWithAlpha(90,90,90,100));


		DialogSetVisible(LibapxUiPermissions, PlayerGroupSingle(i), true);
		tmp = PlayerGroupPlayer(PlayerGroupActive(), i);
		LibapxUiSwitchtoPanel(gv_LibapxUiPanels[8].btn, tmp); //8 is info panel
	}
	
	// add event triggers for ui dialog controls
	

}

//LibapxPatchnotesToggle
bool LibapxPatchnotesToggle(bool testConds, bool runActions) {
	int p = EventPlayer();
	int activePanel = gv_LibapxPlayer[p].activeUiPanel;
	playerPatchnotesVis[p] = !playerPatchnotesVis[p];
	gv_LibapxPlayer[p].descriptionOpen = false;
	DialogSetVisible(LibapxUiPatchnotes,PlayerGroupSingle(p), playerPatchnotesVis[p]);

	// turn off existing active panel (if any)
	if( activePanel != gv_LibapxUiPanelNone) {
		DialogSetVisible(gv_LibapxUiPanels[activePanel].dialog, PlayerGroupSingle(p), false);
		DialogSetVisible(gv_LibapxUiPanels[activePanel].exitBtn, PlayerGroupSingle(p), false);
		// toggle off toolbar button
		libNtve_gf_SetDialogItemToggled(gv_LibapxUiPanels[activePanel].btn, false, PlayerGroupSingle(p));
		DialogControlSetPropertyAsBool(gv_LibapxUiFakewireframe, c_triggerControlPropertyVisible, PlayerGroupSingle(p), false);
	}
	return true;
}


//LibapxPatchnotesToggle
bool LibapxDescriptionToggle(bool testConds, bool runActions) {
	int p = EventPlayer();
	int activePanel = gv_LibapxPlayer[p].activeUiPanel;
	gv_LibapxPlayer[p].descriptionOpen = !gv_LibapxPlayer[p].descriptionOpen;
	DialogControlSetPropertyAsBool(gv_LibapxUiDescriptionParrent, c_triggerControlPropertyVisible, PlayerGroupSingle(p), gv_LibapxPlayer[p].descriptionOpen);
	playerPatchnotesVis[p] = false;
	// turn off existing active panel (if any)
	if( activePanel != gv_LibapxUiPanelNone) {
		DialogSetVisible(gv_LibapxUiPanels[activePanel].dialog, PlayerGroupSingle(p), false);
		DialogSetVisible(gv_LibapxUiPanels[activePanel].exitBtn, PlayerGroupSingle(p), false);
		// toggle off toolbar button
		libNtve_gf_SetDialogItemToggled(gv_LibapxUiPanels[activePanel].btn, false, PlayerGroupSingle(p));
		DialogControlSetPropertyAsBool(gv_LibapxUiFakewireframe, c_triggerControlPropertyVisible, PlayerGroupSingle(p), false);
		DialogSetVisible(LibapxUiPatchnotes,PlayerGroupSingle(p), playerPatchnotesVis[p]);
	
	}
	return true;
}


void LibapxUiSwitchtoPanel(int panelIndex, int player) {
	int p = player;
	string panelIdentifier = gv_LibapxUiPanelDataTablePrefix + IntToString(panelIndex);
	int panel;
	int activePanel = gv_LibapxPlayer[p].activeUiPanel;
	playerPatchnotesVis[p] = false;


	DialogSetVisible(LibapxUiPatchnotes,PlayerGroupSingle(p), playerPatchnotesVis[p]);
	// toggle the ui panel if the dialog control button is linked to a panel
	if( DataTableValueExists(true, panelIdentifier) ) {
		panel = DataTableGetInt(true, panelIdentifier);

		// turn off existing active panel (if any)
		if( activePanel != gv_LibapxUiPanelNone) {
			DialogSetVisible(gv_LibapxUiPanels[activePanel].exitBtn, PlayerGroupSingle(p), false); //Button
			DialogSetVisible(gv_LibapxUiPanels[activePanel].dialog, PlayerGroupSingle(p), false);	//Dialog
			// toggle off toolbar button
			libNtve_gf_SetDialogItemToggled(gv_LibapxUiPanels[activePanel].btn, false, PlayerGroupSingle(p));
			DialogControlSetPropertyAsBool(gv_LibapxUiFakewireframe, c_triggerControlPropertyVisible, PlayerGroupSingle(p), false);

		}

		// toggle ui panel visibility and set the active panel
		if( panel != activePanel ) {
			if(panel == 3) { // aliases
				LibapxUiAliasesOpenPlayer(p);
			}
			DialogSetVisible(gv_LibapxUiPanels[panel].dialog, PlayerGroupSingle(p), true);
			DialogSetVisible(gv_LibapxUiPanels[panel].exitBtn, PlayerGroupSingle(p), true);
			gv_LibapxPlayer[p].activeUiPanel = panel;
			if(panel == 0) {
				DialogControlSetPropertyAsBool(gv_LibapxUiFakewireframe, c_triggerControlPropertyVisible, PlayerGroupSingle(p), true);
			}

		} else { // same dialog just turned off, so set active panel to none
			gv_LibapxPlayer[p].activeUiPanel = gv_LibapxUiPanelNone;

		}
	}
	//This occurs if exit button clicked
	else if (panelIndex == -12) {
		if( activePanel != gv_LibapxUiPanelNone) {
			DialogSetVisible(gv_LibapxUiPanels[activePanel].exitBtn, PlayerGroupSingle(p), false); //Button
			DialogSetVisible(gv_LibapxUiPanels[activePanel].dialog, PlayerGroupSingle(p), false);	//Dialog
			// toggle off toolbar button	
			libNtve_gf_SetDialogItemToggled(gv_LibapxUiPanels[activePanel].btn, false, PlayerGroupSingle(p));
			gv_LibapxPlayer[p].activeUiPanel = gv_LibapxUiPanelNone;
		}
	}
}

// LibapxUiPanelToggle
// =====================
// Toggles a ui dialog panel visibility on/off from toolbar dialog control
// buttons. Button is linked to a ui panel in the LibapxUiPanel array list
// through a data table, so if data table entry exists, then toolbar button
// was clicked.
// (gv_LibapxUiPanelNone is defined as -1 in player.galaxy)
bool LibapxUiPanelToggle(bool testConds, bool runActions) {
	int p = EventPlayer();
	LibapxUiSwitchtoPanel(EventDialogControl(), p);

	return true;
}


bool LibapxUiPanelToggleBtn(bool testConds, bool runActions) {
	int p = EventPlayer();
	string panelIdentifier = gv_LibapxUiPanelDataTablePrefix + IntToString(EventDialogControl());


	LibapxUiSwitchtoPanel(-12, p);
	return true;
}