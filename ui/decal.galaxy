//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================
int LibapxUiDecal;
int LibapxUiDecalExit;

//Dialogs for Decal adding/removing/selecting/renaming
static int UiDecalList;
static int UiDecalRemove;
static int UiDecalAdd;
static int UiDecalName;



//dialogs for selecting layer
static int DecalLayerList;
static int DecalLayerRemove;
static int LayerAdd;


static int PropTypeText = 0;
static int PropTypeToggle = 1;

struct UiDecalPropertiesSig {
    string name;
    int type;
    int width;
    int dialog;
};
//Dialog for editing properties
static const int DecalPropCount = 12;
static UiDecalPropertiesSig[DecalPropCount] LibapxUiDecalProps;

//Preview(external hookup)


void LibapxUiDecalInit() {
    int tmp;
    int width;
    int i;
    LibapxUiDecal = LibapxCreateDialog(840, 710, c_anchorTopLeft, gv_LibapxUiPanelSpacing, 0);
    LibapxUiDecalExit = LibapxCreateDialogCloseBtn(LibapxUiDecal, 840, 710, c_anchorTopLeft, gv_LibapxUiPanelSpacing, 0);
    
	LibapxCreateDialogTitle(LibapxUiDecal , 300, 40, 00, 40, "Decal Editor", gv_LibapxUiHeader1, 200);
    



    //Dialogs for decal list
    tmp = LibapxCreateDialogLabel(LibapxUiDecal , 100, 40, c_anchorTopLeft, 40, 110, "Decals", gv_LibapxUiHeader1);
    width = 130;
    UiDecalList = LibapxCreateDialogList(LibapxUiDecal, width, 240, c_anchorTopLeft, 666, 666);
    DialogControlSetPositionRelative(UiDecalList, PlayerGroupAll(), c_anchorTop, tmp, c_anchorBottom, 0 ,0);
    UiDecalRemove = LibapxCreateDialogBtn(LibapxUiDecal, width, 50, c_anchorTop, 666, 666, "Remove Decal", "<s>Remove");
    DialogControlSetPositionRelative(UiDecalRemove, PlayerGroupAll(), c_anchorTop, UiDecalList, c_anchorBottom, 0, 10);
    UiDecalName = LibapxCreateDialogEditbox(LibapxUiDecal, width, 50, c_anchorTop, 666, 666);
    DialogControlSetPositionRelative(UiDecalName, PlayerGroupAll(), c_anchorTop, UiDecalRemove, c_anchorBottom, 0, 10);
    UiDecalAdd = LibapxCreateDialogBtn(LibapxUiDecal, width, 50, c_anchorTop, 666, 666, "Add Decal", "<s>Add");
    DialogControlSetPositionRelative(UiDecalAdd, PlayerGroupAll(), c_anchorTop, UiDecalName, c_anchorBottom, 0, -5);
    
    //Dialogs for layer list
    tmp = LibapxCreateDialogLabel(LibapxUiDecal , 100, 40, c_anchorTopLeft, 180, 110, "Layer", gv_LibapxUiHeader1);
    width = 100;
    DecalLayerList = LibapxCreateDialogList(LibapxUiDecal, width, 240, c_anchorTopLeft, 666, 666);
    DialogControlSetPositionRelative(DecalLayerList, PlayerGroupAll(), c_anchorTop, tmp, c_anchorBottom, 0 ,0);
    DecalLayerRemove = LibapxCreateDialogBtn(LibapxUiDecal, width, 50, c_anchorTop, 666, 666, "Remove Layer", "<s>Remove");
    DialogControlSetPositionRelative(DecalLayerRemove, PlayerGroupAll(), c_anchorTop, DecalLayerList, c_anchorBottom, 0, 10);
    LayerAdd = LibapxCreateDialogBtn(LibapxUiDecal, width, 50, c_anchorTop, 666, 666, "Add Layer", "<s>Add");
    DialogControlSetPositionRelative(LayerAdd, PlayerGroupAll(), c_anchorTop, DecalLayerRemove, c_anchorBottom, 0, 10);

    //Properties
    for (i = 0; i < DecalPropCount; i += 1) {
        LibapxUiDecalProps[i].name = StringWord("ImagePath Red Green Blue Saturated RenderPriority OffsetX OffsetY Width Height Rotation Alpha",i+1);
        if(LibapxUiDecalProps[i].name != "Saturated") {
            LibapxUiDecalProps[i].type = PropTypeText;
        }
        else {
            LibapxUiDecalProps[i].type = PropTypeToggle;
        }
        //Img path bigger
        if(LibapxUiDecalProps[i].name == "ImagePath") {
            LibapxUiDecalProps[i].width = 400;
        }
        else {
            LibapxUiDecalProps[i].width = 120;
        }
        //Generate the properties
        LibapxCreateDialogLabel(LibapxUiDecal , 100, 40, c_anchorTopLeft, 290, 110+(i*45), "<s>"+LibapxUiDecalProps[i].name, gv_LibapxUiHeader1);
        if(LibapxUiDecalProps[i].type == PropTypeText) {
            LibapxUiDecalProps[i].dialog = LibapxCreateDialogEditbox(LibapxUiDecal , LibapxUiDecalProps[i].width, 50, c_anchorTopLeft, 385, 110+(i*45));           
        }
        if(LibapxUiDecalProps[i].type == PropTypeToggle) {
            LibapxUiDecalProps[i].dialog = LibapxCreateDialogCheckbox(LibapxUiDecal , 50, 50, c_anchorTopLeft, 385, 110+(i*45));
        }
    }
    DialogSetRenderPriority(LibapxUiDecal, 1);
        //Trigger Hookup 
}
//For each player
void LibapxPopulateWireframesUi(int p);
static void PopulateLayers(int p, string decal);

void LibapxUiDecalInitPlayer(int p) {
    string name;
    int i;
    TriggerAddEventDialogControl(TriggerCreate("LibapxDecalDecallistSelect"), p, UiDecalList, c_triggerControlEventTypeSelectionChanged);
    TriggerAddEventDialogControl(TriggerCreate("LibapxDecalLayerlistSelect"), p, DecalLayerList, c_triggerControlEventTypeSelectionChanged);
    TriggerAddEventDialogControl(TriggerCreate("UiDecalRemoveClicked"), p, UiDecalRemove, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(TriggerCreate("UiDecalAddClicked"), p, UiDecalAdd, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(TriggerCreate("DecalLayerRemoveClicked"), p, DecalLayerRemove, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(TriggerCreate("LayerAddClicked"), p, LayerAdd, c_triggerControlEventTypeClick);
    
    for (i = 0; i < DecalPropCount; i += 1) {
        name = LibapxUiDecalProps[i].name;
        if(LibapxUiDecalProps[i].type == PropTypeText) {
            TriggerAddEventDialogControl(TriggerCreate("LibapxDecalTrigTyped"), p, LibapxUiDecalProps[i].dialog, c_triggerControlEventTypeTextChanged);
        }
        if(LibapxUiDecalProps[i].type == PropTypeToggle) {
            TriggerAddEventDialogControl(TriggerCreate("LibapxDecalTrigChecked"), p, LibapxUiDecalProps[i].dialog, c_triggerControlEventTypeChecked);
        }
    }
}
//Populate shit
void LibapxPopulateWireframesUi(int p) {
    string decals = LibapxWireframesGetAll(p);
    int i;
    DialogControlRemoveAllItems(UiDecalList, PlayerGroupSingle(p));
    i = 1;
    while(StringWord(decals, i) != "") {
        DialogControlAddItem(UiDecalList, PlayerGroupSingle(p),StringToText(StringWord(decals,i)));
        i+=1;
    }
    //Retrieve list
};
bool LibapxDecalLayerlistSelect(bool testConds,bool runActions) {
    int p = EventPlayer();
    int selected = DialogControlGetSelectedItem(UiDecalList, p);
    string decals = LibapxWireframesGetAll(p);
    string decal = StringWord(decals, selected);
    int layer = DialogControlGetSelectedItem(DecalLayerList, p);
    string params = BankValueGetAsString(gv_LibapxPlayer[p].bankStorage, "WF_"+decal, "WFL_"+IntToString(layer));
    int i;
    //Retrieve and populate info
    //This order
    //ImagePath Color Saturated RenderPriority OffsetX OffsetY Width Height Rotation Alpha
    for (i = 0; i < DecalPropCount; i += 1) {
        if(LibapxUiDecalProps[i].type == PropTypeText) { 
            libNtve_gf_SetDialogItemEditorValue(LibapxUiDecalProps[i].dialog, StringWord(params, i+1),PlayerGroupSingle(p));
        }
        if(LibapxUiDecalProps[i].type == PropTypeToggle) {
            if(StringWord(params, i+1) == "1") {
                libNtve_gf_SetDialogItemChecked(LibapxUiDecalProps[i].dialog, true,PlayerGroupSingle(p));
            }
            else {
                libNtve_gf_SetDialogItemChecked(LibapxUiDecalProps[i].dialog, false,PlayerGroupSingle(p));
            }
        }
    }
    return true;
}

//RenderWF
static void renderFakewireframeLayer(int p, int layer,
    //Properties
    string path,
    int r,
    int g,
    int b,
    int saturation,
    int renderPriority,
    int offsetX,
    int offsetY,
    int width,
    int height,
    int rotation,
    int alpha
) {
    int image;
    offsetX *= 2;
    offsetY *= 2;
    width *= 2;
    height *= 2;

    image = DialogControlCreateInPanel(gv_LibapxUiFakewireframe, c_triggerControlTypeImage);
    gv_LibapxPlayer[p].fakewireframeLayers[layer-1] = image;
    //Path
    DialogControlSetPropertyAsString(image, c_triggerControlPropertyImage, PlayerGroupSingle(p), path);
    //Saturation and color
    //Wait(1,c_timeReal);
    if(saturation == 1) {
        DialogControlSetPropertyAsColor(image, c_triggerControlPropertyColor, PlayerGroupSingle(p), Color(r, g, b));
    }
    else {
        DialogControlSetPropertyAsBool(image, c_triggerControlPropertyDesaturated, PlayerGroupSingle(p), true);
        DialogControlSetPropertyAsColor(image, c_triggerControlPropertyDesaturationColor, PlayerGroupSingle(p), Color(r, g, b));
    }
    //Render Priority
    DialogControlSetPropertyAsInt(image, c_triggerControlPropertyRenderPriority, PlayerGroupSingle(p), renderPriority);
    //Offset
    DialogControlSetPosition(image, PlayerGroupSingle(p), c_anchorTopLeft, offsetX, offsetY);
    
    //Width
    DialogControlSetSize(image, PlayerGroupSingle(p), width, height);

    //Rotation
    DialogControlSetPropertyAsInt(image, c_triggerControlPropertyRotation, PlayerGroupSingle(p), rotation);
    //Alpha
    DialogControlSetPropertyAsInt(image, c_triggerControlPropertyAlpha, PlayerGroupSingle(p), alpha);
    
}

static void LibapxDecalInformationUpdated(int p) {
    int selected = DialogControlGetSelectedItem(UiDecalList, p);
    string decals = LibapxWireframesGetAll(p);
    string decal = StringWord(decals, selected);
    int layer = DialogControlGetSelectedItem(DecalLayerList, p);
    string params = BankValueGetAsString(gv_LibapxPlayer[p].bankStorage, "WF_"+decal, IntToString(layer));
    int i;
    string val;
    string settings;
    
    for (i = 0; i < DecalPropCount; i += 1) {
        if(LibapxUiDecalProps[i].type == PropTypeText) {
            val = libNtve_gf_DialogItemEditValue(LibapxUiDecalProps[i].dialog, p);
            settings += " " + val; 
        }
        if(LibapxUiDecalProps[i].type == PropTypeToggle) {
            if(libNtve_gf_DialogItemIsChecked(LibapxUiDecalProps[i].dialog,p) == true) {
                val = "1";
            }
            else {
                val = "0";
            }
            settings += " " + val;
        }
    }
    settings = LibapxStringTrim(settings);
    if(layer != 0) {
        //Create Bank Entry
        LibapxWireframeLayerUpdate(decal, layer, p, settings);
        
        //Remove Previously rendered layers
        for (i = 0; i < gv_LibapxPlayer[p].fakewireframeLayerCount; i += 1) {
            DialogControlDestroy(gv_LibapxPlayer[p].fakewireframeLayers[i]);
        }
        gv_LibapxPlayer[p].fakewireframeLayerCount = 0;
        //Render Layers
        i = 1;
        while(BankKeyExists(gv_LibapxPlayer[p].bankStorage, "WF_"+decal, "WFL_"+IntToString(i))) {
            params = BankValueGetAsString(gv_LibapxPlayer[p].bankStorage, "WF_"+decal, "WFL_"+IntToString(i));
            renderFakewireframeLayer(p, i+1, 
                StringWord(params, 1),
                StringToInt(StringWord(params, 2)),
                StringToInt(StringWord(params, 3)),
                StringToInt(StringWord(params, 4)),
                StringToInt(StringWord(params, 5)),
                StringToInt(StringWord(params, 6)),
                StringToInt(StringWord(params, 7)),
                StringToInt(StringWord(params, 8)),
                StringToInt(StringWord(params, 9)),
                StringToInt(StringWord(params, 10)),
                StringToInt(StringWord(params, 11)),
                StringToInt(StringWord(params, 12)) 
            );
            i+=1; 
        };
        gv_LibapxPlayer[p].fakewireframeLayerCount =i+1;
    }

}


bool LibapxDecalDecallistSelect(bool testConds,bool runActions) {
    int p = EventPlayer();
    int selected = DialogControlGetSelectedItem(UiDecalList, p);
    string decals = LibapxWireframesGetAll(p);
    string decal = StringWord(decals, selected);
    libNtve_gf_SetDialogItemEditorValue(UiDecalName, decal, PlayerGroupSingle(p));
    
    PopulateLayers(p, decal);
    return true;
}
bool UiDecalRemoveClicked(bool testConds,bool runActions) {
    int p = EventPlayer();
    int selected = DialogControlGetSelectedItem(UiDecalList, p);
    string decals = LibapxWireframesGetAll(p);
    string decal = StringWord(decals, selected);
    LibapxWireframeRemove(p, decal);
    libNtve_gf_SetDialogItemEditorValue(UiDecalName, "", PlayerGroupSingle(p));
    LibapxPopulateWireframesUi(p);
    PopulateLayers(p, decal);
    return true;
}


bool DecalLayerRemoveClicked(bool testConds,bool runActions) {
    int p = EventPlayer();
    int selected = DialogControlGetSelectedItem(DecalLayerList, p);
    int layer = selected;
    int selected2 = DialogControlGetSelectedItem(UiDecalList, p);
    string decals = LibapxWireframesGetAll(p);
    string decal = StringWord(decals, selected2);
    int layerCount = LibapxWireframeGetLayercount(p, decal);
    if(layer != 0) {
        if(layerCount > 1) {
            LibapxWireframeLayerRemove(decal, IntToString(layer), p);
            PopulateLayers(p, decal);
        }
        else {
            LibapxWireframeRemove(p, decal);
            libNtve_gf_SetDialogItemEditorValue(UiDecalName, "", PlayerGroupSingle(p));
            LibapxPopulateWireframesUi(p);
            PopulateLayers(p, decal);
        }
    }
    else {
        return true;
    }
    return true;
}

bool LayerAddClicked(bool testConds,bool runActions) {
    int p = EventPlayer();
    int selected = DialogControlGetSelectedItem(UiDecalList, p);
    string decals = LibapxWireframesGetAll(p);
    string decal = StringWord(decals, selected);
    LibapxWireframeLayerAdd(decal, p, 
        gv_DefaultWireframe.path + " " +       
        IntToString(gv_DefaultWireframe.r)+ " " +
        IntToString(gv_DefaultWireframe.g)+ " " +
        IntToString(gv_DefaultWireframe.b)+ " " +
        IntToString(BoolToInt(gv_DefaultWireframe.saturation))+ " " +
        IntToString(gv_DefaultWireframe.renderPriority)+ " " +
        IntToString(gv_DefaultWireframe.OffsetX)+ " " +
        IntToString(gv_DefaultWireframe.OffsetY)+ " " +
        IntToString(gv_DefaultWireframe.width)+ " " +
        IntToString(gv_DefaultWireframe.height)+ " " +
        IntToString(gv_DefaultWireframe.rotation)+ " " +
        IntToString(gv_DefaultWireframe.alpha)
    );
    PopulateLayers(p, decal);
    return true;
}

bool UiDecalAddClicked(bool testConds,bool runActions) {
    int p = EventPlayer();
    string decal = StringWord(libNtve_gf_DialogItemEditValue(UiDecalName, p),1);
    if(decal != "") {

        LibapxWireframeBankLayerSet(p, decal, true, 1,
            gv_DefaultWireframe.path,
            gv_DefaultWireframe.r,
            gv_DefaultWireframe.g,
            gv_DefaultWireframe.b,
            gv_DefaultWireframe.saturation,
            gv_DefaultWireframe.renderPriority,
            gv_DefaultWireframe.OffsetX,
            gv_DefaultWireframe.OffsetY,
            gv_DefaultWireframe.width,
            gv_DefaultWireframe.height,
            gv_DefaultWireframe.rotation,
            gv_DefaultWireframe.alpha
        );
        LibapxPopulateWireframesUi(p);
    }

    return true;
}

static void PopulateLayers(int p, string decal) {
    int layerCount = LibapxWireframeGetLayercount(p, decal);
    int i;
    DialogControlRemoveAllItems(DecalLayerList, PlayerGroupSingle(p));
    if(decal != "") {
        for (i = 0; i < layerCount; i += 1) {
            DialogControlAddItem(DecalLayerList, PlayerGroupSingle(p),StringToText("Layer "+IntToString(i+1)));
        }
    }
    

};  

bool LibapxDecalTrigTyped(bool testConds,bool runActions) {
    LibapxDecalInformationUpdated(EventPlayer());
    
    return true;
}
bool LibapxDecalTrigChecked(bool testConds,bool runActions) {
    LibapxDecalInformationUpdated(EventPlayer());
    
    return true;
}