//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

//Dealing with aliases101, copied from aliases ;)
static string AliasInsertInList(string list, string alias) {
	string curr = StringWord(list, 1);
	int i = 1;
	int index = 1; // index in string

	while( curr != "" ) {
		// insert before (if the string value less than curr) by replacing
		// space separating strings in the alias list with the inserted alias
		if( StringCompare(alias, curr, c_stringNoCase) <= 0 ) {
			return StringReplace(list, " " + alias + " ", index, index);
		}
		index = index + StringLength(curr) + 1; // +1 to account for space
		i += 1;
		curr = StringWord(list, i);
	}
	// else, append to end
	return StringReplace(list, " " + alias + " ", index, index);
}

//Dialog for aliases
int LibapxUiAliases;
int LibapxUiAliasesExit;
static string[gv_LibapxMaxPlayers]  searchQuery;

//Dialog Control Items
static int LibapxUiAliasesListKey;
static int LibapxUiAliasesListOutput;
static int LibapxUiAliasesSearch;
static int LibapxUiAliasesSearchBtn;
static int LibapxUiAliasesSearchReset;

static int LibapxUiAliasesKey;
static int LibapxUiAliasesKeyBtn;
static int LibapxUiAliasesKeyBtnRemove;
static int LibapxUiAliasesVal;





void LibapxUiAliasesInit() {


  //Main Dialog init
  LibapxUiAliases = LibapxCreateDialog(650, 700, c_anchorTopLeft, gv_LibapxUiPanelSpacing, 0);
  LibapxUiAliasesExit = LibapxCreateDialogCloseBtn(LibapxUiAliases, 650, 700, c_anchorTopLeft, gv_LibapxUiPanelSpacing, 0);

  //Title for page
  LibapxCreateDialogTitle(LibapxUiAliases , 300, 40, 00, 40, "Alias Editor", gv_LibapxUiHeader1,  180);
  //Title For List
	LibapxCreateDialogLabel(LibapxUiAliases, 250, 40, c_anchorTop, -200, 84, "Alias List", gv_LibapxUiHeader2);
  //SearchTitle
	LibapxCreateDialogLabel(LibapxUiAliases, 250, 40, c_anchorTop, -200, 517, "Search", gv_LibapxUiHeader2);
  //Key Title
	LibapxCreateDialogLabel(LibapxUiAliases, 250, 40, c_anchorTop, -200, 565, "Key Value", gv_LibapxUiHeader2);
  //keyvalue
  LibapxUiAliasesKey = LibapxCreateDialogEditbox(LibapxUiAliases, 270, 50, c_anchorTopLeft, 215, 560);
  LibapxUiAliasesKeyBtn = LibapxCreateDialogBtn(LibapxUiAliases, 50, 50, c_anchorTopLeft, 515, 560, "Set Alias", "" );
  LibapxUiAliasesKeyBtnRemove = LibapxCreateDialogBtn(LibapxUiAliases, 50, 50, c_anchorTopLeft, 565, 560, "Remove Alias", "" );
	LibapxCreateDialogBtnIcon(LibapxUiAliases, LibapxUiAliasesKeyBtn, 40, 40, gv_LibapxUiIconGo);
	LibapxCreateDialogBtnIcon(LibapxUiAliases, LibapxUiAliasesKeyBtnRemove, 40, 40, gv_LibapxUiIconX);
  //value
  LibapxUiAliasesVal = LibapxCreateDialogEditbox(LibapxUiAliases, 580, 50, c_anchorTopLeft, 25, 610);

  //search
  LibapxUiAliasesSearch = LibapxCreateDialogEditbox(LibapxUiAliases, 270, 50, c_anchorTopLeft, 215, 510);
  LibapxUiAliasesSearchReset = LibapxCreateDialogBtn(LibapxUiAliases, 50, 50, c_anchorTopLeft, 565, 510, "Reset List", "" );
  LibapxUiAliasesSearchBtn = LibapxCreateDialogBtn(LibapxUiAliases, 50, 50, c_anchorTopLeft, 515, 510, "Search Bank", "" );

	LibapxCreateDialogBtnIcon(LibapxUiAliases, LibapxUiAliasesSearchBtn, 40, 40, gv_LibapxUiIconSearch);
	LibapxCreateDialogBtnIcon(LibapxUiAliases, LibapxUiAliasesSearchReset, 40, 40, gv_LibapxUiIconReset);


  //alias List Dialog(keyvalue)
  LibapxUiAliasesListKey = LibapxCreateDialogList(LibapxUiAliases, 230, 400, c_anchorTopLeft, 25, 112);

  //alias Output Dialog(pair)
  LibapxUiAliasesListOutput = LibapxCreateDialogList(LibapxUiAliases, 340, 400, c_anchorTopRight, 25, 112);

  //Triggers for search
	TriggerAddEventDialogControl(TriggerCreate("LibapxUiAliasesFilter"), c_playerAny, LibapxUiAliasesSearchBtn, c_triggerControlEventTypeClick);
  TriggerAddEventDialogControl(TriggerCreate("LibapxUiAliasesListReset"), c_playerAny, LibapxUiAliasesSearchReset, c_triggerControlEventTypeClick);
  //Trigger for selection
  TriggerAddEventDialogControl(TriggerCreate("LibapxUiAliasSelect"), c_playerAny, LibapxUiAliasesListKey, c_triggerControlEventTypeSelectionChanged);
  //Trigger for setting alias
  TriggerAddEventDialogControl(TriggerCreate("LibapxUiAliasSet"), c_playerAny, LibapxUiAliasesKeyBtn, c_triggerControlEventTypeClick);
  //Trigger for removing alias
  TriggerAddEventDialogControl(TriggerCreate("LibapxUiAliasRemove"), c_playerAny, LibapxUiAliasesKeyBtnRemove, c_triggerControlEventTypeClick);


}
static void UiAliasesListPopulate(int player) {
    int count = 1;	// counter
  	text msg;
    string alias;
    alias = LibapxStringTrim(gv_LibapxPlayer[player].aliases);
    searchQuery[player] = "";
    DialogControlRemoveAllItems(LibapxUiAliasesListKey, PlayerGroupSingle(player));
    while(StringWord(alias,count) != "")
    {
      msg = StringToText(StringWord(alias, count));
      DialogControlAddItem(LibapxUiAliasesListKey, PlayerGroupSingle(player), msg);
      //Search Query Addition
      searchQuery[player]+=StringWord(alias,count) + " ";

      count = count + 1;
    }
}


void LibapxUiAliasesInitPlayer(int p) {
  UiAliasesListPopulate(p);
}

void LibapxUiAliasesOpenPlayer(int p) {
  UiAliasesListPopulate(p);
}

bool LibapxUiAliasesFilter(bool testConds, bool runActions) {
  int player = EventPlayer();
	string filter = libNtve_gf_DialogItemEditValue(LibapxUiAliasesSearch, player);
	int i = 1;
  int j = 0;
  string alias;
  text msg;
  //Reset list
  UiAliasesListPopulate(player);
  //Nab alias list
  alias = LibapxStringTrim(gv_LibapxPlayer[player].aliases);

 if( filter == "" ) {
   return true;
  }

  searchQuery[player]="";
  while(StringWord(alias,i) != "") {

    if(!StringContains(  StringWord(alias, i), filter, c_stringAnywhere, c_stringNoCase)) {
      DialogControlRemoveItem(LibapxUiAliasesListKey, PlayerGroupSingle(EventPlayer()), i - j);
      j+=1;
    }
    else {
      //Search Query Addition
      searchQuery[player]+=StringWord(alias,i) + " ";
    }
    i+=1;
  }



	return true;
}

bool LibapxUiAliasesListReset(bool testConds, bool runActions) {
	UiAliasesListPopulate(EventPlayer());
	return true;
}

//Event Trigger for when alias is selected :)
bool LibapxUiAliasSelect(bool testConds, bool runActions) {
  int player = EventPlayer();
  string aliases = LibapxStringTrim(gv_LibapxPlayer[player].aliases);
  string aliasval;
	string currentVal;
  string aliaskey;
	int charPerLine = 35;
	int j = 1;
	int i;


	i = DialogControlGetSelectedItem(LibapxUiAliasesListKey, player);
  aliasval = BankValueGetAsString(gv_LibapxPlayer[player].bankStorage, gv_LibapxBankSectionAlias, StringWord(searchQuery[player], i));
  aliaskey = StringWord(searchQuery[player], i);
  DialogControlRemoveAllItems(LibapxUiAliasesListOutput, PlayerGroupSingle(player));

	while ( StringSub(aliasval, j, j+charPerLine) != "" ) {
		currentVal = StringSub(aliasval, j, j + charPerLine - 1);
  	DialogControlAddItem(LibapxUiAliasesListOutput, PlayerGroupSingle(player), StringToText(currentVal));
		j = j + charPerLine;
	}




  libNtve_gf_SetDialogItemEditorValue(LibapxUiAliasesKey, aliaskey,  PlayerGroupSingle(player));
  libNtve_gf_SetDialogItemEditorValue(LibapxUiAliasesVal, aliasval,  PlayerGroupSingle(player));



  return true;
}

//Event Trigger for when set alias occurs :)
bool LibapxUiAliasSet(bool testConds, bool runActions) {
  int player = EventPlayer();
  string aliases = LibapxStringTrim(gv_LibapxPlayer[player].aliases);
  string aliasval;
  string aliaskey;
  bool samekey = true;
  int i = 1;
  aliasval = libNtve_gf_DialogItemEditValue(LibapxUiAliasesVal, player);
  aliaskey = libNtve_gf_DialogItemEditValue(LibapxUiAliasesKey, player);
  if ( aliasval == "" ) {
    LibapxPrintSuccess(player, "Alias value cannon't be empty");
    return true;
  }
  if ( aliaskey == "" ) {
    LibapxPrintSuccess(player, "Alias key cannon't be empty");
    return true;
  }
  while (StringWord(aliases, i) != "") {
    if (StringWord(aliases, i)==aliaskey) {
      samekey=false;
    }
    i += 1;
  }
  if (StringWord(aliaskey, 2) == "") {
    if (samekey == true) {
      LibapxPrintSuccess(player, "Alias key not found, creating new alias under \"" + aliaskey  + "\".");
      LibapxBankCreate(gv_LibapxBankSectionAlias, aliaskey, aliasval, player);
      gv_LibapxPlayer[player].aliases = AliasInsertInList(gv_LibapxPlayer[player].aliases, aliaskey);
      LibapxAliasChk(aliaskey, player);
    }
    else {
      LibapxPrintSuccess(player, "Writing over alias \"" + aliaskey  + "\" with new content.");
      LibapxBankRemove(gv_LibapxBankSectionAlias, aliaskey, player);
      gv_LibapxPlayer[player].aliases = StringReplaceWord(gv_LibapxPlayer[player].aliases, " " + aliaskey + " ", " ", 1, c_stringCase);
      LibapxBankCreate(gv_LibapxBankSectionAlias, aliaskey, aliasval, player);
      gv_LibapxPlayer[player].aliases = AliasInsertInList(gv_LibapxPlayer[player].aliases, aliaskey);
      LibapxAliasChk(aliaskey, player);
    }
  }
  else {
    LibapxPrintError(player, "You're being dumb, keys can't have spaces.");
  }
  UiAliasesListPopulate(player);

  return true;
}
//Event Trigger for when remove alias occurs :)
bool LibapxUiAliasRemove(bool testConds, bool runActions) {
  int player = EventPlayer();
  string aliases = LibapxStringTrim(gv_LibapxPlayer[player].aliases);
  string aliaskey;
  bool samekey = true;
  int i = 1;
  aliaskey = libNtve_gf_DialogItemEditValue(LibapxUiAliasesKey, player);
  while (StringWord(aliases, i) != "") {
    if (StringWord(aliases, i)==aliaskey) {
      samekey=false;
    }
    i += 1;
  }
  if (samekey == true) {
    LibapxPrintError(player, "Unable to remove, no alias found.");
  }
  else {
    LibapxPrintSuccess(player, "Removing alias \"" + aliaskey  + "\".");
    LibapxBankRemove(gv_LibapxBankSectionAlias, aliaskey, player);
    gv_LibapxPlayer[player].aliases = StringReplaceWord(gv_LibapxPlayer[player].aliases, " " + aliaskey + " ", " ", 1, c_stringCase);
  }
  UiAliasesListPopulate(player);
  return true;
}
