//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

//fuk keepin that writin here sOME oTHER iNDIAN d O iT
//Dialog for commands guide
int LibapxUiCommands;
int LibapxUiCommandsExit;

//Dialog Items
static int UiCommandsCategory;
static int UiCommandsCommands;
static int UiCommandsOutput;

void LibapxUiCommandsInit() {
  //Main Dialog init
  LibapxUiCommands = LibapxCreateDialog(670, 750, c_anchorTopLeft, gv_LibapxUiPanelSpacing, 0);
  LibapxUiCommandsExit = LibapxCreateDialogCloseBtn(LibapxUiCommands, 670, 750, c_anchorTopLeft, gv_LibapxUiPanelSpacing, 0);

  //Title
  LibapxCreateDialogTitle(LibapxUiCommands , 300, 40, 00, 40, "Commands Guide", gv_LibapxUiHeader1, 200);
  LibapxCreateDialogLabel(LibapxUiCommands , 300, 40, c_anchorTop, -160, 84, "Categories", gv_LibapxUiHeader1);
  LibapxCreateDialogLabel(LibapxUiCommands , 300, 40, c_anchorTop,  155, 84, "Commands", gv_LibapxUiHeader1);

  //lists
  UiCommandsCategory = LibapxCreateDialogList(LibapxUiCommands, 280, 300, c_anchorTop, -155, 124);
  UiCommandsCommands = LibapxCreateDialogList(LibapxUiCommands, 280, 300, c_anchorTop, 155, 124);
  UiCommandsOutput = LibapxCreateDialogList(LibapxUiCommands, 590, 200, c_anchorTop, 0, 454);

  //Trigger for category selection
  TriggerAddEventDialogControl(TriggerCreate("LibapxUiCategorySelect"), c_playerAny, UiCommandsCategory, c_triggerControlEventTypeSelectionChanged);
  //Trigger for command selection
  TriggerAddEventDialogControl(TriggerCreate("LibapxUiCommandsSelect"), c_playerAny, UiCommandsCommands , c_triggerControlEventTypeSelectionChanged);



}
void LibapxUiCommandsInitPlayer(int player) {
  //Stringword not working on string?
  int i = 0;
  while(LibapxCommandsGuideGetEntryType(i) != "") {
    DialogControlAddItem(UiCommandsCategory, PlayerGroupSingle(player), StringToText(LibapxCommandsGuideGetEntryType(i)));
    i+=1;
  }
}
bool LibapxUiCategorySelect(bool testConds, bool runActions) {
  int player = EventPlayer();
  int desiredType;
  int i = 0;
  DialogControlRemoveAllItems(UiCommandsCommands, PlayerGroupSingle(player));
  desiredType=DialogControlGetSelectedItem(UiCommandsCategory, player)-1;
  while(gv_CommandsGuideEntries[i].name != "") {
    if(gv_CommandsGuideEntries[i].type == desiredType) {
      DialogControlAddItem(UiCommandsCommands, PlayerGroupSingle(player), StringToText(gv_CommandsGuideEntries[i].name));
    }
    i+=1;
  }
  return true;
}
bool LibapxUiCommandsSelect(bool testConds, bool runActions) {
  int player = EventPlayer();
  int desiredType = 1;
  int desiredCommand = 1;
  int commandIndex;
  int i;
  int currentCommand = 0;
  DialogControlRemoveAllItems(UiCommandsOutput, PlayerGroupSingle(player));
  desiredType=DialogControlGetSelectedItem(UiCommandsCategory, player)-1;
  desiredCommand=DialogControlGetSelectedItem(UiCommandsCommands, player)-1;
  
  i = 0;
  //Source
  while(gv_CommandsGuideEntries[i].name != "") {
    if(gv_CommandsGuideEntries[i].type == desiredType) {

      if(currentCommand == desiredCommand) {
        commandGuideFormatDescription(UiCommandsOutput, PlayerGroupSingle(player),gv_CommandsGuideEntries[i].description);
        return true;
      }
      currentCommand += 1;
    }
    i+=1;
  }
  return true;
}
