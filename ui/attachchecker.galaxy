//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

//Base panel
int LibapxUiAttachchk;
int LibapxUiAttachchkExit;

static int UiAttachCheckList;
static int ButtonCount;
static int PointCount = 16;
static int[16] PointDialogs;
static string Points = "All Origin Center Damage Engine Hardpoint Head Hit Overhead Left Right Target Turret TurretY TurretZ Weapon";
void LibapxUiAttachchkInit() {
    int i;

    //Main Dialog init
    LibapxUiAttachchk = LibapxCreateDialog(650, 700, c_anchorTopLeft, gv_LibapxUiPanelSpacing, 00);
    LibapxUiAttachchkExit = LibapxCreateDialogCloseBtn(LibapxUiAttachchk, 650, 700, c_anchorTopLeft, gv_LibapxUiPanelSpacing, 0);

    //Title
    LibapxCreateDialogTitle(LibapxUiAttachchk, 300, 40, 00, 40, "Attach Checker", gv_LibapxUiHeader1, 200);

    //Titles
    LibapxCreateDialogLabel(LibapxUiAttachchk , 300, 40, c_anchorTop, -160, 84, "Attach Points", gv_LibapxUiHeader1);
    LibapxCreateDialogLabel(LibapxUiAttachchk , 300, 40, c_anchorTop,  155, 84, "Displayed Points", gv_LibapxUiHeader1);
  

    //Generate Buttons
    i = 1;
    while(StringWord(Points, i) != "") {
        PointDialogs[i-1] = LibapxCreateDialogBtn(LibapxUiAttachchk, 30, 30, c_anchorTopLeft, 50, 100 + (30*i), StringWord(Points, i), "" );
        LibapxCreateDialogBtnIcon(LibapxUiAttachchk, PointDialogs[i-1], 20, 20, gv_LibapxUiIconX);
        LibapxCreateDialogLabel(LibapxUiAttachchk, 100, 60, c_anchorTopLeft, 80, 102 + (30*i), StringWord(Points, i), gv_LibapxUiHeader4);
        TriggerAddEventDialogControl(TriggerCreate("LibapxUiClickPoints" + StringWord(Points, i)), c_playerAny, PointDialogs[i-1], c_triggerControlEventTypeClick);

        i+= 1;
    }

    //Points list
    UiAttachCheckList = LibapxCreateDialogList(LibapxUiAttachchk, 330, (30*i)-30, c_anchorTopRight, 50, 130);

  //Trigger for command selection
  TriggerAddEventDialogControl(TriggerCreate("LibapxUiAttachpointSelect"), c_playerAny, UiAttachCheckList, c_triggerControlEventTypeSelectionChanged);

}

void LibapxUiAttachchkInitPlayer(int player) {

}


//Presets
static string DefaultAttachPoint = "HelpThisshit";


static void RemoveAttachpoints(int p) {
    unit u;
    unitgroup ug = UnitGroupSelected(p);
    ug = UnitGroupFilterPlayer(ug, p, -1);
    u = UnitGroupUnit(ug,1);
    ActorSendTo(libNtve_gf_MainActorofUnit(u), DefaultAttachPoint, "AliasRemove " + DefaultAttachPoint);
    
    ActorSendTo(libNtve_gf_MainActorofUnit(u), "attachmentsforchk", "SetScale 0.0005 .1 ");
    Wait(.1, c_timeGame);
    ActorSendTo(libNtve_gf_MainActorofUnit(u), "attachmentsforchk", "Destroy ");

};

static void SetTargetAttachCheck(int p) {
    unit u;
    unitgroup ug = UnitGroupSelected(p);
    ug = UnitGroupFilterPlayer(ug, p, -1);
    u = UnitGroupUnit(ug,1);
    ActorSendTo(libNtve_gf_MainActorofUnit(u), "::Main", "AliasAdd " + DefaultAttachPoint);
}

static void ApplyAttachpoints(int p,string attachment, int idx, string tc) {
    unit u;
    unitgroup ug = UnitGroupSelected(p);
    ug = UnitGroupFilterPlayer(ug, p, -1);
    u = UnitGroupUnit(ug,1);

    
    LibapxPrint(PlayerGroupAll(), attachment);

    ActorSendTo(libNtve_gf_MainActorofUnit(u), DefaultAttachPoint, " AttachModelOffset Beacon_Nova {} {"+attachment + "}");
    ActorSendTo(libNtve_gf_MainActorofUnit(u), "::Main", "ModelSwap EditorHelper");
    ActorSendTo(libNtve_gf_MainActorofUnit(u), "::Main", "SetTeamColor {"+tc+"} {"+tc+"}");
    ActorSendTo(libNtve_gf_MainActorofUnit(u), "::Main", "AliasAdd " + IntToString(idx) + "Alias");
    ActorSendTo(libNtve_gf_MainActorofUnit(u), "::Main", "AliasAdd " + "attachmentsforchk");
    ActorSendTo(libNtve_gf_MainActorofUnit(u), "::Main", "SetScale 0.0005 ");
    ActorSendTo(libNtve_gf_MainActorofUnit(u), "::Main", "SetScale 1,1,1.5 "+FixedToString(RandomFixed(.35,.45),2)+" ");
    ActorSendTo(libNtve_gf_MainActorofUnit(u), "::Main", "SetTintColor {255,255,255 1} ");
};

static void HighlightAttachpoint(int p, string attachment, int idx) {
    unit u;
    unitgroup ug = UnitGroupSelected(p);
    string target = IntToString(idx) + "Alias";
    ug = UnitGroupFilterPlayer(ug, p, -1);
    u = UnitGroupUnit(ug,1);
    ActorSendTo(libNtve_gf_MainActorofUnit(u), "attachmentsforchk", "SetScale 1,1,1.5 "+FixedToString(RandomFixed(.35,.45),2)+" ");
    ActorSendTo(libNtve_gf_MainActorofUnit(u), target, "SetScale 1.5,1.5,3 .4 ");

};
static string[16][45] ListedPoints;

static void ResetListedPoints(int p) {
    int i;
    for (i = 0; i < 45; i += 1) {
        ListedPoints[p][i] = "";
    }
}
static void UiClickPointsPopulate(int p, string attachment) {
    int list = UiAttachCheckList;
    int i;
    string displayindex;
    unitgroup ug = UnitGroupSelected(p);
    unit u = UnitGroupUnit(ug,1);
    bool apply =  true;
    string tc;
    GameSetSeed(3213);


    ResetListedPoints(p);

    if(UnitGroupCount(ug,c_unitCountAlive) == 0) {
        LibapxPrintOutput(p, "Select a unit to apply attachments");
        apply = false;
    }
    
    DialogControlRemoveAllItems(list, PlayerGroupSingle(p));

    if(apply) {
        RemoveAttachpoints(p);
        SetTargetAttachCheck(p);
    }
    if(attachment != "All") {
        for (i = 0; i < 45; i += 1) {
            if(i < 10) {
                displayindex = "_0" + IntToString(i);
            }
            else {
                displayindex = "_" + IntToString(i);
            }
            LibapxPrint(PlayerGroupAll(), displayindex);
            tc = IntToString(RandomInt(0,255))+","+IntToString(RandomInt(0,255))+","+IntToString(RandomInt(0,255));
           DialogControlAddItem(list, PlayerGroupSingle(p), StringToText( "<c val =\""+tc+"\"> "+attachment + displayindex+ "</c>"));
           ListedPoints[p][i] = attachment + displayindex;
            if(apply) {
                ApplyAttachpoints(p,attachment + " " + StringReplace(displayindex, "",StringFind(displayindex, "_",c_stringNoCase),StringFind(displayindex, "_",c_stringNoCase)),i,tc);
            }
        }
    }
    else {
        i = 2; //as one is "all", we start at 2
        while(StringWord(Points, i) != "") {
            tc = IntToString(RandomInt(0,255))+","+IntToString(RandomInt(0,255))+","+IntToString(RandomInt(0,255));
            DialogControlAddItem(list, PlayerGroupSingle(p), StringToText("<c val =\""+tc+"\">"+StringWord(Points, i)+ "</c>"));
            ApplyAttachpoints(p, StringWord(Points, i),i-2,tc);
            ListedPoints[p][i-2] = attachment + displayindex;
            i+= 1;
        }
    }
}

bool LibapxUiAttachpointSelect(bool testConds, bool runActions) {
    int p = EventPlayer();
    int selected = DialogControlGetSelectedItem(UiAttachCheckList, p);
    string attachpoint = ListedPoints[p][selected];
    int i;
    HighlightAttachpoint(p, attachpoint, selected-1);

    return true;
}

bool LibapxUiClickPointsAll(bool testConds, bool runActions) {
    UiClickPointsPopulate(EventPlayer(), "All");
    return true;
}

bool LibapxUiClickPointsCenter(bool testConds, bool runActions) {
    UiClickPointsPopulate(EventPlayer(), "Center");
    return true;
}

bool LibapxUiClickPointsEngine(bool testConds, bool runActions) {
    UiClickPointsPopulate(EventPlayer(), "Engine");
    return true;
}

bool LibapxUiClickPointsHardpoint(bool testConds, bool runActions) {
    UiClickPointsPopulate(EventPlayer(), "Hardpoint");
    return true;
}

bool LibapxUiClickPointsHead(bool testConds, bool runActions) {
    UiClickPointsPopulate(EventPlayer(), "Head");
    return true;
}

bool LibapxUiClickPointsHit(bool testConds, bool runActions) {
    UiClickPointsPopulate(EventPlayer(), "Hit");
    return true;
}

bool LibapxUiClickPointsOverhead(bool testConds, bool runActions) {
    UiClickPointsPopulate(EventPlayer(), "Overhead");
    return true;
}

bool LibapxUiClickPointsLeft(bool testConds, bool runActions) {
    UiClickPointsPopulate(EventPlayer(), "Left");
    return true;
}

bool LibapxUiClickPointsRight(bool testConds, bool runActions) {
    UiClickPointsPopulate(EventPlayer(), "Right");
    return true;
}

bool LibapxUiClickPointsTarget(bool testConds, bool runActions) {
    UiClickPointsPopulate(EventPlayer(), "Target");
    return true;
}

bool LibapxUiClickPointsTurret(bool testConds, bool runActions) {
    UiClickPointsPopulate(EventPlayer(), "Turret");
    return true;
}

bool LibapxUiClickPointsTurretY(bool testConds, bool runActions) {
    UiClickPointsPopulate(EventPlayer(), "TurretY");
    return true;
}

bool LibapxUiClickPointsTurretZ(bool testConds, bool runActions) {
    UiClickPointsPopulate(EventPlayer(), "TurretZ");
    return true;
}

bool LibapxUiClickPointsWeapon(bool testConds, bool runActions) {
    UiClickPointsPopulate(EventPlayer(), "Weapon");
    return true;
}

bool LibapxUiClickPointsDamage(bool testConds, bool runActions) {
    UiClickPointsPopulate(EventPlayer(), "Damage");
    return true;
}

bool LibapxUiClickPointsOrigin(bool testConds, bool runActions) {
    UiClickPointsPopulate(EventPlayer(), "Origin");
    return true;
}
