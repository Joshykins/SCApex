//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================


static const string DatatableChatlogFilter = "uiChatlogFilter ";

// indent used for chatlog msg that are part of a previous msg
static const string UiChatlogIndent = "";

// number of players on the filter list
static int gv_LibapxChatLogNplayers = 0;

// player message author filter for chatlog messages
// filter checkboxes correspond to filter array index-1
static int[gv_LibapxMaxPlayers] UiChatlogFilterList;

// actual flags for whether a player's messages in chatlog are to be filtered
// format for array is [Player][Flag], where flag is the player int of the
// target player for filtering.
// False (default) - not filtered
// True - filtered (msg does not appear in chat log)
static bool[gv_LibapxMaxPlayers][gv_LibapxMaxPlayers] gv_LibapxChatLogFilter;

// dialog for the chat log
int LibapxUiChatlog;
int LibapxUiChatlogExit;

// dialog controls for the chat log
int LibapxUiChatlogList;
static int LibapxUiChatlogFilterLast = 0; // last player check in filter list

// LibapxUiChatlogInit
// ==================
// Creates the chat log ui panel
void LibapxUiChatlogInit() {
	int i;
	LibapxUiChatlog = LibapxCreateDialog(840, 710, c_anchorTopLeft, gv_LibapxUiPanelSpacing, 0);
    LibapxUiChatlogExit = LibapxCreateDialogCloseBtn(LibapxUiChatlog, 840, 710, c_anchorTopLeft, gv_LibapxUiPanelSpacing, 0);

	LibapxCreateDialogTitle(LibapxUiChatlog , 300, 40, 00, 40, "Chat Log", gv_LibapxUiHeader1, 160);
	// create the list used for chatlog messages as list items
	LibapxUiChatlogList = LibapxCreateDialogList(LibapxUiChatlog, 600, 580, c_anchorTopLeft, 20, 85);

	// create "Players:" label for player filter list
	LibapxCreateDialogLabel(LibapxUiChatlog, 120, 40, c_anchorTopRight, 90, 85, "Players", gv_LibapxUiHeader3);

	for( i = 0; i < gv_LibapxNumberOfLoggedMessages; i += 1 ) {
		TriggerAddEventGeneric(TriggerCreate("LibapxUiChatlogUpdate"), gv_LibapxEventChatLog + IntToString(i));
	}
}

// LibapxUiChatlogInit
// ===================
// adds a player's name to the list of players to filter in the
void LibapxUiChatlogInitPlayer(int player) {
	int checkbox = LibapxCreateDialogCheckbox(LibapxUiChatlog, 30, 30, c_anchorTopRight, 175, 120);
	int playername = LibapxCreateDialogLabelText(LibapxUiChatlog, 200, 20, c_anchorTopRight, 14, 12, gv_LibapxPlayerNameColored(player), gv_LibapxUiHeader5);
	DialogControlSetPositionRelative(playername, PlayerGroupAll(), c_anchorLeft, checkbox, c_anchorRight, 0, 0);

	// if a previous checkbox has been created, anchor new checkbox to previous
	if( LibapxUiChatlogFilterLast != 0 ) {
		DialogControlSetPositionRelative(checkbox, PlayerGroupAll(), c_anchorTop, LibapxUiChatlogFilterLast, c_anchorBottom, 0, 0);
	}

	// set the checkbox default marked (no players filtered)
	libNtve_gf_SetDialogItemChecked(checkbox, true, PlayerGroupAll());

	// set the player for this checkbox
	DataTableSetInt(true, DatatableChatlogFilter + IntToString(checkbox), player);
	//UiChatlogFilterList[gv_LibapxChatLogNplayers] = player;
	gv_LibapxChatLogNplayers += 1;

	// add trigger event for toggling player filter
	TriggerAddEventDialogControl(TriggerCreate("LibapxUiChatlogFilterToggle"), c_playerAny, checkbox, c_triggerControlEventTypeChecked);

	// set the global var for the last created checkbox
	LibapxUiChatlogFilterLast = checkbox;
}

// UiChatlogPopulate
// =======================
// Removes all entries and populates the player chatlog ui list from
// the Apex chatlog
static void UiChatlogPopulate(int player) {
	int nmsgs;	// number of messages to read
	int count;	// counter
	int i;		// chatlog read index
	text msg;

	// remove all existing messages
	DialogControlRemoveAllItems(LibapxUiChatlogList, PlayerGroupSingle(player));

	// chatlog read index
	if( gv_gv_LibapxChatLogCycled ) {
		i = (gv_LibapxChatLogCounter + 1) % gv_LibapxNumberOfLoggedMessages;
		nmsgs = gv_LibapxNumberOfLoggedMessages;
	} else { // hasnt cycled, nmsgs < MAXNMSGS
		i = 0;
		nmsgs = gv_LibapxChatLogCounter;
	}

	// populate chat log with messages from non-filtered players
	for( count = 0; count < nmsgs; count += 1 ) {
		if( !gv_LibapxChatLogFilter[player][gv_LibapxChatLog[i].author] ) {
			if( gv_LibapxChatLog[i].isPartOfPrev ) {
				msg = StringToText(UiChatlogIndent) + gv_LibapxChatLog[i].msg;
			} else {
				msg = gv_LibapxChatLog[i].timestamp + gv_LibapxChatLog[i].msg;
			}
			DialogControlAddItem(LibapxUiChatlogList, PlayerGroupSingle(player), msg);
		}

		i = (i + 1) % gv_LibapxNumberOfLoggedMessages;
	}

}

// LibapxUiChatlogFilterToggle
// ==================
// Event trigger for when player toggle a player for the chatlog filter:
// Must update player's filter list, then repopulate chatlog based on
// new filter.
bool LibapxUiChatlogFilterToggle(bool testConds, bool runActions) {
	int checkbox = EventDialogControl();
	int player = EventPlayer();
	int filtered = 	DataTableGetInt(true, DatatableChatlogFilter + IntToString(checkbox));
	gv_LibapxChatLogFilter[player][filtered] = !libNtve_gf_DialogItemIsChecked(checkbox, player);

	// update chat log based on filter
	UiChatlogPopulate(player);

	return true;
}

// LibapxUiChatlogUpdate
// ==================
// Responds to a gv_LibapxEventChatLog updated chatlog event, where event
// is in format "[CHATLOGEVENT] [# index to update]":
// Adds just the newest added entry to each players' chatlog
bool LibapxUiChatlogUpdate(bool testConds, bool runActions) {
	int i = StringToInt(StringWord(EventGenericName(), 2));
	int player;
	text msg;
	bool[gv_LibapxMaxPlayers] chatlogFilter;

	if( gv_LibapxChatLog[i].isPartOfPrev ) {
		msg = StringToText(UiChatlogIndent) + gv_LibapxChatLog[i].msg;
	} else {
		msg = gv_LibapxChatLog[i].timestamp + gv_LibapxChatLog[i].msg;
	}

	// add new message to all active players' chatlogs
	for( player = 1; player < gv_LibapxMaxPlayers; player += 1 ) {
		if( PlayerType(player) == c_playerTypeUser && PlayerStatus(player) == c_playerStatusActive ) {
			if( !gv_LibapxChatLogFilter[player][gv_LibapxChatLog[i].author] ) {
				DialogControlAddItem(LibapxUiChatlogList, PlayerGroupSingle(player), msg);
			}
		}
	}

	return true;
}
