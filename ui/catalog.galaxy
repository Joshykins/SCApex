//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

//Base panel
int LibapxUiCatalog;
int LibapxUiCatalogExit;

static int MaxDisplayAmount = 1000;
static int UiCatalogType;
static int UiCatalogFields;
static int UiCAtalogFilterEditbox;
static int UiCatalogFilterBtn;
static int[16] UiCAtalogApplyCheckbox;
static bool[16] ApplyField;
static string[16] CurrentCatagory;
static string[16][1000] AllQueries;

static string Types = "Ability Actor Behavior Effect Footprint Light Model Decal Turret Unit Upgrade Validator Weapon Sound Soundtrack";

void LibapxUiCatalogInit() {


    //Main Dialog init
    LibapxUiCatalog = LibapxCreateDialog(650, 700, c_anchorTopLeft, gv_LibapxUiPanelSpacing, 0);
    LibapxUiCatalogExit = LibapxCreateDialogCloseBtn(LibapxUiCatalog, 650, 700, c_anchorTopLeft, gv_LibapxUiPanelSpacing, 0);

    //Title for page
    LibapxCreateDialogTitle(LibapxUiCatalog , 300, 40, 00, 40, "Data Catalog", gv_LibapxUiHeader1,  180);

    //Mini titles
    LibapxCreateDialogLabel(LibapxUiCatalog , 300, 40, c_anchorTop, -160, 84, "Categories", gv_LibapxUiHeader1);
    LibapxCreateDialogLabel(LibapxUiCatalog , 300, 40, c_anchorTop,  155, 84, "Values", gv_LibapxUiHeader1);

    //lists
    UiCatalogType = LibapxCreateDialogList(LibapxUiCatalog, 280, 300, c_anchorTop, -155, 124);
    UiCatalogFields = LibapxCreateDialogList(LibapxUiCatalog, 280, 300, c_anchorTop, 155, 124);

    //Trigger for category selection
    TriggerAddEventDialogControl(TriggerCreate("LibapxUiCategorySelectType"), c_playerAny, UiCatalogType, c_triggerControlEventTypeSelectionChanged);
    
    //trigger for field selection
    TriggerAddEventDialogControl(TriggerCreate("LibapxUiCategorySelectField"), c_playerAny, UiCatalogFields, c_triggerControlEventTypeSelectionChanged);
        

    //Filter box
    UiCAtalogFilterEditbox = LibapxCreateDialogEditbox(LibapxUiCatalog, 370, 50, c_anchorTopLeft, 190, 450);
    //Filter Button
    UiCatalogFilterBtn = LibapxCreateDialogBtn(LibapxUiCatalog, 50, 50, c_anchorTopLeft, 565, 450, "Search", "" );
    LibapxCreateDialogBtnIcon(LibapxUiCatalog, UiCatalogFilterBtn, 50, 50, gv_LibapxUiIconSearch);
    //Trigger for filter
    TriggerAddEventDialogControl(TriggerCreate("LibapxUiCategoryFilter"), c_playerAny, UiCatalogFilterBtn , c_triggerControlEventTypeClick);

    
    //Labeling Filter Btn
    LibapxCreateDialogLabel(LibapxUiCatalog, 100, 50, c_anchorTopLeft,60, 450, "Search", gv_LibapxUiHeader1);

    //Creating Apply Checkbox
    LibapxCreateDialogLabel(LibapxUiCatalog, 550, 300, c_anchorTop, 30, 450, " Check this box to apply the value's respective command. For instance a model will modelswap your current selected unit.", gv_LibapxUiHeader1);

}

void LibapxUiCatalogInitPlayer(int player) { 
    //Populate with types
    int i;
    for (i = 1; StringWord(Types, i) != ""; i += 1) {
        DialogControlAddItem(UiCatalogType, PlayerGroupSingle(player), StringToText(StringWord(Types, i)));
    }
    CurrentCatagory[player] = "Model";
    ApplyField[player] = false;

    //Creating checkbox
    UiCAtalogApplyCheckbox[player] = LibapxCreateDialogCheckbox(LibapxUiCatalog, 30, 30 ,c_anchorTopLeft, 50, 550);
	TriggerAddEventDialogControl(TriggerCreate("LibapxUiCategoryApply"), c_playerAny, UiCAtalogApplyCheckbox[player], c_triggerControlEventTypeChecked);

}
static int FindCatalog(string type) {
    int catalog;
    type = StringCase(type, false);

	if(type == "ability" || type == "abilities") {
		catalog = c_gameCatalogAbil;
	}
	else if(type == "actor" || type == "actors") {
		catalog = c_gameCatalogActor;
	}
	else if(type == "behavior" || type == "behaviors") {
		catalog = c_gameCatalogBehavior;
	}
	else if(type == "effect" || type == "effects") {
		catalog = c_gameCatalogEffect;
	}
	else if(type == "footprint" || type == "footprints") {
		catalog = c_gameCatalogFootprint;
	}
	else if(type == "light" || type == "lights") {
		catalog = c_gameCatalogLight;
	}
	else if(type == "model" || type == "models") {
		catalog = c_gameCatalogModel;
	}
	else if(type == "decal" || type == "decals") {
		catalog = c_gameCatalogTexture;
	}
	else if(type == "turret" || type == "turrets") {
		catalog = c_gameCatalogTurret;
	}
	else if(type == "unit" || type == "units") {
		catalog = c_gameCatalogUnit;
	}
	else if(type == "upgrade" || type == "upgrades") {
		catalog = c_gameCatalogUpgrade;
	}
	else if(type == "validator" || type == "validators") {
		catalog = c_gameCatalogValidator;
	}
	else if(type == "weapon" || type == "weapons") {
		catalog = c_gameCatalogWeapon;
	}
	else if(type == "sound" || type == "sounds") {
		catalog = c_gameCatalogSound;
	}
	else if(type == "soundtrack" || type == "soundtracks") {
		catalog = c_gameCatalogSoundtrack;
    }
    return catalog;
}

static void PopulateFields(string catalogstr,int p) {
    int catalog = FindCatalog(catalogstr);
    string filter = libNtve_gf_DialogItemEditValue(UiCAtalogFilterEditbox, p);
    int entryCount;
    string entry;
    int i;
    int position;
    int j;
    bool passesFilters;
    string currentFilter;

    //Populate
    DialogControlRemoveAllItems(UiCatalogFields, PlayerGroupSingle(p));
    entryCount = CatalogEntryCount(catalog);
    position = 0;
    for (i = 1; (i <= entryCount) || (position >= MaxDisplayAmount); i += 1) {
        entry = CatalogEntryGet(catalog, i);
        if(filter != "") {
            j = 1;
            while (StringWord(filter, j) != "" ) {
                currentFilter = StringWord(filter, j);
                passesFilters = true;
    
                if(StringContains(entry, currentFilter, c_stringAnywhere, c_stringNoCase) || currentFilter == "") {
    
                } else {
                    passesFilters = false;
                    break;
                }

                j += 1;
            }
            if(passesFilters) {
                AllQueries[p][position] = entry;
                position +=1;
                DialogControlAddItem(UiCatalogFields, PlayerGroupSingle(p),StringToText(entry));
            }
        }
        else {
            AllQueries[p][position] = entry;
            position +=1;
            //Poplate with everything
            DialogControlAddItem(UiCatalogFields, PlayerGroupSingle(p),StringToText(entry));
        }
    }
    
}

bool LibapxUiCategoryFilter(bool testConds, bool runActions) {
    int p = EventPlayer();
    int desiredCatagory=DialogControlGetSelectedItem(UiCatalogType, p);
    string catalog= StringWord(Types, desiredCatagory);
    if(catalog == "") {
        LibapxPrintOutput(p, "Something went wrong! Tell sero about it!");
        return true;
    }

    PopulateFields(catalog, p);


    return true;
}

bool LibapxUiCategorySelectType(bool testConds, bool runActions) {
    int p = EventPlayer();
    int desiredCatagory=DialogControlGetSelectedItem(UiCatalogType, p);
    string catalog= StringWord(Types, desiredCatagory);
    if(catalog == "") {
        LibapxPrintOutput(p, "Something went wrong! Tell sero about it!");
        return true;
    }

    PopulateFields(catalog, p);

    return true;
}
bool LibapxUiCategoryApply(bool testConds, bool runActions) {
    int p =  EventPlayer();
    int dialog = EventDialogControl();
    bool state = libNtve_gf_DialogItemIsChecked(dialog, p);
    ApplyField[p] = state;

    return true;
}
bool LibapxUiCategorySelectField(bool testConds, bool runActions) {
    int p = EventPlayer();
    int desiredCatagory=DialogControlGetSelectedItem(UiCatalogType, p);
    string catalog= StringWord(Types, desiredCatagory);
    int selectedIndex=DialogControlGetSelectedItem(UiCatalogFields, p);
    string selected = AllQueries[p][selectedIndex-1];
    unitgroup ug = UnitGroupSelected(p);
    ug = UnitGroupFilterPlayer(ug, p, -1);
    if(ApplyField[p]) {
        if(catalog == "Model") {
            LibapxChatParse("@modelswap "+selected, p, ug, gv_LibapxPlayer[p].spawningCount);
        }
        if(catalog == "Light") {
            LibapxChatParse("!light "+selected + " .2", p, ug, gv_LibapxPlayer[p].spawningCount);
        }
        if(catalog == "Decal") {
            LibapxChatParse("@decal "+selected, p, ug, gv_LibapxPlayer[p].spawningCount);
        }
    }

    return true;
}