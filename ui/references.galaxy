//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

//Dialog for ui references
int gv_LibapxUiReferences;
int gv_LibapxUiReferencesExit;

struct ReferenceStruct {
    int btn;
    string title;
    string trigIdentifier;
};

//Reference count
static const int ReferenceCount = 6;
static ReferenceStruct[ReferenceCount] References;
static const int MainHeight = 850;
static const int DisplayMax = 200;
static int[16][DisplayMax] DisplayedReferences; 
static int[16] CurrentDisplayed;

void LibapxUiReferencesInit() {
    int i;
    string title;
    int btn;
    i = 0;
    References[i].title = "Getting Started";
    References[i].trigIdentifier = "GettingStarted";
    i += 1;
    References[i].title = "Chat Guide";
    References[i].trigIdentifier = "ChatGuide";
    i += 1;
    References[i].title = "Modeling Guide";
    References[i].trigIdentifier = "ModelingGuide";
    i += 1;
    References[i].title = "Gamesetup Guide";
    References[i].trigIdentifier = "GamesetupGuide";
    i += 1;
    References[i].title = "XML Guide";
    References[i].trigIdentifier = "XmlGuide";
    i += 1;
    References[i].title = "Actrmsg Reference";
    References[i].trigIdentifier = "ActrmsgReference";
    //Main Dialog Init
    gv_LibapxUiReferences = LibapxCreateDialog(950, MainHeight, c_anchorTop, 0, 90);
    gv_LibapxUiReferencesExit = LibapxCreateDialogCloseBtn(gv_LibapxUiReferences, 950, MainHeight, c_anchorTop, 0, 90);

    //Title
    LibapxCreateDialogTitle(gv_LibapxUiReferences , 300, 40, 00, 40, "Apex References", gv_LibapxUiHeader1, 200);

    //Refernces
    for (i = 0; i < ReferenceCount; i += 1) {
        title = References[i].title;
        References[i].btn  = LibapxCreateDialogBtnInvis(gv_LibapxUiReferences, 180, 35, c_anchorTopLeft, 55, (35*i)+100, "",title);
        btn = References[i].btn;
        libNtve_gf_SetDialogItemStyle(btn, gv_LibapxUiHeader4, PlayerGroupAll());
        TriggerAddEventDialogControl(TriggerCreate("LibapxUiReferences" + References[i].trigIdentifier), c_playerAny, btn, c_triggerControlEventTypeClick);
    }
    //Make Bar
    btn = LibapxCreateDialogBtnInvis(gv_LibapxUiReferences, 2, MainHeight-200, c_anchorTopLeft, 235, 100, "", "");
    LibapxCreateDialogBtnIcon(gv_LibapxUiReferences, btn, 2, MainHeight-200, "Asset\\Textures\\flare_aiurcompletenebula01_dirtlylensflare_whitebox.dds");
    
}
static void GetStartedPreSelect(int p, int targetIndex);

void LibapxUiReferencesInitPlayer(int p) {

    GetStartedPreSelect(p, 0); //0 is getting started
    //Do nothing, but there for consistancy
}
//Clears all labels displayed for given player
static void ClearReference(int p) {
    int i;
    for (i = 0; i < CurrentDisplayed[p]; i += 1) {
        DialogDestroy(DisplayedReferences[p][i]);
        DialogControlDestroy(DisplayedReferences[p][i]);
    }
};
static void ShowForPlayer(int p, int dialog) {
    int i;
    int tmpPlayer;
    for (i = 1; i <= PlayerGroupCount(PlayerGroupActive()); i += 1) {
        tmpPlayer = PlayerGroupPlayer(PlayerGroupActive(), i);
        if(tmpPlayer != p) {
            
            DialogControlSetVisible(dialog, PlayerGroupSingle(tmpPlayer), false);
        } 
    }
}

static void GetStartedPreSelect(int p, int targetIndex) {  
    int i;


    ClearReference(p);
    CurrentDisplayed[p] = 0;
    i = 0;
    //Create References

    //Main Title
    DisplayedReferences[p][i] = LibapxCreateDialogLabel(
        gv_LibapxUiReferences,   //btn (const)
        950-240,                //Width 
        30,                     //Height
        c_anchorTopLeft,        //Anchor (const)
        240,                    //x-off
        120,                    //y-off
        //Content
        References[targetIndex].title,
        gv_LibapxUiHeader1);     //style
    ShowForPlayer(p, DisplayedReferences[p][i]);
    i += 1;

    //Desc
    DisplayedReferences[p][i] = LibapxCreateDialogLabel(
        gv_LibapxUiReferences,   //btn (const)
        950-260-20,                //Width-offsetleft-offsetright
        MainHeight-150,                     //Height
        c_anchorTopLeft,        //Anchor (const)
        260,                    //x-off
        150,                    //y-off
        //Content
        "<s>    Hello and welcome, presumably you're new to playing Apex and I give you a huge thanks for giving my engine a try. In this guide we'll start by going over how to get started with working in the engine, roleplaying, and a few other basic things every new player should learn. \n\n  First off I would like to say this is a text-based engine, most commands and functionality are handled through typing out the command and syntax of that command. For instance if you wanted to spawn a unit you would do <c val=\"a29bfe\"> @spawn [unitName] [unitAmount] </c>. \n \n    To get setup to roleplay there are a few basic commands you need to know, the first is <c val=\"a29bfe\">@rename [name]</c>. It renames a unit you have selected to your desired name. You can then emote through this unit with <c val=\"a29bfe\">@say [text]</c>. Additionally you can set a description for your unit with <c val=\"a29bfe\">@desc</c>, this description will display in the description tab on the right. If you would like your display name to differ from what name is written in @say you can use <c val=\"a29bfe\">@setname [name]</c>.\n\n    If you wish to do more than simply just roleplay, I highly suggest you check out the other guides, they are all very useful to new players and experienced players alike.\n\n  I also suggest you look through all the commands and and their uses. You can find all the commands and their uses in the commands guide. The guide is located on the lefthand side of the screen. \n \n  If you're looking for more of a dnd-like experience a critical command for that endeavour is is <c val=\"a29bfe\">Roll </c> ",
        gv_LibapxUiHeader4);     //style
    ShowForPlayer(p, DisplayedReferences[p][i]);
    i += 1;
    CurrentDisplayed[p] = i;


}


bool LibapxUiReferencesGettingStarted(bool testConds, bool runActions) {
    int p = EventPlayer();    
    int btn = EventDialogControl();
    int targetIndex;
    int i;
    //Find Target Index
    for (i = 0; i < ReferenceCount; i += 1) {
        if(References[i].btn == btn) {
            targetIndex = i;
            break;
        }
    }
    ClearReference(p);
    CurrentDisplayed[p] = 0;
    i = 0;
    //Create References

    //Main Title
    DisplayedReferences[p][i] = LibapxCreateDialogLabel(
        gv_LibapxUiReferences,   //btn (const)
        950-240,                //Width 
        30,                     //Height
        c_anchorTopLeft,        //Anchor (const)
        240,                    //x-off
        120,                    //y-off
        //Content
        References[targetIndex].title,
        gv_LibapxUiHeader1);     //style
    ShowForPlayer(p, DisplayedReferences[p][i]);
    i += 1;

    //Desc
    DisplayedReferences[p][i] = LibapxCreateDialogLabel(
        gv_LibapxUiReferences,   //btn (const)
        950-260-20,                //Width-offsetleft-offsetright
        MainHeight-150,                     //Height
        c_anchorTopLeft,        //Anchor (const)
        260,                    //x-off
        150,                    //y-off
        //Content
        "<s>    Hello and welcome, presumably you're new to playing Apex and I give you a huge thanks for giving my engine a try. In this guide we'll start by going over how to get started with working in the engine, roleplaying, and a few other basic things every new playershould learn. \n\n  First off I would like to say this is a text-based engine, most commands and functionality are handled through typing out the command and syntax of that command. For instance if you wanted to spawn a unit you would do <c val=\"a29bfe\"> @spawn [unitName] [unitAmount] </c>. \n \n    To get setup to roleplay there are a few basic commands you need to know, the first is <c val=\"a29bfe\">@renameall [name]</c>. It renames a unit you have selected to your desired name. You can then emote through this unit with <c val=\"a29bfe\">@say [text]</c>. Additionally you can set a description for your unit with <c val=\"a29bfe\">@subtitle</c>, this description will display under the units name, and can be fully viewed by hovering over the unit's wireframe on the bottom of the ui. If you would like your display name to differ from what name is written in @say you can use <c val=\"a29bfe\">@setname [name]</c>.\n\n    If you wish to do more than simply just roleplay, I highly suggest you check out the other guides, they are all very useful to new players and experienced players alike.\n\n  I also suggest you look through all the commands and and their uses. You can find all the commands and their uses in the commands guide. The guide is located on the lefthand side of the screen. \n \n  If you're looking for more of a dnd-like experience a critical command for that endeavour is is <c val=\"a29bfe\">Roll </c> ",
        gv_LibapxUiHeader4);     //style
    ShowForPlayer(p, DisplayedReferences[p][i]); 
    i+=1;
    CurrentDisplayed[p] = i;
    return true;
}

bool LibapxUiReferencesChatGuide(bool testConds, bool runActions) {
    int p = EventPlayer();    
    int btn = EventDialogControl();
    int targetIndex;
    int i;
    //Find Target Index
    for (i = 0; i < ReferenceCount; i += 1) {
        if(References[i].btn == btn) {
            targetIndex = i;
            break;
        }
    }
    ClearReference(p);
    CurrentDisplayed[p] = 0;
    i = 0;
    //Create References

    //Main Title
    DisplayedReferences[p][i] = LibapxCreateDialogLabel(
        gv_LibapxUiReferences,   //btn (const)
        950-240,                //Width 
        30,                     //Height
        c_anchorTopLeft,        //Anchor (const)
        240,                    //x-off
        120,                    //y-off
        //Content
        References[targetIndex].title,
        gv_LibapxUiHeader1);     //style
    ShowForPlayer(p, DisplayedReferences[p][i]); 
    i+=1;

    //Desc
    DisplayedReferences[p][i] = LibapxCreateDialogLabel(
        gv_LibapxUiReferences,   //btn (const)
        950-260-20,                //Width-offsetleft-offsetright
        MainHeight-150,                     //Height
        c_anchorTopLeft,        //Anchor (const)
        260,                    //x-off
        150,                    //y-off
        //Content
        "<s>    The chat in Apex roleplay is heavily modified from any typical chat you may be used to. In this guide we will be going over key features of the guide and how to type out what you want to happen.\n \n    One of the absolute must-have key features of the chat is the semi-colen. The semi-colen allows you to break apart statements and commands, this means the commands will run one after another in sequence. It\'s very useful for grouping together commands to create units or really anything else. Saying <c val=\"a29bfe\">Hello;Testing!</c> will tell the engine that you wish to say \'Hello\' then \'Testing\' as such the chat displayed will look like \n [OOC] <Clan> PlayerName: Hello \n [OOC] <Clan> PlayerName: Testing \n    If you do not wish to have the semi colen break apart your statements you can place a slash before it like <c val=\"a29bfe\">\\;</c>. In this case it will just display the semi colen.\n\n    Another thing you can also do is <c val=\"a29bfe\"><<</c> before any message, this will tell the engine to print out exactly what was said after that, regardless of what it is. ",
        gv_LibapxUiHeader4);     //style
    ShowForPlayer(p, DisplayedReferences[p][i]); 
    i+=1;
    CurrentDisplayed[p] = i;
    return true;
}

bool LibapxUiReferencesModelingGuide(bool testConds, bool runActions) {
    int p = EventPlayer();    
    int btn = EventDialogControl();
    int targetIndex;
    int i;
    //Find Target Index
    for (i = 0; i < ReferenceCount; i += 1) {
        if(References[i].btn == btn) {
            targetIndex = i;
            break;
        }
    }
    ClearReference(p);
    CurrentDisplayed[p] = 0;
    i = 0;
    //Create References

    //Main Title
    DisplayedReferences[p][i] = LibapxCreateDialogLabel(
        gv_LibapxUiReferences,   //btn (const)
        950-240,                //Width 
        30,                     //Height
        c_anchorTopLeft,        //Anchor (const)
        240,                    //x-off
        120,                    //y-off
        //Content
        References[targetIndex].title,
        gv_LibapxUiHeader1);     //style
    ShowForPlayer(p, DisplayedReferences[p][i]); 
    i+=1;

    //Desc
    DisplayedReferences[p][i] = LibapxCreateDialogLabel(
        gv_LibapxUiReferences,   //btn (const)
        950-260-20,                //Width-offsetleft-offsetright
        MainHeight-150,                     //Height
        c_anchorTopLeft,        //Anchor (const)
        260,                    //x-off
        150,                    //y-off
        //Content
        "   <s>\'Modeling\' as it\'s called in Apex is the idea of creating new creations from the assets we have access to. For instance you could make a star-ship out of a wall model if you were persistent enough. It\'s a typically complex thing to do but in this guide i\'ll break down the basics of it so you can get started.\n\n   Making \'new\' models requires the use of a few commands,<c val=\"a29bfe\">@attach</c> the other is <c val=\"a29bfe\">@rotation</c>, and <c val=\"a29bfe\">@target</c>. I strongly recommend you look at the commands guide right now under the actor category to get a better understanding of these commands. In addition to that, figuring out what attachpoints on a model can be used is useful too. For that, use the <c val=\"a29bfe\">Attachpoint Checker</c> ui.\n\n    Combing these commands will allow you to position an actor anywhere on a unit you want to position it. For example if you did \n <c val=\"a29bfe\">@spawn marine;@target base;@attach ->base BeaconNova head 0 .05 -.05;@rotation -ypr -b 60p;@modelswap d8charge;@play birth loop;@scale .8</c> Would create a cyclops marine. \n <img path=\"Apex\\Assets\\Textures\\modeling1.png\" height=\"140\" width=\"140\"/> <c val=\"a29bfe\">\n@attach ->base beaconApex weapon 0 -.05 -.06;@modelswap NeedleSpinesWeapon;@scale 1.2 1.2 .7</c> Would attach a bayonet to the same marine's rifle \n <img path=\"Apex\\Assets\\Textures\\modeling2.png\" height=\"140\" width=\"140\"/> ",
        gv_LibapxUiHeader4);     //style
    ShowForPlayer(p, DisplayedReferences[p][i]); 
    i+=1;
    CurrentDisplayed[p] = i;
    return true;
}

bool LibapxUiReferencesGamesetupGuide(bool testConds, bool runActions) {
    int p = EventPlayer();    
    int btn = EventDialogControl();
    int targetIndex;
    int i;
    //Find Target Index
    for (i = 0; i < ReferenceCount; i += 1) {
        if(References[i].btn == btn) {
            targetIndex = i;
            break;
        }
    }
    ClearReference(p);
    CurrentDisplayed[p] = 0;
    i = 0;
    //Create References

    //Main Title
    DisplayedReferences[p][i] = LibapxCreateDialogLabel(
        gv_LibapxUiReferences,   //btn (const)
        950-240,                //Width 
        30,                     //Height
        c_anchorTopLeft,        //Anchor (const)
        240,                    //x-off
        120,                    //y-off
        //Content
        References[targetIndex].title,
        gv_LibapxUiHeader1);     //style
    ShowForPlayer(p, DisplayedReferences[p][i]); 
    i+=1;

    //Desc
    DisplayedReferences[p][i] = LibapxCreateDialogLabel(
        gv_LibapxUiReferences,   //btn (const)
        950-260-20,                //Width-offsetleft-offsetright
        MainHeight-150,                     //Height
        c_anchorTopLeft,        //Anchor (const)
        260,                    //x-off
        150,                    //y-off
        //Content
        "<s>    Gamesetups are a critical feature of Apex. They allow you to save all your units on the map and be reloaded next time you join a game. The syntax for the command can be found in the commands guide. \n\n    Creating gamesetups can often times be a taxing thing. In this guide i'll be sharing with you some very useful tricks I've found over my time creating Apex. The first trick I like to use is <c val=\"a29bfe\">@spawn+</c> as it allows me to rapidly place props, such as trees. Quickly. For example if I did <c val=\"a29bfe\">@spawn+ BeaconApex;@modelswap HavenTree;@scale 1.5</c> I could easily and quickly create a forest. \n \n    Another very useful tip for creating gamesetups is using <c val=\"a29bfe\">@state ignoreterrainheight on</c>. This command makes your unit ignore the given terrain height and instead uses an absolute height set by <c val=\"a29bfe\">@height</c>. This means all your props with it and the same height will all be displayed at the exact same level. This is also absolutely essential to do if you intend to have custom pathable areas with <c val=\"a29bfe\">@modelswap InvisibleWalkablePlatform4x4</c> \n \n    My final tip for gamesetups is creating an alias that sets a few movement-related keypresses for you. This allows you to easily and quickly position props. For example my alias is <c val=\"a29bfe\">alias create qmv >keypress keyQ [@move];>keypress keyW [@face +22.5];>keypress keyE [@face -22.5]",
        gv_LibapxUiHeader4);     //style
    ShowForPlayer(p, DisplayedReferences[p][i]); 
    i+=1;
    CurrentDisplayed[p] = i;
    return true;
}

bool LibapxUiReferencesXmlGuide(bool testConds, bool runActions) {
    int p = EventPlayer();    
    int btn = EventDialogControl();
    int targetIndex;
    int i;
    //Find Target Index
    for (i = 0; i < ReferenceCount; i += 1) {
        if(References[i].btn == btn) {
            targetIndex = i;
            break;
        }
    }
    ClearReference(p);
    CurrentDisplayed[p] = 0;
    i = 0;
    //Create References

    //Main Title
    DisplayedReferences[p][i] = LibapxCreateDialogLabel(
        gv_LibapxUiReferences,   //btn (const)
        950-240,                //Width 
        30,                     //Height
        c_anchorTopLeft,        //Anchor (const)
        240,                    //x-off
        120,                    //y-off
        //Content
        References[targetIndex].title,
        gv_LibapxUiHeader1);     //style
    ShowForPlayer(p, DisplayedReferences[p][i]); 
    i+=1;

    //Desc
    DisplayedReferences[p][i] = LibapxCreateDialogLabel(
        gv_LibapxUiReferences,   //btn (const)
        950-260-20,             //Width-offsetleft-offsetright
        MainHeight-150,        //Height
        c_anchorTopLeft,        //Anchor (const)
        260,                    //x-off
        150,                    //y-off
        //Content
        "   <s>XML in Apex can be used by any player to stylize the text you write out in the game. There are a few types of XML types \n \n    <c val=\"a29bfe\">&#60;/n&#62;</c> n-val causes the current line to be 'broken' and starts a new line.\n \n    <c val=\"a29bfe\">&#60;c val=\"r,g,b\"&#62;</c> C-val allows you to color your text. For instance you can have red text with <c val=\"a29bfe\">&#60;c val=\"255,0,0\"&#62;</c>. It also accepts hexidecimal values such as <c val=\"a29bfe\">&#60;c val=\"ff0000\"&#62;</c> which would work out to be red. It can also do gradients like so <c val=\"a29bfe\">&#60;c val=\"255,0,0-0,0,255\"&#62;</c>. All these tags need to be closed off after the text you wished to style. To close off a statement type <c val=\"a29bfe\">&#60;/c&#62;</c>. So a full statement would look like <c val=\"a29bfe\">&#60;c val=\"ff0000\"&#62; My Styled Text! &#60;/c&#62;</c> \n \n    <c val=\"a29bfe\">&#60;img val=\"Path\" width=\"width\" height=\"y\" color=\"r,g,b\" /&#62; </c> Img-val allows you to display an image. The path can be found in the edtior under map->maploadingscreen->browse. In there find a path then right click and hit copy. Color is the same values as c val so you can do gradients and hexidecimal values too. Height and Width are self-explainatory. Color, height, and width are all not required to display an image. If none are present then the image will scale to the max height and max width and will have it's default colors. \n \n    <c val=\"a29bfe\">&#60;s val=\"val\"&#62; </c>S-val allows you to set the text's font to the given value. The s-vals can be found in the text editor in the sc2 editor. Just like c-val it must be closed like <c val=\"a29bfe\">&#60;s&#62 My Text&#60;/s&#62;</c>. This example also showcases that if no parameter is fed to  s-val the text will be small. It's very useful for subtitles/descriptions.",
        gv_LibapxUiHeader4);     //style
    ShowForPlayer(p, DisplayedReferences[p][i]); 
    i+=1;
    CurrentDisplayed[p] = i;
    return true;
}

bool LibapxUiReferencesActrmsgReference(bool testConds, bool runActions) {
    int p = EventPlayer();    
    int btn = EventDialogControl();
    int targetIndex;
    int i;
    //Find Target Index
    for (i = 0; i < ReferenceCount; i += 1) {
        if(References[i].btn == btn) {
            targetIndex = i;
            break;
        }
    }
    ClearReference(p);
    CurrentDisplayed[p] = 0;
    i = 0;
    //Create References

    //Main Title
    DisplayedReferences[p][i] = LibapxCreateDialogLabel(
        gv_LibapxUiReferences,   //btn (const)
        950-240,                //Width 
        30,                     //Height
        c_anchorTopLeft,        //Anchor (const)
        240,                    //x-off
        120,                    //y-off
        //Content
        References[targetIndex].title,
        gv_LibapxUiHeader1);     //style
    ShowForPlayer(p, DisplayedReferences[p][i]); 
    i+=1;

    //Desc
    DisplayedReferences[p][i] = LibapxCreateDialogLabel(
        gv_LibapxUiReferences,   //btn (const)
        950-260-20,             //Width-offsetleft-offsetright
        MainHeight-150,        //Height
        c_anchorTopLeft,        //Anchor (const)
        260,                    //x-off
        150,                    //y-off
        //Content
        "    <s>This contains the actrmsgs I consider useful and have aliased at any given time. The command to use these actrmsgs is <c val=\"a29bfe\">@actrmsg</c>. You can find more actrmsgs in the editor if you look under an actor in the data view then in the event tab. The events can call actrmsgs and there you'll find a dropdown containing all the actrmsgs you can possibly use. \n \n<c val=\"a29bfe\">SetScale x,y,z timescale</c> \n<c val=\"a29bfe\">SetScaleAbsolute x,y,z timescale</c> \n<c val=\"a29bfe\">AnimSetPausedAll 0/1</c> \n<c val=\"a29bfe\">SetTeamColor {r,g,b hdr} {r,g,b hdr} Timescale Bounce/Cycle</c> \n<c val=\"a29bfe\">ModelAllowHitTest 0/1 \n<c val=\"a29bfe\">SetCastShadows 0/1</c> \n<c val=\"a29bfe\">SetWalkAnimMoveSpeed x</c> \n<c val=\"a29bfe\">SetTintColor {r,g,b hdr} Timescale Bounce/Cycle</c> \n<c val=\"a29bfe\">TextureGroupApply texture</c> \n",
        gv_LibapxUiHeader4);     //style
    ShowForPlayer(p, DisplayedReferences[p][i]); 
    i+=1;
    CurrentDisplayed[p] = i;
    return true;
}