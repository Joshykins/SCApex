//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

//fuk keepin that writin here sOME oTHER iNDIAN d O iT
//Dialog for colorPicker
int LibapxUiColorPicker;
int LibapxUiColorPickerExit;

struct PlayerColors {
    fixed r;
    fixed g;
    fixed b;
    fixed hdr;
};

//The Color List ;o
static int UiRedBtn;                           //Selector
static int UiBlueBtn;                          //Selector
static int UiGreenBtn;                         //Selector
static int UiHDRBtn;                           //Selector
static int TotalHeightOfColors = 400;                //Size of stuff
static int BaseAdjust = -175;
static int[16] UiRedArrow;                     //hindicators
static int[16] UiBlueArrow;                    //hindicators
static int[16] UiGreenArrow;                   //hindicators
static int[16] UiHDRArrow;
static PlayerColors[16] UiColorSelected;
static int UiColorEditbox;                    //Edit Boxes
static int[16] UiApplyTintCheckbox;
static bool[16] ApplyTint;
void LibapxUiColorPickerInit() {
    int i;
    fixed position;
    color tmpColor;
    fixed increment;
    int j;
    //Main Dialog init
    LibapxUiColorPicker = LibapxCreateDialog(600, 760, c_anchorTopLeft, gv_LibapxUiPanelSpacing, 0);
    LibapxUiColorPickerExit = LibapxCreateDialogCloseBtn(LibapxUiColorPicker, 600, 760, c_anchorTopLeft, gv_LibapxUiPanelSpacing, 0);

    //Title
    LibapxCreateDialogTitle(LibapxUiColorPicker, 300, 40, 00, 40, "Color Picker", gv_LibapxUiHeader1, 170);

    //RGB names
    LibapxCreateDialogLabel(LibapxUiColorPicker, 80, 50, c_anchorTop, BaseAdjust, 90, "Red", gv_LibapxUiHeader1);
    LibapxCreateDialogLabel(LibapxUiColorPicker, 80, 50, c_anchorTop, BaseAdjust+125, 90, "Green", gv_LibapxUiHeader1);
    LibapxCreateDialogLabel(LibapxUiColorPicker, 80, 50, c_anchorTop, BaseAdjust+250, 90, "Blue", gv_LibapxUiHeader1);
    LibapxCreateDialogLabel(LibapxUiColorPicker, 80, 50, c_anchorTop, BaseAdjust+375, 90, "HDR", gv_LibapxUiHeader1);

    UiRedBtn = LibapxCreateDialogBtnInvis(LibapxUiColorPicker, 50, TotalHeightOfColors , c_anchorTop, BaseAdjust, 160, "", "");        
    LibapxCreateDialogBtnIconColored(LibapxUiColorPicker, UiRedBtn, 50, TotalHeightOfColors, "Apex\\Assets\\Textures\\RedRange.png", Color(100,100,100));

    UiGreenBtn = LibapxCreateDialogBtnInvis(LibapxUiColorPicker, 50, TotalHeightOfColors , c_anchorTop, BaseAdjust+125, 160, "", "");        
    LibapxCreateDialogBtnIconColored(LibapxUiColorPicker, UiGreenBtn, 50, TotalHeightOfColors, "Apex\\Assets\\Textures\\GreenRange.png", Color(100,100,100));

    UiBlueBtn = LibapxCreateDialogBtnInvis(LibapxUiColorPicker, 50, TotalHeightOfColors , c_anchorTop, BaseAdjust+250, 160, "", "");        
    LibapxCreateDialogBtnIconColored(LibapxUiColorPicker, UiBlueBtn, 50, TotalHeightOfColors, "Apex\\Assets\\Textures\\BlueRange.png", Color(100,100,100));

    UiHDRBtn = LibapxCreateDialogBtnInvis(LibapxUiColorPicker, 50, TotalHeightOfColors , c_anchorTop, BaseAdjust+375, 160, "", "");        
    LibapxCreateDialogBtnIconColored(LibapxUiColorPicker, UiHDRBtn, 50, TotalHeightOfColors, "Apex\\Assets\\Textures\\HDRRange.png", Color(100,100,100));

    //Edit boxes
    UiColorEditbox = LibapxCreateDialogEditbox(LibapxUiColorPicker, 450, 50, c_anchorTop, 0, 580);
    TriggerAddEventDialogControl(TriggerCreate("LibapxRedSelect"), c_playerAny, UiRedBtn  , c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(TriggerCreate("LibapxBlueSelect"), c_playerAny, UiBlueBtn  , c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(TriggerCreate("LibapxGreenSelect"), c_playerAny, UiGreenBtn  , c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(TriggerCreate("LibapxHdrSelect"), c_playerAny, UiHDRBtn  , c_triggerControlEventTypeClick);


}
void LibapxUiColorPickerInitPlayer(int player) {
    //Create Arrows/bars.
    UiRedArrow[player] = LibapxCreateDialogBtnInvis(LibapxUiColorPicker, 50, 3, c_anchorTop, BaseAdjust, 160,"","");
    LibapxCreateDialogBtnIconColored(LibapxUiColorPicker, UiRedArrow[player], 50, 3, "Apex\\Assets\\Textures\\bar.png", Color(100,100,100));
    
    UiBlueArrow[player] = LibapxCreateDialogBtnInvis(LibapxUiColorPicker, 50, 3, c_anchorTop, BaseAdjust+125, 160,"","");
    LibapxCreateDialogBtnIconColored(LibapxUiColorPicker, UiBlueArrow[player], 50, 3, "Apex\\Assets\\Textures\\bar.png", Color(100,100,100));
    
    UiGreenArrow[player] = LibapxCreateDialogBtnInvis(LibapxUiColorPicker, 50, 3, c_anchorTop, BaseAdjust+250, 160,"","");
    LibapxCreateDialogBtnIconColored(LibapxUiColorPicker, UiGreenArrow[player], 50, 3, "Apex\\Assets\\Textures\\bar.png", Color(100,100,100));
    
    UiHDRArrow[player] = LibapxCreateDialogBtnInvis(LibapxUiColorPicker, 50, 3, c_anchorTop, BaseAdjust+375, 160,"","");
    LibapxCreateDialogBtnIconColored(LibapxUiColorPicker, UiHDRArrow[player], 50, 3, "Apex\\Assets\\Textures\\bar.png", Color(100,100,100));
    
    //Set default hue, saturation, and brightness values
    UiColorSelected[player].r = 255;
    UiColorSelected[player].g = 255;
    UiColorSelected[player].b = 255;
    UiColorSelected[player].hdr = 1;

    libNtve_gf_SetDialogItemEditorValue(UiColorEditbox, "@tint 255 255 255 1 1", PlayerGroupSingle(player));

    //Apply tint checkbox
    UiApplyTintCheckbox[player] =  LibapxCreateDialogCheckbox(LibapxUiColorPicker, 30, 30, c_anchorTop, BaseAdjust-30, 660);
    LibapxCreateDialogLabel(LibapxUiColorPicker, 480, 110, c_anchorTop, BaseAdjust+210, 625, "Check to apply tints to selected unit.", gv_LibapxUiHeader1);

	// add trigger for toggling tinting
	TriggerAddEventDialogControl(TriggerCreate("LibapxUiColorpikckerTinter"), c_playerAny, UiApplyTintCheckbox[player], c_triggerControlEventTypeChecked);

}

static fixed LibapxColorSelect(int dialog, int player);

static void UiColorPickerApplyTint(int p) {
    string msg = "@tint ";
    int spawningcount = gv_LibapxPlayer[p].spawningCount;
    unitgroup ug = UnitGroupSelected(p);
    unit u;
    int i;
    unitgroup applyGroup = UnitGroupEmpty();
    msg += FixedToString(UiColorSelected[p].r,0) + " ";
    msg += FixedToString(UiColorSelected[p].g,0) + " ";
    msg += FixedToString(UiColorSelected[p].b,0) + " ";
    msg += "1" + " ";
    msg += FixedToString(UiColorSelected[p].hdr,0) + " ";
    
    for (i = 1; i <= UnitGroupCount(ug, c_unitCountAll); i += 1) {
        u = UnitGroupUnit(ug, i);
        if(UnitGetOwner(u) == p) {
            UnitGroupAdd(applyGroup, u);
        };
    }

    LibapxChatParse(msg, p, applyGroup, spawningcount);
}

bool LibapxUiColorpikckerTinter(bool testconds, bool runActions) {
    int p =  EventPlayer();
    int dialog = EventDialogControl();
    bool state = libNtve_gf_DialogItemIsChecked(dialog, p);
    ApplyTint[p] = state;

    return true;
}

static void ShowForPlayer(int p, int dialog) {
    int i;
    int tmpPlayer;
    for (i = 1; i <= PlayerGroupCount(PlayerGroupActive()); i += 1) {
        tmpPlayer = PlayerGroupPlayer(PlayerGroupActive(), i);
        if(tmpPlayer != p) {
            DialogSetVisible(dialog, PlayerGroupSingle(tmpPlayer), false);
            DialogControlSetVisible(dialog, PlayerGroupSingle(tmpPlayer), false);
        } 
    }
}

static void changeTintBoxDisplay(int p) {
    string tint = "@tint " + 
    FixedToString(UiColorSelected[p].r, 0)+" "+ //r
    FixedToString(UiColorSelected[p].g, 0)+" "+ //g
    FixedToString(UiColorSelected[p].b, 0)+" "+ //b
    IntToString(1)+" "+
    FixedToString(UiColorSelected[p].hdr, 2);
    libNtve_gf_SetDialogItemEditorValue(UiColorEditbox, tint,PlayerGroupSingle(p));
}

bool LibapxRedSelect(bool testConds, bool runActions) {
    int player = EventPlayer();
    fixed val = LibapxColorSelect(EventDialogControl(),  player);
    //Remake UI
    DialogControlDestroy(UiRedArrow[player]);
    UiRedArrow[player] = LibapxCreateDialogBtnInvis(LibapxUiColorPicker, 50, 3, c_anchorTop, BaseAdjust, 160+FixedToInt(val*TotalHeightOfColors),"","");
    LibapxCreateDialogBtnIconColored(LibapxUiColorPicker, UiRedArrow[player], 50, 3, "Apex\\Assets\\Textures\\bar.png", Color(100,100,100));
    ShowForPlayer(player, UiRedArrow[player]);

    val = -(val-1);
    //Assign value
    UiColorSelected[player].r = val * 255;
    changeTintBoxDisplay(player);

    if(ApplyTint[player]) {
        UiColorPickerApplyTint(player);
    }
    return true;
}
bool LibapxGreenSelect(bool testConds, bool runActions) {
    int player = EventPlayer();
    fixed val = LibapxColorSelect(EventDialogControl(), player);

    //Remake UI
    DialogControlDestroy(UiGreenArrow[player]);
    UiGreenArrow[player] = LibapxCreateDialogBtnInvis(LibapxUiColorPicker, 50, 3, c_anchorTop, BaseAdjust+125, 160+FixedToInt(val*TotalHeightOfColors),"","");
    LibapxCreateDialogBtnIconColored(LibapxUiColorPicker, UiGreenArrow[player], 50, 3, "Apex\\Assets\\Textures\\bar.png", Color(100,100,100));
    ShowForPlayer(player, UiGreenArrow[player]);
    val = -(val-1);
    //Assign value
    UiColorSelected[player].g = val * 255;
    changeTintBoxDisplay(player);
    if(ApplyTint[player]) {
        UiColorPickerApplyTint(player);
    }
    return true;
}
bool LibapxBlueSelect(bool testConds, bool runActions) {
    int player = EventPlayer();
    fixed val = LibapxColorSelect(EventDialogControl(), player);
    //Remake UI
    DialogControlDestroy(UiBlueArrow[player]);
    UiBlueArrow[player] = LibapxCreateDialogBtnInvis(LibapxUiColorPicker, 50, 3, c_anchorTop, BaseAdjust+250, 160+FixedToInt(val*TotalHeightOfColors),"","");
    LibapxCreateDialogBtnIconColored(LibapxUiColorPicker, UiBlueArrow[player], 50, 3, "Apex\\Assets\\Textures\\bar.png", Color(100,100,100));
    ShowForPlayer(player, UiBlueArrow[player]);

    val = -(val-1);
    //Assign value
    UiColorSelected[player].b = val * 255;
    changeTintBoxDisplay(player);
    if(ApplyTint[player]) {
        UiColorPickerApplyTint(player);
    }
    return true; 
}
bool LibapxHdrSelect(bool testConds, bool runActions) {
    int player = EventPlayer();
    fixed val = LibapxColorSelect(EventDialogControl(), player);
    //Remake UI
    DialogControlDestroy(UiHDRArrow[player]);
    UiHDRArrow[player] = LibapxCreateDialogBtnInvis(LibapxUiColorPicker, 50, 3, c_anchorTop, BaseAdjust+375, 160+FixedToInt(val*TotalHeightOfColors),"","");
    LibapxCreateDialogBtnIconColored(LibapxUiColorPicker, UiHDRArrow[player], 50, 3, "Apex\\Assets\\Textures\\bar.png", Color(100,100,100));
    
    val = -(val-1);
    //Assign value
    UiColorSelected[player].hdr = val * 15;
    changeTintBoxDisplay(player);
    if(ApplyTint[player]) {
        UiColorPickerApplyTint(player);
    }
    return true;
}

static fixed LibapxColorSelect(int dialog, int player) {
    //tmp hopefully i automate later because having literally 220 triggers running is a bit dumb.
    int h = DialogControlGetOffsetY(dialog, player);
    fixed value;
    fixed mouse = PointGetY(gv_LibapxPlayer[player].mousePositionUi);
    int offeset = DialogGetOffsetY(LibapxUiColorPicker)+h;
    mouse = mouse - offeset;
    
    value = (TotalHeightOfColors - mouse - 1)/ TotalHeightOfColors;
    value = -(value-1);

    return value;

}