//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2019, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

//Prototypes
void libapx_chk_all_aliases(int player);

// basic game player constants
const int libapx_MAX_PLAYERS = 16; // max players supported is 16 (0 - neutral, 15 - hostile)
const int libapx_PARSER_THREAD_COUNT = 500; // Max thread count for parser
const string libapx_PLAYER_BANK_NAME = "ApexBank";
const int libapx_PLAYER_NEUTRAL = 0;
const int libapx_PLAYER_HOSTILE = 15;
const int libapx_UI_PANEL_NONE = -1;


//DEBUG
//Sets the bank for the wireframe
void libapx_wireframe_bank_layer_set(
    //Not wireframe attr
    int p, string wireframe, bool create, int layer, 
    //Wireframe attrs
    string path, int r, int g, int b, bool saturation, int render_priority, int OffsetX, int OffsetY, int width, int height, int rotation, int alpha
);


// libapx_player_struct
// =======================
// contains all player properties
struct libapx_player_properties {

	// mouse_position
	// =================
	// Location of player mouse
	point mouse_position;		// x,y position in world
	point mouse_position_ui;	// x,y position in the game UI
	point mouse_position_lasttick_ui;

	//Wireframe specifics.
	string wireframe;

	// keys + mouse flags
	// ================
	// flags for whether keys/mouse pressed up/down:
	// false - up
	// true - down
	bool key_shift;
	bool key_ctrl;
	bool key_ctrl_lasttick;
	bool key_alt;
	bool key_tab;

	//new keys
	bool key_0;
	bool key_1;
	bool key_2;
	bool key_3;
	bool key_4;
	bool key_5;
	bool key_6;
	bool key_7;
	bool key_8;
	bool key_9;
	//Done
	bool key_a;
	bool key_b;
	bool key_c;
	bool key_d;
	bool key_e;
	bool key_f;
	bool key_g;
	bool key_h;
	bool key_i;
	bool key_j;
	bool key_k;
	bool key_l;
	bool key_m;
	bool key_n;
	bool key_o;
	bool key_p;
	bool key_q;
	bool key_r;
	bool key_s;
	bool key_t;
	bool key_u;
	bool key_v;
	bool key_w;
	bool key_x;
	bool key_y;
	bool key_z;
	bool key_up;
	bool key_down;
	bool key_left;
	bool key_right;
	bool key_pgUp;
	bool key_pgDown;
	bool key_numPad0;
	bool key_numPad1;
	bool key_numPad2;
	bool key_numPad3;
	bool key_numPad4;
	bool key_numPad5;
	bool key_numPad6;
	bool key_numPad7;
	bool key_numPad8;
	bool key_numPad9;
	bool key_numPadPlus;
	bool key_numPadMinus;
	bool key_numPadMultiply;
	bool key_numPadDivide;
	bool key_numPadDecimal;
	bool key_grave;


	bool mouse_right;


	// chat_msg
	// ================
	// player chat message for parsing
	// when running a command, chat_msg is set to the command being run
	string chat_msg;

	//Spawncounter
	//===============
	//An integer to emulate threads within the parser.
	int spawningCount;

	// done_parsing
	// =================
	// flag to manually interrupt and stop the parser for the player
	// can be used by commands to stop parsing early
	bool done_parsing;

	// permission_level
	// =================
	// Permission level of a player (default - 0, mod - 1, admin - 2)
	int permission_level;

	// permission_allow
	// =================
	// String that contains single game instance of commands,
	// delineated by spaces, of commands player CAN use
	// For a single game instance, these will transfer even if admin changes
	string permissions_allow;

	// permission_block
	// =================
	// String that contains single game instance of commands,
	// delineated by spaces, of commands player CANNOT use
	// For a single game instance, these will transfer even if admin changes
	string permissions_block;

	// general permissions flags
	// ==================
	bool disabled;			// can player use any commands
	bool muted;				// can player chat (only applies to OOC)
	bool alias_blocked;		// can player use aliases system
	bool template_blocked;	// can player use template system


	// is_placing_unit
	// ===============
	// flag for using @spawn mouse-click style
	bool is_placing_unit;

	// spawn_splat
	// ==============
	// hovers under cursor for mouse-click @spawn placement
	unit spawn_splat;
	fixed spawn_splat_x;	// x scaling
	fixed spawn_splat_y;	// y scaling
	fixed spawn_splat_z;	// z scaling

	// spawn instance variables
	// ============
	// these record a player's previous usage of @spawn
	// so players can repeat @spawn without parameters
	// to repeat the last instance
	string spawn_instance_type;		// unit type
	int spawn_instance_count;		// # spawned
	int spawn_instance_player;		// player units spawned for
	region spawn_instance_location;	// location spawned

	// bank_storage
	// ===============
	// player's bank containing things that persist between games
	// (aliases, templates, setups, etc...)
	bank bank_storage;

	// aliases
	// ===============
	// alphebetized list of player's aliases as a cache to avoid
	// resorting player's alias list multiple times
	string aliases;
	// previous behavior
	// ====================
	// The previously selected behvaior
	string prevbehavior;

	//wireframes
	// ====================
	// A list of a players current wireframes.
	string wireframes;
	//Current displayed wireframe layer count and dialogs
	int wireframe_layer_count;
	int[100] wireframe_layers;
	string previous_wireframe;

	//Current displayed wireframe layer count and dialogs
	int fakewireframe_layer_count;
	int[100] fakewireframe_layers;
	string previous_fakewireframe;
	
	// map_revealer
	// ===============
	// map revealer for entire map (revealers player specific)
	revealer map_revealer;

	// search_ variables
	// ==============
	// used to mark player's search catalog, index, and query
	// when using the "\search" command
	int search_catalog;			// current search catalog
	int search_index;			// current search index (> 0)
	string search_last_query;	// current search term

	// waygate_dialog
	// ============
	// dialog and button for using region waygates (teleport)
	int waygate_dialog;
	int waygate_dialog_control_btn;

	// active_ui_panel
	// ============
	// for use with ui module: the current active ui panel dialog, where
	// one panel is allowed to be active at a time.
	// The value here is in terms of the ARRAY list of panels, NOT the
	// dialog integer value itself.
	int active_ui_panel;

	//Scaler for units
	fixed scaler;

	//delay for Attach
	fixed delay;
	
	//Custom props for >super
	string clan_tag;
	string name;

	//Editor mouse wheel trigger;
	trigger editor_mouse_wheel;
	//Editor camera toggle
	bool editor_toggled;
	//Height
	fixed editor_heightoffset;
	//Rotating still,
	bool editor_rotating;

	//Unit for spawner
	unit spawner_unit;
	bool spawner_toggled;

	//This name controler
	bool name_display;
	bool name_leveled_display;

	//Name and subtitle displays when selectingn units
	int unit_display_name;
	int unit_display_subtitle;

	//Description open toggle
	bool description_open;
	string last_rendered_desc;
	string last_rendered_desc_name;

	//Banks loaded(flag is bank has been loaded/is in the process of being loaded)
	bool banksloaded;

	//player color
	bool display_color;
	color custom_color;
	bool rainbow;

	//CAmera stuff
	point camera_position;

	//Help messages
	bool help_messages;
};

// libapx_player_parser_properties
// =======================
// contains parser context
struct libapx_player_parser_properties {
	// context
	// ===============
	// unitgroup target for running commands
	unitgroup context;
};



// libapx_player[libapx_MAX_PLAYERS]
// ====================================
// global array for players with index corresponding to player index
libapx_player_properties[libapx_MAX_PLAYERS] libapx_player;


// libapx_player[libapx_MAX_PLAYERS]
// ====================================
// global array for parser with index corresponding to player index and parsing count
//10 theoretical threads able to run in sequence, I'm going to be a super indian.
libapx_player_parser_properties[libapx_MAX_PLAYERS][libapx_PARSER_THREAD_COUNT] libapx_player_parser;


// libapx_sort_aliases (prototype)
// =======================
// Prototype for sorting player aliases. Actual function definition
// provided by chat/aliases.galaxy.
string libapx_sort_aliases(int player);


//Retrieves the name of all the wireframes.
string libapx_wireframes_get_all(int player);


// libapx_initialize_player
// ==============================
// initialize players (default settings)
void libapx_player_initialize(int player) {
	unit u;
	libapx_player[player].map_revealer = VisRevealerCreate(player, RegionEntireMap());
	libapx_player[player].mouse_position = RegionGetCenter( RegionEntireMap() );
	libapx_player[player].mouse_position_ui = Point(0, 0);
	libapx_player[player].permission_level = 0;
	libapx_player[player].scaler = 1;
	libapx_player[player].spawner_unit = null;
	libapx_player[player].spawner_toggled = false;
	libapx_player[player].editor_toggled = false;
	libapx_player[player].spawn_splat = null;
	libapx_player[player].spawningCount = 1;
	libapx_player[player].delay =  0.08;
	libapx_player[player].waygate_dialog = 0;
	libapx_player[player].clan_tag = "";
	libapx_player[player].name = "";
	libapx_player[player].editor_heightoffset = 0.0;
	libapx_player[player].wireframe = g_default_wireframe;
	libapx_player[player].active_ui_panel = libapx_UI_PANEL_NONE;
	libapx_player[player].banksloaded = false;
	libapx_player[player].display_color = false;
	libapx_player[player].rainbow = false;
	libapx_player[player].help_messages = true;

	CameraPan( player, RegionGetCenter(RegionEntireMap()), 0.0, 10.0, 10.0, false );
}



// libapx_player_name_colored
// ===========================
// returns a text string of player name with color
text libapx_player_name_colored(int player) {
	string clan_tag;
	color player_color;
	if(libapx_player[player].display_color) {
		if(libapx_player[player].rainbow) {
			player_color = Color(RandomInt(0,1)*100, RandomInt(0,1)*100, RandomInt(0,1)*100);
		}
		else {
			player_color = libapx_player[player].custom_color;
		}
	}
	else {
		player_color = ColorFromIndex( PlayerGetColorIndex(player, false), c_teamColorDiffuse);
	}

	if(libapx_player[player].clan_tag == "") {
		clan_tag = " <d Player=\"" + IntToString(player) + "\" GameValue=\"PlayerClanTag\"/> ";
	}
	else {
		clan_tag = "<"+libapx_player[player].clan_tag+"> ";
	}
	return TextWithColor( StringToText( clan_tag ) + PlayerName(player), player_color );
}


// libapx_color_to_player_default
// ==========================
// Returns the default player index for a color string
int libapx_color_to_player_default(string colour) {
	if( colour == "white" ) {
		return 0;
	} else if( colour == "red" ) {
		return 1;
	} else if( colour == "blue") {
		return 2;
	} else if( colour == "teal" ) {
		return 3;
	} else if( colour == "purple" ) {
		return 4;
	} else if( colour == "yellow" ) {
		return 5;
	} else if( colour == "orange" ) {
		return 6;
	} else if( colour == "green" ) {
		return 7;
	} else if( colour == "lightpink" ) {
		return 8;
	} else if( colour == "violet" ) {
		return 9;
	} else if( colour == "lightgrey" ) {
		return 10;
	} else if( colour == "lightgray" ) {
		return 10;
	} else if( colour == "darkgreen" ) {
		return 11;
	} else if( colour == "brown" ) {
		return 12;
	} else if( colour == "lightgreen" ) {
		return 13;
	} else if( colour == "darkgrey" ) {
		return 14;
	} else if( colour == "darkgray" ) {
		return 14;
	} else if( colour == "pink" ) {
		return 15;
	}

	return -1;
}

// libapx_color_to_player
// ===================
// Converts a color from a string to a player's index
// (since Blizzard has no function to get color of a player as a string)
int libapx_color_to_player(string colour, int user) {
	int player = libapx_MAX_PLAYERS - 1;

	// special color keywords
	if( colour == "hostile" ) {
		return libapx_PLAYER_HOSTILE;
	} else if( colour == "neutral" ) {
		return libapx_PLAYER_NEUTRAL;
	} else if( colour == "me" ) {
		return user;
	}

	while( player >= 0) {
		if( PlayerGetColorIndex( player, false ) == libapx_color_to_player_default(colour) && PlayerStatus(player) != c_playerStatusUnused) {
			return player;
		}
		player -= 1;
	}

	return -1;
}

// libapx_color_from_player_default
// =======================
// returns the default color for a player index (ported from Cortex)
// (assumes mapmakers don't mess with default player color index)
string libapx_color_from_player_default(int plr) {
	if( plr == 0 ) {
		return "white";
	} else if( plr == 1 ) {
		return "red";
	} else if( plr == 2 ) {
		return "blue";
	} else if( plr == 3 ) {
		return "teal";
	} else if( plr == 4 ) {
		return "purple";
	} else if( plr == 5 ) {
		return "yellow";
	} else if( plr == 6 ) {
		return "orange";
	} else if( plr == 7 ) {
		return "green";
	} else if( plr == 8 ) {
		return "lightpink";
	} else if( plr == 9 ) {
		return "violet";
	} else if( plr == 10 ) {
		return "lightgrey";
	} else if( plr == 11 ) {
		return "darkgreen";
	} else if( plr == 12 ) {
		return "brown";
	} else if( plr == 13 ) {
		return "lightgreen";
	} else if( plr == 14 ) {
		return "darkgrey";
	} else if( plr == 15 ) {
		return "pink";
	}

	return "";
}

// libapx_color_from_player
// ======================
// Returns the string name of the color a player currently is (Ported from Cortex)
// (since Blizzard PlayerColorName returns as text, which
// cant be used for comparisons or anything useful)
string libapx_color_from_player(int plr) {
	return libapx_color_from_player_default(PlayerGetColorIndex(plr, false));
}

void libapx_chat_parse_increment(int p) {
	if (libapx_player[p].spawningCount < libapx_PARSER_THREAD_COUNT - 1)  {
		libapx_player[p].spawningCount = libapx_player[p].spawningCount + 1;
	}
	else {
		libapx_player[p].spawningCount = 1;
	}
}

void libapx_set_target(int player, unitgroup target, int spawningCount) {
	libapx_player_parser[player][spawningCount].context = target;
}

void libapx_waitDelay(int player) {
	fixed time = libapx_player[player].delay;
	if(time < .0625) {
		return;
	}
	Wait(time, c_timeGame);
}

void libapx_waitDelayGS(int player) {
	fixed time = libapx_player[player].delay;
	fixed compare_time = .2 * g_gamesetups_loading;
	if(time < compare_time) {
		time = compare_time;
	}
	
	Wait(time, c_timeGame);
}
