//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

struct statbarColor {
    fixed red;
    fixed green;
    fixed blue;
};

static statbarColor lifeColor;
static statbarColor shieldsColor;
static statbarColor energyColor;
static fixed[16] modLife;
static fixed[16] modShields;
static fixed[16] modEnergy;
static fixed[16] lasttickLife;
static fixed[16] lasttickShields;
static fixed[16] lasttickEnergy;

void LibapxStatbarsInit() {
    int i;
    int tmpPlayer;
    lifeColor.red = 0;
    lifeColor.green = 60;
    lifeColor.blue = 10;

    shieldsColor.red = 0;
    shieldsColor.green = 50;
    shieldsColor.blue = 105;

    energyColor.red = 75;
    energyColor.green = 0;
    energyColor.blue = 150;
    for (i = 1; i <= PlayerGroupCount(PlayerGroupActive()); i += 1) {
        tmpPlayer = PlayerGroupPlayer(PlayerGroupActive(), i);
        TriggerAddEventDialogControl(TriggerCreate("LibapxUnitWireFrameClicked"), tmpPlayer, gv_LibapxUiWireframeBtn, c_triggerControlEventTypeClick);
    }
}

bool LibapxUnitWireFrameClicked(bool testConds, bool runActions) {
    int p = EventPlayer();
    unitgroup ug = UnitGroupSelected(p);
    unit u;
    point target;
    if(UnitGroupCount(ug, c_unitCountAlive) == 1) {
        u = UnitGroupUnit(ug, 1);
        target = UnitGetPosition(u);
        CameraPan(p, target, .4, 0, 1, false);
    }
    return true;
}

static void setStat(int barnumb, int p, fixed min, fixed max, fixed value, color statcolor) {
    DialogControlSetPropertyAsFixed(gv_LibapxUiStatsBar[barnumb], c_triggerControlPropertyMinValue, PlayerGroupSingle(p), min);
    DialogControlSetPropertyAsFixed(gv_LibapxUiStatsBar[barnumb], c_triggerControlPropertyMaxValue, PlayerGroupSingle(p), max);
    DialogControlSetPropertyAsFixed(gv_LibapxUiStatsBar[barnumb], c_triggerControlPropertyValue, PlayerGroupSingle(p), value);
    DialogControlSetPropertyAsText(gv_LibapxUiStatsLabel[barnumb], c_triggerControlPropertyText, PlayerGroupSingle(p), StringToText(FixedToString(value, 1) + " / " +FixedToString(max, 1)));
    DialogControlSetPropertyAsColor(gv_LibapxUiStatsBar[barnumb], c_triggerControlPropertyColor, PlayerGroupSingle(p), statcolor);
}

static void enableStat(int barnumb, int p, bool state) {
    DialogControlSetPropertyAsBool(gv_LibapxUiStatsBar[barnumb], c_triggerControlPropertyVisible, PlayerGroupSingle(p), state);
    DialogControlSetPropertyAsBool(gv_LibapxUiStatsLabel[barnumb], c_triggerControlPropertyVisible, PlayerGroupSingle(p), state);
    DialogControlSetPropertyAsBool(gv_LibapxUiStatsBarbg[barnumb], c_triggerControlPropertyVisible, PlayerGroupSingle(p), state);
}
static bool hasStat(unit u, int prop) {
    fixed statmax;
    statmax = UnitGetPropertyFixed(u, prop, true);
    if(statmax <= 0) {
        return false;
    }
    return true;
}

static void updateMods(int p, unit u) {
    fixed modifierSub = .1;
    fixed modifierBottomlimit = .8;
    if(modEnergy[p] > modifierBottomlimit) {
        modEnergy[p] -= modifierSub;
    } 
    else {
        modEnergy[p] = modifierBottomlimit;
    }
    if(modShields[p] > modifierBottomlimit) {
        modShields[p] -= modifierSub;
    } 
    else {
        modShields[p] = modifierBottomlimit;
    }
    if(modLife[p] > modifierBottomlimit) {
        modLife[p] -= modifierSub;
    } 
    else {
        modLife[p] = modifierBottomlimit;
    }

    //Sets the color multipliers only if the stat is less than it was last tick.
    if(lasttickShields[p] > UnitGetPropertyFixed(u, c_unitPropShields, true)) {
        modShields[p] = 1.6;
    }
    if(lasttickLife[p] > UnitGetPropertyFixed(u, c_unitPropLife, true)) {
        modLife[p] = 1.6;
    }
    if(lasttickEnergy[p] > UnitGetPropertyFixed(u, c_unitPropEnergy, true)) {
        modEnergy[p] = 1.6;
    }
}

static color getStatcolor(fixed r, fixed g, fixed b, fixed mod) {
    r += 20;
    r *= mod;
    r -= 20;
    g += 20;
    g *= mod;
    g -= 20;
    b += 20;
    b *= mod;
    b -= 20;
    
    return Color(r,g,b);
}
//Generates the stat bars of a unit
static void generateBars(int p, unit u) {
    int numberOfBars = 0;
    bool doneShields;
    bool doneLife;
    bool doneEnergy;
    int i;
    fixed stat;
    fixed statmax;
    fixed statmin;
    color statcolor;

    if(hasStat(u, c_unitPropLifeMax)) {
        lasttickLife[p] = UnitGetPropertyFixed(u, c_unitPropLife, true);
        numberOfBars += 1;
    }
    if(hasStat(u, c_unitPropEnergyMax)) {
        lasttickEnergy[p] = UnitGetPropertyFixed(u, c_unitPropEnergy, true);
        numberOfBars += 1;
    }
    if(hasStat(u, c_unitPropShieldsMax)) {
        lasttickShields[p] = UnitGetPropertyFixed(u, c_unitPropShields, true);
        numberOfBars += 1;
    }
    for(i = 0; i < 3; i += 1) {
        enableStat(i, p, false);
    }
    
    for (i = numberOfBars-1; i >= 0; i -= 1) {
        if(hasStat(u, c_unitPropEnergyMax) && !doneShields) {
            statmax = UnitGetPropertyFixed(u, c_unitPropEnergyMax, true);
            stat = UnitGetPropertyFixed(u, c_unitPropEnergy, true);
            statmin = 0;
            statcolor = getStatcolor(energyColor.red, energyColor.green, energyColor.blue, modEnergy[p]);
            setStat(i, p, statmin, statmax, stat, statcolor);
            enableStat(i, p, true);

            doneShields = true;
            continue;
        }
        if(hasStat(u, c_unitPropLifeMax) && !doneLife) {
            statmax = UnitGetPropertyFixed(u, c_unitPropLifeMax, true);
            stat = UnitGetPropertyFixed(u, c_unitPropLife, true);
            statmin = 0;
            statcolor = getStatcolor(lifeColor.red, lifeColor.green, lifeColor.blue, modLife[p]);
            setStat(i, p, statmin, statmax, stat, statcolor);
            enableStat(i, p, true);
            
            doneLife = true;
            continue;
        }
        if(hasStat(u, c_unitPropShieldsMax) && !doneEnergy) {
            statmax = UnitGetPropertyFixed(u, c_unitPropShieldsMax, true);
            stat = UnitGetPropertyFixed(u, c_unitPropShields, true);
            statmin = 0;
            statcolor = getStatcolor(shieldsColor.red, shieldsColor.green, shieldsColor.blue, modShields[p]);
            setStat(i, p, statmin, statmax, stat, statcolor);
            enableStat(i, p, true);

            doneEnergy = true;
            continue;
        }
    }

}
static void renderWireframeLayer(int p, int base, int layer,
    //Properties
    string path,
    int r,
    int g,
    int b,
    int saturation,
    int renderPriority,
    int offsetX,
    int offsetY,
    int width,
    int height,
    int rotation,
    int alpha
) {
    int image;
    base = gv_LibapxUiStatsparrent;
    image = DialogControlCreateInPanel(gv_LibapxUiStatsparrent, c_triggerControlTypeImage);
    gv_LibapxPlayer[p].wireframeLayers[layer-1] = image;
    //Path
    DialogControlSetPropertyAsString(image, c_triggerControlPropertyImage, PlayerGroupSingle(p), path);
    //Saturation and color
    //Wait(1,c_timeReal);
    if(saturation == 1) {
        DialogControlSetPropertyAsColor(image, c_triggerControlPropertyColor, PlayerGroupSingle(p), Color(r, g, b));
    }
    else {
        DialogControlSetPropertyAsBool(image, c_triggerControlPropertyDesaturated, PlayerGroupSingle(p), true);
        DialogControlSetPropertyAsColor(image, c_triggerControlPropertyDesaturationColor, PlayerGroupSingle(p), Color(r, g, b));
    }
    //Render Priority
    DialogControlSetPropertyAsInt(image, c_triggerControlPropertyRenderPriority, PlayerGroupSingle(p), renderPriority);
    //Offset
    DialogControlSetPosition(image, PlayerGroupSingle(p), c_anchorTopLeft, offsetX, offsetY);
    
    //Width
    DialogControlSetSize(image, PlayerGroupSingle(p), width, height);

    //Rotation
    DialogControlSetPropertyAsInt(image, c_triggerControlPropertyRotation, PlayerGroupSingle(p), rotation);
    //Alpha
    DialogControlSetPropertyAsInt(image, c_triggerControlPropertyAlpha, PlayerGroupSingle(p), alpha);
}

static void updateWireframe(int p, unit u, int owner) {
    string wireframe = LibapxWireframeGetEntry(u);
    int i;
    string params;
    if(wireframe != gv_LibapxPlayer[p].previousWireframe) {  
        
        //Remove previous wf
        for (i = 0; i < gv_LibapxPlayer[p].wireframeLayerCount; i += 1) {
            DialogControlDestroy(gv_LibapxPlayer[p].wireframeLayers[i]);
        }
        gv_LibapxPlayer[p].wireframeLayerCount = 0;

        //Generate new wf
        if(wireframe == gv_DefaultWireframeString || !BankSectionExists(gv_LibapxPlayer[owner].bankStorage, "WF_"+wireframe)) {
            gv_LibapxPlayer[p].previousWireframe = gv_DefaultWireframeString;  
            //Default properties
            //Generate WF basewd on default properties
            gv_LibapxPlayer[p].wireframeLayerCount = 1;
            //Render
            renderWireframeLayer(p, gv_LibapxUiWireframe, 1, 
                gv_DefaultWireframe.path,
                gv_DefaultWireframe.r,
                gv_DefaultWireframe.g,
                gv_DefaultWireframe.b,
                BoolToInt(gv_DefaultWireframe.saturation),
                gv_DefaultWireframe.renderPriority,
                gv_DefaultWireframe.OffsetX,
                gv_DefaultWireframe.OffsetY,
                gv_DefaultWireframe.width,
                gv_DefaultWireframe.height,
                gv_DefaultWireframe.rotation,
                gv_DefaultWireframe.alpha
            );

        } else {
            gv_LibapxPlayer[p].previousWireframe = wireframe;  
            i = 1;
            while(BankKeyExists(gv_LibapxPlayer[owner].bankStorage, "WF_"+wireframe, "WFL_"+IntToString(i))) {
                params = BankValueGetAsString(gv_LibapxPlayer[owner].bankStorage, "WF_"+wireframe, "WFL_"+IntToString(i));

                renderWireframeLayer(p, gv_LibapxUiWireframe, i+1, 
                    StringWord(params, 1),
                    StringToInt(StringWord(params, 2)),
                    StringToInt(StringWord(params, 3)),
                    StringToInt(StringWord(params, 4)),
                    StringToInt(StringWord(params, 5)),
                    StringToInt(StringWord(params, 6)),
                    StringToInt(StringWord(params, 7)),
                    StringToInt(StringWord(params, 8)),
                    StringToInt(StringWord(params, 9)),
                    StringToInt(StringWord(params, 10)),
                    StringToInt(StringWord(params, 11)),
                    StringToInt(StringWord(params, 12)) 
                );
  
                i+=1; 
            };
            gv_LibapxPlayer[p].wireframeLayerCount = i;
          
        }
    }
}
void LibapxUpdateStatdisplay(int p) {
    unitgroup ug = UnitGroupSelected(p);
    unit u;
    int i;
    int owner;
    UnitGroupUnit(ug, 1);

    if(UnitGroupCount(ug, c_unitCountAlive) >= 1) {
        u = UnitGroupUnit(ug, 1);
        owner = UnitGetOwner(u);
        
        //Ticks down the color multipliers
        updateMods(p, u);

        //Checks if vulnerable
        if(libNtve_gf_UnitIsInvulnerable(u)) {
            for(i = 0; i < 3; i += 1) {
                enableStat(i, p, false);
            }
            updateWireframe(p, u, owner);
            DialogControlSetPropertyAsBool(gv_LibapxUiLine1, c_triggerControlPropertyVisible, PlayerGroupSingle(p), false);
            DialogControlSetPropertyAsBool(gv_LibapxUiLine2, c_triggerControlPropertyVisible, PlayerGroupSingle(p), false);
            DialogControlSetPropertyAsBool(gv_LibapxUiLine3, c_triggerControlPropertyVisible, PlayerGroupSingle(p), true);
            DialogControlSetPropertyAsBool(gv_LibapxUiLine4, c_triggerControlPropertyVisible, PlayerGroupSingle(p), true);
            DialogControlSetPropertyAsBool(gv_LibapxUiStatsparrent, c_triggerControlPropertyVisible, PlayerGroupSingle(p), true);
            return;
        }

        //Generates the statbars
        generateBars(p, u);

        //Wireframe stuff
        
        //Retrieve Units Wireframe
        updateWireframe(p, u, owner);

        //Show Parrent Dialog
        DialogControlSetPropertyAsBool(gv_LibapxUiLine1, c_triggerControlPropertyVisible, PlayerGroupSingle(p), false);
        DialogControlSetPropertyAsBool(gv_LibapxUiLine2, c_triggerControlPropertyVisible, PlayerGroupSingle(p), false);
        DialogControlSetPropertyAsBool(gv_LibapxUiLine3, c_triggerControlPropertyVisible, PlayerGroupSingle(p), true);
        DialogControlSetPropertyAsBool(gv_LibapxUiLine4, c_triggerControlPropertyVisible, PlayerGroupSingle(p), true);
        DialogControlSetPropertyAsBool(gv_LibapxUiStatsparrent, c_triggerControlPropertyVisible, PlayerGroupSingle(p), true);
    }
    else {
        DialogControlSetPropertyAsBool(gv_LibapxUiLine1, c_triggerControlPropertyVisible, PlayerGroupSingle(p), true);
        DialogControlSetPropertyAsBool(gv_LibapxUiLine2, c_triggerControlPropertyVisible, PlayerGroupSingle(p), true);
        DialogControlSetPropertyAsBool(gv_LibapxUiLine3, c_triggerControlPropertyVisible, PlayerGroupSingle(p), false);
        DialogControlSetPropertyAsBool(gv_LibapxUiLine4, c_triggerControlPropertyVisible, PlayerGroupSingle(p), false);
        //Hide parrent dialog
        DialogControlSetPropertyAsBool(gv_LibapxUiStatsparrent, c_triggerControlPropertyVisible, PlayerGroupSingle(p), false);
    }
};
       