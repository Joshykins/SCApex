//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

include "apex/engine/events/mouse.galaxy"
include "apex/engine/events/keypress.galaxy"
include "apex/engine/events/chat.galaxy"
include "apex/engine/events/player_leaves.galaxy"
include "apex/engine/events/region_waygates.galaxy"
include "apex/engine/events/unit_events.galaxy"
include "apex/engine/events/custom.galaxy"
include "apex/engine/api.galaxy"
include "apex/engine/events/ticker.galaxy"


// create the default Apex events
void LibapxEventsInitialize() {
	// player leaves event
	TriggerAddEventPlayerLeft(TriggerCreate("LibapxPlayerLeaves"), c_playerAny, c_gameResultUndecided);

	// mouse related events
	TriggerAddEventMouseMoved(TriggerCreate("LibapxMouseMoved"), c_playerAny );
	TriggerAddEventMouseClicked(TriggerCreate("LibapxMouseLeftCLickedDown"), c_playerAny, c_mouseButtonLeft, true);
	TriggerAddEventMouseClicked(TriggerCreate("LibapxMouseRightClickedDown"), c_playerAny, c_mouseButtonRight, true);
	TriggerAddEventMouseClicked(TriggerCreate("LibapxMouseRightClickedUp"), c_playerAny, c_mouseButtonRight, false);

	// key press (up and down) events
	TriggerAddEventKeyPressed(TriggerCreate("LibapxKeyPressedDown"), c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
	TriggerAddEventKeyPressed(TriggerCreate("LibapxKeyPressedUp"), c_playerAny, c_keyNone, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);

	// unit initialization events (functions found in unit.galaxy)
	TriggerAddEventUnitCreated(TriggerCreate("LibapxUnitInitialize"), null, null, null);
	TriggerAddEventUnitRegion(TriggerCreate("LibapxUnitSetParse"), null, RegionEntireMap(), true);
	TriggerAddEventUnitRemoved(TriggerCreate("LibapxUnitDeathCleanup"), null);
	TriggerAddEventUnitDied(TriggerCreate("LibapxUnitDeathCleanup"), null);

	// region waygate and waygate dialog events
	TriggerAddEventTimePeriodic(TriggerCreate("LibapxWaygateDialogManager"), 1.0, c_timeGame);
	//TriggerAddEventDialogControl(TriggerCreate("LibapxWaygateDialogClickedOld"), c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick );
	TriggerAddEventDialogControl(TriggerCreate("LibapxWaygateDialogClicked"), c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);

	//The only thing that needs an active runtime.
	TriggerAddEventTimePeriodic(TriggerCreate("LibapxTrigTicker"), .01, c_timeGame);
	
	//Event firing triggers for >event cmd. (bool triggers found in unit_events.galaxy)
	TriggerAddEventUnitStartedAttack(TriggerCreate("LibapxUnitAttacking"),null);
	TriggerAddEventUnitClick(TriggerCreate("LibapxUnitClicked"),null,c_playerAny);
	TriggerAddEventUnitAttacked(TriggerCreate("LibapxUnitAttacked"),null);
	TriggerAddEventUnitDied(TriggerCreate("LibapxUnitDied"), null);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitMoved"), null, AbilityCommand("move", 0),c_unitAbilStageExecute,true);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitMoveCancel"), null, AbilityCommand("move", 0),c_unitAbilStageCancel,true);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitMoveComplete"), null, AbilityCommand("move", 0),c_unitAbilStageComplete,true);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitPatrolExecute"), null, AbilityCommand("move", 1),c_unitAbilStageExecute,true);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitPatrolCancel"), null, AbilityCommand("move", 1),c_unitAbilStageCancel,true);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitPatrolAll"), null, AbilityCommand("move", 1),c_unitAbilStageAll,true);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitHoldPos"), null, AbilityCommand("move", 2),c_unitAbilStageExecute,true);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitHoldPosCancel"), null, AbilityCommand("move", 2),c_unitAbilStageCancel,true);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitHoldPosComplete"), null, AbilityCommand("move", 2),c_unitAbilStageComplete,true);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitScanMove"), null, AbilityCommand("move", 3),c_unitAbilStageExecute,true);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitScanMoveCancel"), null, AbilityCommand("move", 3),c_unitAbilStageCancel,true);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitScanMoveComplete"), null, AbilityCommand("move", 3),c_unitAbilStageComplete,true);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitTurn"), null, AbilityCommand("move", 4),c_unitAbilStageExecute,true);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitTurnCancel"), null, AbilityCommand("move", 4),c_unitAbilStageCancel,true);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitTurnComplete"), null, AbilityCommand("move", 4),c_unitAbilStageComplete,true);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitAttackMove"), null, AbilityCommand("attack", 0),c_unitAbilStageExecute,true);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitAttackMoveCancel"), null, AbilityCommand("attack", 0),c_unitAbilStageCancel,true);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitAttackMoveComplete"), null, AbilityCommand("attack", 0),c_unitAbilStageComplete,true);
	TriggerAddEventUnitSelected(TriggerCreate("LibapxUnitSelected"), null, c_playerAny, true);
	TriggerAddEventUnitSelected(TriggerCreate("LibapxUnitUnselected"), null, c_playerAny, false);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitStop"), null, AbilityCommand("stop", 0),c_unitAbilStageExecute,true);
	TriggerAddEventUnitAcquiredTarget(TriggerCreate("LibapxUnitAcquire"), null);
	TriggerAddEventUnitProperty(TriggerCreate("LibapxUnitLifePropertyChanges"), null, c_unitPropLife);
	TriggerAddEventUnitProperty(TriggerCreate("LibapxUnitShieldsPropertyChanges"), null, c_unitPropShields);
	TriggerAddEventUnitProperty(TriggerCreate("LibapxUnitEnergyPropertyChanges"), null, c_unitPropEnergy);
	TriggerAddEventUnitProperty(TriggerCreate("LibapxUnitKillsChange"), null, c_unitPropKills);
	TriggerAddEventUnitProperty(TriggerCreate("LibapxUnitXPChange"), null, c_unitPropXP);
	TriggerAddEventUnitProperty(TriggerCreate("LibapxUnitHeightChange"), null, c_unitPropHeight);
	TriggerAddEventUnitProperty(TriggerCreate("LibapxUnitLevelChange"), null, c_unitPropLevel);
	TriggerAddEventUnitProperty(TriggerCreate("LibapxUnitCurrentSpeedChange"), null, c_unitPropMovementSpeedCurrent);
	TriggerAddEventUnitAbility(TriggerCreate("LibapxUnitAbilityWasUsed"), null, null,c_unitAbilStageAll,true);
	TriggerAddEventUnitBehaviorChange(TriggerCreate("LibapxUnitBehaviorWasChanged"), null, null, c_unitBehaviorChangeAny);
	TriggerAddEventPlayerEffectUsed(TriggerCreate("LibapxUnitEffectUsed"), c_playerAny, null);
	TriggerAddEventUnitHighlight(TriggerCreate("LibapxUnitHighlightOn"), null, c_playerAny, true);
	TriggerAddEventUnitHighlight(TriggerCreate("LibapxUnitHighlightOff"), null, c_playerAny, false);


}



// LibapxPLayerEventsInitiallize
// ==========================
// events that need to be initialized individually for each player
void LibapxPLayerEventsInitiallize(int player) {
	// initialize player chat and chat command events
	TriggerAddEventChatMessage(TriggerCreate("LibapxProcessChatEvent") , player, "", false);
}
