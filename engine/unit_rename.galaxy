//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================
const string gNameIdentifier =  "LibapxRename_";
const string gSubtitleIdentifier = "LibapxSubtitle_";
const string gDescIdentifier = "LibapxDesc_";
const string gDescallIdentifier = "LibapxDescall_";
const string gDesctitleIdentifier = "LibapxDesctitle_";
const string gDesctitleallIdentifier = "LibapxDesctitleall_";
//Setters
void LibapxUnitnameSetEntry(unit u, string name) {
    string id = LibapxUnitId(u);
    DataTableSetString(true, gNameIdentifier + id, name);
}
void LibapxUnitsubtitleSetEntry(unit u, string subtitle) {
    string id = LibapxUnitId(u);
    DataTableSetString(true, gSubtitleIdentifier + id, subtitle);
}
void LibapxUnitdescSetEntry(unit u, string desc) {
    string id = LibapxUnitId(u);
    DataTableSetString(true, gDescIdentifier + id, desc);
}
void LibapxUnitdescallSetEntry(unit u, string descall) {
    string type = UnitGetType(u);
    string p = IntToString(UnitGetOwner(u));
    DataTableSetString(true, gDescallIdentifier + p + "_" + type, descall);
}
void LibapxUnitdesctitleSetEntry(unit u, string desctitle) {
    string id = LibapxUnitId(u);
    DataTableSetString(true, gDesctitleIdentifier + id, desctitle);
}
void LibapxUnitdesctitleallSetEntry(unit u, string desctitleall) {
    string type = UnitGetType(u);
    string p = IntToString(UnitGetOwner(u));
    DataTableSetString(true, gDesctitleallIdentifier + p + "_" + type, desctitleall);
}
//getters
string LibapxUnitnameGetEntry(unit u) {
    string id = LibapxUnitId(u);
    return DataTableGetString(true, gNameIdentifier + id);
}
string LibapxUnitsubtitleGetEntry(unit u) {
    string id = LibapxUnitId(u);
    return DataTableGetString(true, gSubtitleIdentifier + id);
}
string LibapxUnitdescGetEntry(unit u) {
    string id = LibapxUnitId(u);
    return DataTableGetString(true, gDescIdentifier + id);
}
string LibapxUnitdescallGetEntry(unit u) {
    string type = UnitGetType(u);
    string p = IntToString(UnitGetOwner(u));
    return DataTableGetString(true, gDescallIdentifier + p + "_" + type);
}
string LibapxUnitdesctitleGetEntry(unit u) {
    string id = LibapxUnitId(u);
    return DataTableGetString(true, gDesctitleIdentifier + id);
}
string LibapxUnitdesctitleallGetEntry(unit u) {
    string type = UnitGetType(u);
    string p = IntToString(UnitGetOwner(u));
    return DataTableGetString(true, gDesctitleallIdentifier + p + "_" + type);
}
//Formal getters
string LibapxUnitnameGet(unit u) {
    string id = LibapxUnitId(u);
    string catalogName;
    //check for name
    if(DataTableValueExists(true, gNameIdentifier + id)) {
        return LibapxUnitnameGetEntry(u);
    }
    //REturn renameall
    catalogName = CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(u), "Name", UnitGetOwner(u));
    //Will sometimes return Unit/Name/{Units Name}
    //Thus we check if it does and then substring if needed.
    if(StringContains(catalogName, "Unit/Name/", c_stringAnywhere, false)) {
        catalogName = StringSub(catalogName, 11, StringLength(catalogName));
    }
    return catalogName;
}
string LibapxUnitsubtitleGet(unit u) {
    string id = LibapxUnitId(u);
    string catalogName;
    //check for name
    if(DataTableValueExists(true, gSubtitleIdentifier + id)) {
        return LibapxUnitsubtitleGetEntry(u);
    }
    //REturn renameall
    catalogName = CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(u), "Subtitle", UnitGetOwner(u));
    //Will sometimes return Unit/Name/{Units Name}
    //Thus we check if it does and then substring if needed.
    if(StringContains(catalogName, "UnitSubtitle/", c_stringAnywhere, false)) {
        catalogName = StringSub(catalogName, 14, StringLength(catalogName));
    }
    return catalogName;
}

string LibapxUnitdescGet(unit u) {
    string id = LibapxUnitId(u);
    string type = UnitGetType(u);
    string p = IntToString(UnitGetOwner(u));
    string description;
    if(DataTableValueExists(true, gDescIdentifier + id)) {
        description = LibapxUnitdescGetEntry(u);
    }
    else if(DataTableValueExists(true, gDescallIdentifier + p + "_" + type)) {
        description = LibapxUnitdescallGetEntry(u);
    }
    else {
        description = LibapxUnitsubtitleGet(u);
    }
    return description;
}

string LibapxUnitdesctitleGet(unit u) {
    string id = LibapxUnitId(u);
    string type = UnitGetType(u);
    string p = IntToString(UnitGetOwner(u));
    string title;
    if( DataTableValueExists(true, gDesctitleIdentifier + id)) {
        title = LibapxUnitdesctitleGetEntry(u);
    }
    else if( DataTableValueExists(true, gDesctitleallIdentifier + p + "_" + type)) {
        title = LibapxUnitdesctitleallGetEntry(u);
    }
    else {
        title = LibapxUnitnameGet(u);
    }

    return title;
}


//  LibapxUpdateAlllabels(int p)
//============
//  Updates subtitle, name, desctitle, and desc labels
void LibapxUpdateAlllabels(int p) {
    unitgroup ug = UnitGroupSelected(p);
    unit selected;
    string name;
    string subtitle;
    string description;
    string descriptionTitle;
    if(UnitGroupCount(ug, c_unitCountAlive) == 1) {
        selected = UnitGroupUnit(ug, 1);
        name = LibapxUnitnameGet(selected);
        subtitle = LibapxUnitsubtitleGet(selected);
        descriptionTitle = LibapxUnitdesctitleGet(selected);
        description = LibapxUnitdescGet(selected);
        DialogControlSetPropertyAsText(gv_LibapxUiName, c_triggerControlPropertyText, PlayerGroupSingle(p), StringToText("<c val=\"ffffff\">"+name+"</c>"));
        DialogControlSetPropertyAsText(gv_LibapxUiHeroname, c_triggerControlPropertyText, PlayerGroupSingle(p), StringToText("<c val=\"ffffff\">"+name+"</c>"));
        DialogControlSetPropertyAsText(gv_LibapxUiTransportname, c_triggerControlPropertyText, PlayerGroupSingle(p), StringToText("<c val=\"ffffff\">"+name+"</c>"));
        DialogControlSetPropertyAsText(gv_LibapxUiSubtitle, c_triggerControlPropertyText, PlayerGroupSingle(p), StringToText("<c val=\"ffffff\">"+subtitle+"</c>"));
        if(gv_LibapxPlayer[p].descriptionOpen) {
            if((gv_LibapxPlayer[p].lastRenderedDesc != description)  || (gv_LibapxPlayer[p].lastRenderedDescName != descriptionTitle)) {
                gv_LibapxPlayer[p].lastRenderedDescName = descriptionTitle; 
                gv_LibapxPlayer[p].lastRenderedDesc = description; 
                DialogControlRemoveAllItems(gv_LibapxUiDescription, PlayerGroupSingle(p)); 
                DialogControlAddItem(gv_LibapxUiDescription, PlayerGroupSingle(p),  StringToText("<s val=\"InfoPaneUnitName\"><c val=\"ffffff\">"+descriptionTitle+"</c></s>"));
                DialogControlAddItem(gv_LibapxUiDescription, PlayerGroupSingle(p),  StringToText("<c val=\"ffffff\">"+description+"</c>"));
            }
        }
    }
}