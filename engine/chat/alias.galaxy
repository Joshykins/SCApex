//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

const int gv_LibapxAliasMaxDepth = 12;	// max depth of recursive alias replacing (prevent infinite aliasing)
const string gv_LibapxBankSectionAlias = "aliases";
void LibapxAliasChk(string alias, int player);

// AliasInsertInList
// =====================
// Inserts an alias string into the (player) alias list, list given by:
//  " alias(1) alias(2) alias(3) ... alias(n) "
// Each alias separated by a space. Note the spaces at each end of the string.
// Alias is inserted in order by searching through list until find
// the index k where: aliasInserted < alias(k).
// Otherwise, if not less than any, alias appended to the end.
static string AliasInsertInList(string list, string alias) {
	string curr = StringWord(list, 1);
	int i = 1;
	int index = 1; // index in string

	while( curr != "" ) {
		// insert before (if the string value less than curr) by replacing
		// space separating strings in the alias list with the inserted alias
		if( StringCompare(alias, curr, c_stringNoCase) <= 0 ) {
			return StringReplace(list, " " + alias + " ", index, index);
		}
		index = index + StringLength(curr) + 1; // +1 to account for space
		i += 1;
		curr = StringWord(list, i);
	}
	// else, append to end
	return StringReplace(list, " " + alias + " ", index, index);
}


// LibapxAliasCommandRedirect
// ===================
// gets "alias ..." command from parser, redirects to function
bool LibapxAliasCommandRedirect(string command, int player) {
	string subcommand = StringWord(command, 2);
	string alias = "";
	string content = "";
	if( StringEqual(subcommand, "create", c_stringNoCase) ) {
		alias = StringWord(command, 3);


		// remove "Alias" and "create" and the alias from chat msg
		content = StringReplaceWord(gv_LibapxPlayer[player].chatMsg, "Alias", "", 1, c_stringNoCase);
		content = StringReplaceWord(gv_LibapxPlayer[player].chatMsg, "alias", "", 1, c_stringNoCase);
		content = StringReplaceWord(content, "create", "", 1, c_stringNoCase);
		content = LibapxStringTrim( StringSub(content, StringFind(content, alias, c_stringNoCase) + StringLength(alias) + 1, StringLength(content)) );


		// first check if alias already exists
		if( BankKeyExists(gv_LibapxPlayer[player].bankStorage, gv_LibapxBankSectionAlias, alias) ) {
			LibapxPrintError(player, "Alias already exists, rewriting");
			LibapxBankRemove(gv_LibapxBankSectionAlias, alias, player);
			gv_LibapxPlayer[player].aliases = StringReplaceWord(gv_LibapxPlayer[player].aliases, " " + alias + " ", " ", 1, c_stringCase);
			LibapxPrintSuccess(player, "ALIAS REMOVED: " + alias);

			LibapxBankCreate(gv_LibapxBankSectionAlias, alias, content, player);
			gv_LibapxPlayer[player].aliases = AliasInsertInList(gv_LibapxPlayer[player].aliases, alias);
			LibapxPrintSuccess(player, "ALIAS CREATED: " + alias + "\n" + "[\'" + content + "\']");
			LibapxAliasChk(alias, player);

			return true;
		}

		if( content != "" ) {
			LibapxBankCreate(gv_LibapxBankSectionAlias, alias, content, player);
			gv_LibapxPlayer[player].aliases = AliasInsertInList(gv_LibapxPlayer[player].aliases, alias);
			LibapxPrintSuccess(player, "ALIAS CREATED: " + alias + "\n" + "[\'" + content + "\']");
			LibapxAliasChk(alias, player);
		}
		else {
			LibapxPrintError(player, "ALIAS CANNOT BE EMPTY");
		}

		return true;
	}
	else if( StringEqual(subcommand, "remove", c_stringNoCase) ) {
		alias = StringWord(command, 3);
		if( BankKeyExists(gv_LibapxPlayer[player].bankStorage, gv_LibapxBankSectionAlias, alias) ) {
			LibapxBankRemove(gv_LibapxBankSectionAlias, alias, player);
			gv_LibapxPlayer[player].aliases = StringReplaceWord(gv_LibapxPlayer[player].aliases, " " + alias + " ", " ", 1, c_stringCase);
			LibapxPrintSuccess(player, "ALIAS REMOVED: " + alias);
		}
		else {
			LibapxPrintError(player, "ALIAS " + alias + " DOES NOT EXIST");
		}
	}
	else if( StringEqual(subcommand, "removeall", c_stringNoCase) ) {
		LibapxBankSectionRemoveAll(gv_LibapxBankSectionAlias, player);
		gv_LibapxPlayer[player].aliases = "";
		LibapxPrintSuccess(player, "ALL ALIASES REMOVED");
	}
	else if( StringEqual(subcommand, "list", c_stringNoCase) ) {
		//gv_LibapxPlayer[player].aliases = LibapxSortAliases(player);
		alias = LibapxStringTrim(gv_LibapxPlayer[player].aliases);
		alias = StringReplaceWord(alias, " ", ", ", c_stringReplaceAll, c_stringNoCase);
		LibapxPrintOutput(player, "ALIASES: ");
		LibapxPrint(PlayerGroupSingle(player), alias);
	}
	else if( StringEqual(subcommand, "print", c_stringNoCase) ) {
		LibapxBankKeyContentDump(gv_LibapxBankSectionAlias, StringWord(command, 3), player);
	}
	else if( BankKeyExists(gv_LibapxPlayer[player].bankStorage, gv_LibapxBankSectionAlias, subcommand) ) {
		LibapxBankKeyContentDump(gv_LibapxBankSectionAlias, subcommand, player);
	}
	else {
		LibapxPrintError(player, "INVALID ALIAS COMMAND");
	}

	return false;
}

// LibapxAliasSub
// ===================
// recursively find and replace aliases in a given string
string LibapxAliasSub(string msg, int player, int recursionDepth) {
	string alias = StringWord(msg, 1);
	string subbed = "";
	int i = 1;

	if( recursionDepth > gv_LibapxAliasMaxDepth ) {
		return msg;
	}

	while( alias != "" ) {
		if( 
			!LibapxVariableWithinBraceCheck(msg, StringFind(msg, alias, c_stringNoCase))
			&& 
			BankKeyExists( gv_LibapxPlayer[player].bankStorage, gv_LibapxBankSectionAlias, alias ) 
		
		) {
			subbed = subbed + " " + LibapxAliasSub(BankValueGetAsString(gv_LibapxPlayer[player].bankStorage, gv_LibapxBankSectionAlias, alias), player, recursionDepth + 1);
		}
		else {
			subbed = subbed + " " + alias;
		}

		i += 1;
		alias = StringWord(msg, i);
	}

	// remove extra front end " " for return
	return StringSub(subbed, 2, StringLength(subbed));
}

//LibapxChkAllAliases
// =====================
// Checks all aliases
void LibapxChkAllAliases(int player) {
	string aliases = LibapxStringTrim(gv_LibapxPlayer[player].aliases);
	int i = 1;
	while(StringWord(aliases, i) != "") {
		LibapxAliasChk(StringWord(aliases, i), player);
		i += 1;
	}
}

// LibapxChkAlias
// =====================
// Checks alias for recursion or an invalid key
void LibapxAliasChk(string alias, int player) {
	string invalidKeyList = gv_LibapxSettings.commands;
	int i = 1;
	string aliasVal = "";
	if( !BankKeyExists( gv_LibapxPlayer[player].bankStorage, gv_LibapxBankSectionAlias, alias ) ) { 
		return;
	}
	//Remove "," from commands list
	while(StringFind(invalidKeyList, ",", c_stringNoCase) != -1 ) {
		invalidKeyList = StringReplace(invalidKeyList,
		"",
		StringFind(invalidKeyList, ",", c_stringNoCase),
		StringFind(invalidKeyList, ",", c_stringNoCase)
		);
	}
	
	//Check if invalid key
	while(StringWord(invalidKeyList, i) != "") {
		if(alias == StringWord(invalidKeyList, i)) {
			LibapxPrintText(PlayerGroupActive(), gv_LibapxPlayerNameColored(player) + StringToText(" had a alias with the key of <c val=\"00ffff\">" + alias + " </c> </n> As such this alias was removed because you can't have an alias with a key that matches a command."));
			LibapxBankRemove(gv_LibapxBankSectionAlias, alias, player);
			gv_LibapxPlayer[player].aliases = StringReplaceWord(gv_LibapxPlayer[player].aliases, " " + alias + " ", " ", 1, c_stringCase);
			return;
		}
		i += 1;
	}

	//Check for face-level recursion 
	aliasVal = BankValueGetAsString(gv_LibapxPlayer[player].bankStorage, gv_LibapxBankSectionAlias, alias);
	while(StringFind(aliasVal, ";", c_stringNoCase) != -1 ) {
		aliasVal = StringReplace(aliasVal,
		" ",
		StringFind(aliasVal, ";", c_stringNoCase),
		StringFind(aliasVal, ";", c_stringNoCase)
		);
	}
	i = 1;

	while(StringWord(aliasVal, i) != "") {
		if(alias == StringWord(aliasVal, i)) {
			LibapxPrintText(PlayerGroupActive(), gv_LibapxPlayerNameColored(player) + StringToText(" had a recursive alias with the key of <c val=\"00ffff\">" + alias + " </c> </n> As such this alias was removed because recursion is prohibited."));
			LibapxBankRemove(gv_LibapxBankSectionAlias, alias, player);
			gv_LibapxPlayer[player].aliases = StringReplaceWord(gv_LibapxPlayer[player].aliases, " " + alias + " ", " ", 1, c_stringCase);
			return;
		}
		i += 1;
	}
	
}


// LibapxStrcmp
// =============
// String comparison function for use with qsort
static int LibapxStrcmp(string k1, string k2) {
	return StringCompare(DataTableGetString(true, k1), DataTableGetString(true, k2), c_stringCase);
}

// LibapxSortAliases
// ==================
// Creates an alphabetized list of a player's alias strings where
// each alias is separated by a space (e.g. "alias1 alias2 alias3 ...")
string LibapxSortAliases(int player) {
	string var = gv_LibapxBankSectionAlias + "_" + IntToString(player);
	int count = BankKeyCount(gv_LibapxPlayer[player].bankStorage, gv_LibapxBankSectionAlias);
	int i;
	string sorted = " ";

	// gather aliases and set into a data table "array"
	for( i = 0; i < count; i += 1 ) {
		DataTableSetString(true, var + " " + IntToString(i), BankKeyName(gv_LibapxPlayer[player].bankStorage, gv_LibapxBankSectionAlias, i));
		//LibapxPrintSuccess(player, IntToString(i) + ":" + alias);
	}

	// sort alias "array" in data table
	libxQsort(var + " 0", count, c_dataTypeString, LibapxStrcmp);

	// recollect sorted aliases and set into player's alias string
	for( i = 0; i < count; i += 1 ) {
		sorted = sorted + DataTableGetString(true, var + " " + IntToString(i)) + " ";
		DataTableValueRemove(true, var + " " + IntToString(i)); // free data table
	}

	return sorted;
}
