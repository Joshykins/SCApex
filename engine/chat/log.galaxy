//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

// Log deals with messages that should be logged and able to be accessed
// elsewhere, specifically for a message log reading ui module (chatlog).
// The messages that are logged should be "ingame" messages, e.g. those
// from @say or >narrate that pertain to the roleplay story.

// number of messages to be logged
const int gv_LibapxNumberOfLoggedMessages = 512;

// max number of chars in a chat log msg. This should be set so that chat log
// messages can fit into a ui chatlog reader
// (not including timestamp or a unit name)
static const int gv_LibapxLogMessageLength = 60;

// guess for the size of a typical unit say msg header (timestamp + unitname)
static const int gv_LibapxLogMessageHeaderGuess = 24;

// event signal when a new chatlog message is added
const string gv_LibapxEventChatLog = "gv_LibapxEventChatLog ";

// Type: LogMsg
// ==============
// Message information unit stored in chatlog array
struct LogMsg {
	int author;		// player number of the creator of this msg
	text timestamp;	// text formatted timestamp [H:M:S]
	text msg;		// text formatted message
	bool isPartOfPrev;	// flag for whether this message part of the previous
							// useful for multi-line split messages
};

LogMsg[gv_LibapxNumberOfLoggedMessages] gv_LibapxChatLog;

// Counter for the current log index in the chatlog array.
// The index of chatlog array must be cyclical: that is, after writing to
// index gv_LibapxNumberOfLoggedMessages-1, the index will cycle back to 0.
int gv_LibapxChatLogCounter = 0;

// flag for whether the chatlog has cycled
bool gv_gv_LibapxChatLogCycled = false;

// ChatlogAdd
// ================
// Adds a message to the chatlog at the current counter index
// (stored in gv_LibapxChatLogCounter). When a new chatlog message saved,
// sends event signal [gv_LibapxEventChatLog + index]. This can be responded
// to by any modules that utilize this chatlog. The reason for using events
// rather than direct function calls is to decouple this module from any
// clients, so there does not have to be any interlocking dependencies between
// e.g. a chatlog ui and this engine chatlog system.
// Though events introduces messiness.
static void ChatlogAdd(int index, int author, text timestamp, text msg, bool partPrev) {
	gv_LibapxChatLog[index].author = author;
	gv_LibapxChatLog[index].timestamp = timestamp;
	gv_LibapxChatLog[index].msg = msg;
	gv_LibapxChatLog[index].isPartOfPrev = partPrev;

	// if chat log hasn't cycled and will cycle, check flag for cycled
	if( !gv_gv_LibapxChatLogCycled && gv_LibapxChatLogCounter == (gv_LibapxNumberOfLoggedMessages - 1) ) {
		gv_gv_LibapxChatLogCycled = true;
	}

	// send event that this chatlog message has been updated
	TriggerSendEvent(gv_LibapxEventChatLog + IntToString(gv_LibapxChatLogCounter));

	// increment counter and take modulus to ensure
	gv_LibapxChatLogCounter = (gv_LibapxChatLogCounter + 1) % gv_LibapxNumberOfLoggedMessages;
}


//LibapxStringSpaceSub
//===========
//Takes msg and target int then divides it by spacing to never reach goal length
// STructured like StringSub(string s, int start, int end)
string LibapxStringSpaceSub(string msg, int start, int end) {
	int currentCount = start;
	int estimatedCount = 0;
	string tempMsg;
	msg += " ";
	//Each time it checks if count is viable
	while(currentCount + estimatedCount < end) {

		currentCount += estimatedCount; //Combines currentCount and next iteration, letter count is still viable

		tempMsg = StringSub(msg, currentCount + 1, StringLength(msg));
		if (StringFind(tempMsg, " ", c_stringCase) == -1) {

			break;
		}
		estimatedCount = StringFind(tempMsg, " ", c_stringCase); //Tells iteration of next space
	}

	return 	StringSub(msg + "", start, currentCount);

}

//LibapxStringSpaceSubI
//=========== nabs index 2
//Takes msg and target int then divides it by spacing to never reach goal length
// STructured like StringSub(string s, int start, int end)
int LibapxStringSpaceSubI(string msg, int start, int end) {
	int currentCount = start;
	int estimatedCount = 0;
	string tempMsg;

	//Each time it checks if count is viable
	while(currentCount + estimatedCount < end) {

		currentCount += estimatedCount; //Combines currentCount and next iteration, letter count is still viable

		tempMsg = StringSub(msg, currentCount + 1, StringLength(msg));
		if (StringFind(tempMsg, " ", c_stringCase) == -1) {
			break;
		}
		estimatedCount = StringFind(tempMsg, " ", c_stringCase); //Tells iteration of next space
	}

	return currentCount;

}




// LibapxLog
// ===============
// Conditions an input message into chunks for saving into the chatlog.
// Used by client to log messages.
void LibapxLog(int author, text unitname, string msg) {
	int time = FixedToInt(GameGetMissionTime());
	text timestamp = StringToText("[" + IntToString( time / 3600 ) + ":" + IntToString( ( time % 3600 ) / 60 ) + ":" + IntToString( time % 60 ) + "] ");
	string chunk;
	int idx;
	int i = 0;

		ChatlogAdd(gv_LibapxChatLogCounter, author, timestamp, unitname + StringToText(":"), false);

		while( msg != "" ) {
			i +=1;
			if( StringFind(msg, " ", c_stringNoCase) == -1 ) {
				ChatlogAdd(gv_LibapxChatLogCounter, author, timestamp, StringToText(msg), true);
				break;
			}
			else if( StringLength(msg) > gv_LibapxLogMessageLength ) {
				chunk = LibapxStringSpaceSub(msg, 1, gv_LibapxLogMessageLength);
				if(chunk == " ") {
					chunk = msg;
					msg = "";
					ChatlogAdd(gv_LibapxChatLogCounter, author, timestamp, StringToText(chunk), true);
					break;
				}
				else {
					idx = LibapxStringSpaceSubI(msg, 1, gv_LibapxLogMessageLength);
					msg = LibapxStringSpaceSub(msg, idx, StringLength(msg) + 10);
					ChatlogAdd(gv_LibapxChatLogCounter, author, timestamp, StringToText(chunk), true);
				}
				
			} 

			else {
				ChatlogAdd(gv_LibapxChatLogCounter, author, timestamp, StringToText(msg), true);
				break;
			}
			if(i > 1000) {
				LibapxPrint(PlayerGroupAll(), "Log function error, report to Serobliss on the discord or #engine-discussion");
				break;
			}
		}


}


//@say I hope you're doing quite well today, though I wouldn't be that upset if you were under the weather dog. You're not dog though, through and through you're definitely a fiesty wolf who drinks a lot of water for one of his minor stature. That's all.
