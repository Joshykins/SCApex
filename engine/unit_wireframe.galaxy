//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

const string gWireframeIdentifier =  "LibapxWireframe_";
const string gLibapxBankSectionWireframe = "wireframes";

//Sets the bank for the wireframe
void LibapxWireframeBankLayerSet(
    //Not wireframe attr
    int p, string wireframe, bool create, int layer, 
    //Wireframe attrs
    string path, int r, int g, int b, bool saturation, int renderPriority, int OffsetX, int OffsetY, int width, int height, int rotation, int alpha
) {
    string settings = 
    path + " " +
    IntToString(r) + " " +
    IntToString(g) + " " +
    IntToString(b) + " " +
    IntToString(BoolToInt(saturation)) + " " +
    IntToString(renderPriority) + " " +
    IntToString(OffsetX) + " " +
    IntToString(OffsetY) + " " +
    IntToString(width) + " " +
    IntToString(height) + " " +
    IntToString(rotation) + " " +
    IntToString(alpha);

    if(create) {
        LibapxBankCreate("WF_"+wireframe, "WFL_"+IntToString(layer), settings, p);
    }
}
void LibapxWireframeRemove(int p, string wireframe) {
    if(BankSectionExists(gv_LibapxPlayer[p].bankStorage, "WF_"+wireframe)) {
        LibapxBankSectionRemoveAll("WF_"+wireframe, p);
    }
    //Ez
}

//Removes the specified layer and remaps the bank
void LibapxWireframeLayerRemove(string wireframe, string layer, int p) {
    int layerCount;
    int i;
    string[100] keys;
    string[200] values;
    //Remove specified layer
    LibapxBankRemove("WF_"+wireframe, "WFL_"+layer,p);
    layerCount = BankKeyCount(gv_LibapxPlayer[p].bankStorage, "WF_"+wireframe);
    for (i = 0; i < layerCount; i += 1) {
        keys[i] = BankKeyName(gv_LibapxPlayer[p].bankStorage, "WF_"+wireframe,i);
        values[i] = BankValueGetAsString(gv_LibapxPlayer[p].bankStorage, "WF_"+wireframe, keys[i]);
    }
    LibapxBankSectionRemoveAll("WF_"+wireframe, p);
    for (i = 0; i < layerCount; i += 1) {
        LibapxBankCreate("WF_"+wireframe, "WFL_"+IntToString(i+1), values[i], p);
    }
}

void LibapxWireframeLayerUpdate(string wireframe, int layer, int p, string settings) {
    LibapxBankCreate("WF_"+wireframe, "WFL_"+IntToString(layer), settings, p);
    gv_LibapxPlayer[p].previousWireframe = "aStringThatNoOneWillUse";
}

void LibapxWireframeLayerAdd(string wireframe, int p, string settings) {
    int layerCount;
    int i;
    layerCount = BankKeyCount(gv_LibapxPlayer[p].bankStorage, "WF_"+wireframe);
    LibapxBankCreate("WF_"+wireframe, "WFL_"+IntToString(layerCount+1), settings, p);
}


int LibapxWireframeGetLayercount(int p, string wireframe) {
    int layers;
    layers = BankKeyCount(gv_LibapxPlayer[p].bankStorage, "WF_"+wireframe);
    return layers;
};

//Retrieves the name of all the wireframes.
string LibapxWireframesGetAll(int p) {
    int i = BankSectionCount(gv_LibapxPlayer[p].bankStorage) - 1;
    string wireframeName;
    string wireframeList;
    while(i >= 0) {
        if( StringContains(BankSectionName(gv_LibapxPlayer[p].bankStorage, i), "WF_", c_stringBegin, c_stringNoCase) ) {
            wireframeName = BankSectionName(gv_LibapxPlayer[p].bankStorage, i);
            wireframeList = wireframeList + " " + StringSub(wireframeName, 4, StringLength(wireframeName));

        }
        i -= 1;
    }
    return wireframeList;
}

// LibapxWireframeSet
// ==================
//This sets a unit's wireframe name
//(checks if valid beforehand)
void LibapxWireframeSetEntry(unit u, string name) {
    string id = LibapxUnitId(u);
    int p = UnitGetOwner(u);
    if(BankSectionExists(gv_LibapxPlayer[p].bankStorage, "WF_" + name)) {
        DataTableSetString(true, gWireframeIdentifier + id, name);
    }
    else {
        LibapxPrintError(p, " The wireframe " + name + " does not exist.");
    }
}

// LibapxWireframeGet
// ==================
//This gets a unit's wireframe name to be used to retrieve the unit's wireframe properties when rendering
string LibapxWireframeGetEntry(unit u) {
    string id = LibapxUnitId(u);
    int p = UnitGetOwner(u);
    if(DataTableValueExists(true, gWireframeIdentifier + id)) {
        return DataTableGetString(true, gWireframeIdentifier + id);
    }
    //This'll occur if wireframe not set, or doesnt exist.
    //In that event use default frame.
    return gv_DefaultWireframeString;

}